use Libraries.Game.Game
use Libraries.Game.Scenes.Scene
use Libraries.Game.Scenes.ModelSceneProperty
use Libraries.Containers.Iterator
use Libraries.Game.Graphics.Model
use Libraries.System.File
use Libraries.Containers.Array
use Libraries.Game.Scenes.LightSceneProperty
use Libraries.Game.Graphics.AmbientLight
use Libraries.Game.Graphics.DirectionalLight
use Libraries.Game.Graphics.PointLight

/*
    This is a default class for creating a game in Quorum. Note that the Main 
    action begins by calling StartGame(), which loads a window a game can 
    be displayed in. The action CreateGame is where the game should load any 
    assets, like images to be displayed, frames of animation, or sounds to be
    played. 
*/
class Main is Game
    /*
        This action, Main, starts our computer program. In Quorum, programs always
        begin from Main.
    */
    action Main
        StartGame()
    end

    /*
        This action sets up the default values for a game. For example, we might
        use the Libraries.Game.Graphics.Drawable class to load up an image or 
        a shape. Or, we might add a Libraries.Interface.Button for making something clickable
        or a Libraries.Interface.TextBox for gathering user input in a game.
    */
    action CreateGame
        Scene scene
        File file
        file:SetPath("Scenes/scene.qs")
        scene:Load(file)

        ModelSceneProperty property = scene:GetModelSceneProperty()
        Array<Model> models = property:GetModels()
        i = 0
        repeat while i < models:GetSize()
            Model model = models:Get(i)
            Add(model)
            i = i + 1
        end
        LightSceneProperty lightProperties = scene:GetLightSceneProperty()
        if lightProperties not= undefined
            Array<AmbientLight> ambients = lightProperties:GetAmbientLights()
            Array<DirectionalLight> directionals = lightProperties:GetDirectionalLights()
            Array<PointLight> points = lightProperties:GetPointLights()

            i = 0
            repeat while ambients not= undefined and i < ambients:GetSize()
                SetAmbientLight(ambients:Get(i))
                i = i + 1
            end

            i = 0
            repeat while directionals not= undefined and i < directionals:GetSize()
                Add(directionals:Get(i))
                i = i + 1
            end

            i = 0
            repeat while points not= undefined and i < points:GetSize()
                Add(points:Get(i))
                i = i + 1
            end
        end
    end

    /*
        The update action is called on every "frame" of animation in a game. This
        action should be used to do operations on items. So, for example, we 
        might use this action to change frames of animation, to rotate items, 
        or to make creatures jump.
    */
    action Update(number seconds)
    end
end