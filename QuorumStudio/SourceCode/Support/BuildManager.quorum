package Libraries.Development.Environment.Studio.Build
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Language.Compile.Library
use Libraries.Language.Compile.CompilerErrorManager
use Libraries.Language.Compile.CompilerRequest
use Libraries.Language.Compile.Compiler
use Libraries.Language.Compile.CompilerResult
use Libraries.Development.Environment.Studio.Interface.OutputTab
use Libraries.Containers.Iterator
use Libraries.Language.Compile.CompilerError
use Libraries.System.Properties
use Libraries.Language.Debug.Debugger
use Libraries.Language.Debug.DebuggerListener
use Libraries.Language.Debug.DebuggerStartEvent
use Libraries.Language.Debug.DebuggerStopEvent
use Libraries.Language.Debug.DebuggerStepEvent
use Libraries.Language.Debug.DebuggerErrorEvent
use Libraries.Language.Debug.BreakpointEvent
use Libraries.Containers.HashTable
use Libraries.Language.Debug.Breakpoint
use Libraries.Containers.List
use Libraries.Language.Debug.BreakpointListener
use Libraries.Language.Compile.Symbol.SymbolTable
use Libraries.Language.Compile.Symbol.Class
use Libraries.Development.Environment.Studio.CodeEditorTabPane
use Libraries.Development.Environment.Studio.Interface.EditorTab
use Libraries.Interface.Controls.TextBox
use Libraries.Language.Debug.VariablesModel
use Libraries.Language.Debug.Variable
use Libraries.Development.Environment.Studio.OutputEditorTabPane
use Libraries.Development.Environment.Studio.Interface.VariablesTab
use Libraries.Interface.Selections.TabPaneSelection
use Libraries.Interface.Controls.Tab
use Libraries.System.DateTime
use Libraries.Development.Environment.Projects.Quorum.ImageSheets
use Libraries.Development.Environment.Projects.Quorum.ImageSheet
use Libraries.Development.Environment.Lego
use Libraries.Language.Compile.Documentation.DocumentationGenerator
use Libraries.System.ProcessListener
use Libraries.System.ProcessEvent
use Libraries.Development.Environment.Studio.Interface.ErrorTab
use Libraries.Development.Environment.Studio.Behaviors.SelectTabBehavior
use Libraries.Development.Environment.Studio.Behaviors.UpdateVariablesBehavior
use Libraries.Development.Environment.Projects.ProjectManager
use Libraries.Concurrency.ThreadRunner
use Libraries.Development.Environment.Studio.Behaviors.BuildLoop
use Libraries.Development.Environment.Studio.Behaviors.UpdateCodeEditorBehavior
use Libraries.Development.Environment.Studio.Interface.CodeTextBox
use Libraries.Language.Compile.CodeCompletionRequest
use Libraries.Language.Compile.CodeCompletionResult
use Libraries.Development.Environment.Studio.Android.AndroidSupport
use Libraries.Development.Environment.Studio.Behaviors.SetErrorsBehavior
use Libraries.Development.Environment.Studio.Interface.CallStackTab
use Libraries.Development.Environment.Studio.Behaviors.UpdateCallStackBehavior
use Libraries.Language.Debug.DebuggerOutputEvent
use Libraries.Language.Compile.CompilerProfiler
use Libraries.Game.GameStateManager
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Development.Environment.Studio.Toolbar
use Libraries.Interface.Controls.Button
use Libraries.Development.Environment.Studio.Behaviors.ButtonPulseBehavior
use Libraries.Development.Environment.Configuration.Options
use Libraries.Development.Environment.Projects.ProjectListener
use Libraries.System.SystemHelper
use Libraries.Development.Versioning.Repository
use Libraries.Development.Versioning.Git
use Libraries.Development.Versioning.DiffRequest
use Libraries.Development.Versioning.DiffResult
use Libraries.Language.Compile.CodeCompletionItem
use Libraries.Development.Environment.Studio.Mobile.IOSSupport
use Libraries.Development.Environment.Studio.Mobile.AppleNativeCompileListener
use Libraries.System.Logger
use Libraries.Development.Environment.Projects.Project
use Libraries.System.Process

class BuildManager is DebuggerListener, ProcessListener, ProjectListener, MobileListener
    Library library
    Logger logger
    constant text DEFAULT_LIBRARY_PATH = "Library/Standard"
    constant text DEFAULT_LIBRARY_OUTPUT_PATH = "Library/Compiled"
    Debugger debugger
    HashTable<text, BuildInformation> builds
    HashTable<text, HashTable<integer, Breakpoint>> breakpoints
    Array<BreakpointListener> breakpointListeners
    BuildInformation debuggingProgram = undefined
    CodeEditorTabPane editors = undefined
    OutputEditorTabPane outputTabs = undefined
    HashTable<text, Process> processes
    HashTable<text, OutputTab> outputTabsForProcesses
    ProjectManager projectManager = undefined

    //for the parsing and indexing procedures
    BuildLoop buildLoop
    constant number PARSE_DELAY_SECONDS = 0.15
    

    //state storage from the build loop
    HashTable<text, CompilerResult> goodCompilerResults
    HashTable<text, CompilerResult> recentCompilerResults

    CodeTextBox debuggerLineTextBox = undefined
    //this compiler can be used to store and clear out single file compiles
    //it uses a magic key for compilation
    text SINGLE_FILE_COMPILE_KEY = "Magic_ld93jfhf83p2nflk_Star_Wars_Rules_dh9238fdcsllsdoi9348fnkjsnd"
    Compiler standardLibraryCompiler

    GameStateManager gameStateManager

    // Used when programs are run or debug to make the associated button pulse.
    ButtonPulseBehavior pulseBehavior

    // Used when building or clean-and-building to make the associated buttons pulse.
    ButtonPulseBehavior buildPulseBehavior
    Options options = undefined
    
    action GetOptions returns Options
        return options
    end

    action SetOptions(Options options)
        me:options = options
    end

    action GetRecentCompilerResult(text project) returns CompilerResult
        return recentCompilerResults:GetValue(project)
    end

    on create
        debugger:Add(me)
    end

    action GetDebuggerLineTextBox returns CodeTextBox
        return debuggerLineTextBox
    end

    action SetDebuggerLineTextBox(CodeTextBox box)
        debuggerLineTextBox = box
    end
    
    action GetLastGoodResult(text projectPath) returns CompilerResult
        CompilerResult lastGoodResult = undefined

        if goodCompilerResults:HasKey(projectPath)
            lastGoodResult = goodCompilerResults:GetValue(projectPath)
        end

        return lastGoodResult
    end

    action GetParseDelayInSeconds returns number
        return PARSE_DELAY_SECONDS
    end

    action GetProjectManager returns ProjectManager
        return projectManager
    end

    action SetProjectManager(ProjectManager manager)
        projectManager = manager
        projectManager:Add(me)
    end

    action OpenedProject(QuorumProject project)
        
    end

    action ClosedProject(QuorumProject project)
        File location = project:GetLocation()
        if location not= undefined
            text value = location:GetAbsolutePath()
            if goodCompilerResults:HasKey(value)
                goodCompilerResults:RemoveKey(value)
            end

            if recentCompilerResults:HasKey(value)
                recentCompilerResults:RemoveKey(value)
            end
        end
        SystemHelper helper
        helper:RequestGarbageCollection()
    end

    action GetCodeEditorTabPane returns CodeEditorTabPane
        return editors
    end

    action SetCodeEditorTabPane(CodeEditorTabPane pane)
        me:editors = pane
    end

    action GetOutputEditorTabPane returns OutputEditorTabPane
        return outputTabs
    end

    action SetOutputEditorTabPane(OutputEditorTabPane pane)
        me:outputTabs = pane
    end

    action Add(BreakpointListener listener)
        breakpointListeners:Add(listener)
    end

    action Remove(BreakpointListener listener)
        breakpointListeners:Remove(listener)
    end

    action GetBreakpointListeners returns Iterator<BreakpointListener>
        return breakpointListeners:GetIterator()
    end

    action GetBreakpointIterator returns Iterator<Breakpoint>
        Array<Breakpoint> bps
        Iterator<text> iterator = breakpoints:GetKeyIterator()
        repeat while iterator:HasNext()
            text value = iterator:Next()
            HashTable<integer,Breakpoint> lines = breakpoints:GetValue(value)
            Iterator<Breakpoint> points = lines:GetValueIterator()
            repeat while points:HasNext()
                Breakpoint bp = points:Next()
                bps:Add(bp)
            end
        end
        return bps:GetIterator()
    end

    Array<Breakpoint> bpCache
    action RehashBreakpoints(text path)
        HashTable<integer, Breakpoint> points = breakpoints:GetValue(path)
        
        if points not= undefined
            Iterator<Breakpoint> iterator = points:GetValueIterator()
            repeat while iterator:HasNext()
                Breakpoint bp = iterator:Next()
                bpCache:Add(bp)
            end

            points:Empty()
            i = 0
            repeat while i < bpCache:GetSize()
                Breakpoint value = bpCache:Get(i)
                points:Add(value:GetLine(), value)
                i = i + 1
            end

            bpCache:Empty()
        end

        BreakpointEvent event
        event:SetPath(path)
        event:SetRehashEvent(true)
        FireBreakpointEvent(event)
    end

    action GetBreakpointIterator(text path) returns Iterator<Breakpoint>
        HashTable<integer, Breakpoint> points = breakpoints:GetValue(path)
        if points = undefined
            Array<Breakpoint> bps
            return bps:GetIterator()
        end

        Iterator<Breakpoint> iterator = points:GetValueIterator()
        return iterator
    end

    private action FireBreakpointEvent(BreakpointEvent event)
        i = 0
        repeat while i < breakpointListeners:GetSize()
            BreakpointListener listener = breakpointListeners:Get(i)
            listener:ToggledBreakpoint(event)
            i = i + 1
        end
    end

    /*
        This action returns true if the build engine chose to index at this time.
        The engine may reject an index request, normally because the currently 
        open file is not dirty.
    */
    action Index returns boolean
        //first check if the standard library is finished scanning. If not, bail
        if not library:IsScanned()
            return false
        else 
        end
        
        //check to see what the current file open is
        CodeEditorTabPane code = GetCodeEditorTabPane()
        TabPaneSelection selection = code:GetSelection()

        Tab tab1 = selection:GetTab()
        if tab1 = undefined or not (tab1 is EditorTab)
            return false
        end
        EditorTab tab = cast(EditorTab, selection:GetTab())

        File file = tab:GetFile()
        //get the file the tab is using
        if file = undefined
            return false
        end

        //first check if the tab is dirty. If not, exit and return false
        if not tab:IsParseDirty()
            return false
        end

        //now check to see if it has been long enough since the user stopped typing
        if tab:GetTimeSinceDirty() < PARSE_DELAY_SECONDS
            return false
        end

        //set this file to not be parse dirty, so that it is not compiled again
        //unless it changes
        tab:SetIsParseDirty(false)
        QuorumProject project = cast(QuorumProject, projectManager:IsProjectSourceFile(file))
        CodeTextBox box = tab:GetTextBox()
        if box = undefined
            return false
        end
        text source = box:GetText()

        //actually do the building
        BuildInformation info
        info:outputTab = outputTabs:GetOutputTab()
        info:project = project
        info:errorTab = outputTabs:GetErrorTab()
        info:recompile = file
        info:recompileValue = source
        info:box = box

        FastBuild(info)
        
        return true
    end

    action GetLibrary returns Library
        return library
    end

    action ToggleBreakpoint(Breakpoint point)
        File file = point:GetFile()
        integer line = point:GetLine()
        text path = file:GetAbsolutePath()
        BreakpointEvent event
        event:SetBreakpoint(point)
        if breakpoints:HasKey(path)
            HashTable<integer, Breakpoint> lines = breakpoints:GetValue(path)
            if lines:HasKey(line)
                lines:RemoveKey(line)

                if lines:IsEmpty()
                    breakpoints:RemoveKey(path)
                end
                event:SetIsAdded(false)
            else 
                lines:Add(line, point)
                event:SetIsAdded(true)
            end
        else 
            HashTable<integer, Breakpoint> lines
            lines:Add(line, point)
            breakpoints:Add(path, lines)
            event:SetIsAdded(true)
        end

        if debugger not= undefined
            ToggleBreakpointInDebugger(point, undefined)
        end

        FireBreakpointEvent(event)
    end

    action ToggleBreakpoint(File file, integer line)
        //path = path + ":" + line
        Breakpoint point
        point:SetLine(line)
        point:SetFile(file)
        ToggleBreakpoint(point)
    end

    /*
        This action returns the most recent information from the build.
        If the system has never been built
    */
    action GetBuildInformation(QuorumProject project) returns BuildInformation
        File loc = project:GetLocation()
        if builds:HasKey(loc:GetAbsolutePath())
            BuildInformation info = builds:GetValue(loc:GetAbsolutePath())
            return info
        end
        return undefined
    end

    action GetDebugger returns Debugger
        return debugger
    end

    action Run(DebuggerStartEvent event)
        logger:Log("Starting Debugger")
        QuorumStudio studio = cast(QuorumStudio, gameStateManager:GetGame())
        Toolbar toolbar = studio:GetToolbar()
        Button debugButton = toolbar:GetButton("Debug")
        pulseBehavior:SetFinished(false)
        debugButton:AddBehavior(pulseBehavior)
    end

    action Run(DebuggerStopEvent event)
        logger:Log("Stopping Debugger")
        debugger:Stop()
        debuggingProgram = undefined
        if debuggerLineTextBox not= undefined
            debuggerLineTextBox:RemoveTextStyle("Debugger")
        end

        debuggingProgram = undefined
        pulseBehavior:SetFinished(true)
    end

    /*
        This action might be called in an instance where a debugger line
        exists, but should be removed, like in a continue call.
    */
    action RemoveDebuggerLine
        if debuggerLineTextBox not= undefined
            debuggerLineTextBox:RemoveTextStyle("Debugger")
        end
    end

    action Run(DebuggerStepEvent event)
        if debuggingProgram not= undefined
            text name = event:GetClassName()
            integer line = event:GetLine()

            logger:Log("Debugger: " + name + ", " + line)
            CompilerResult result = debuggingProgram:result
            File newFileToOpen = undefined
            SymbolTable table = result:symbolTable
            Class clazz = table:GetClass(event:GetClassName())
            if clazz = undefined
                table = library:GetSymbolTable()
                if table not= undefined
                    clazz = table:GetClass(event:GetClassName())
                end
            end
            if clazz not= undefined
                File file = clazz:GetFile()
                if file not= undefined and editors not= undefined
                    //editors:QueueTabOpen(file, event:GetLine())
                    newFileToOpen = file
                end
            end
            UpdateDebugger(newFileToOpen, event:GetLine())
        end
    end

    action Run(DebuggerErrorEvent event)
    end

    action Run(DebuggerOutputEvent event)
        OutputTab out = outputTabs:GetOutputTab()
        text value = event:GetOutput()
        out:Append(value)
    end

    action Run(BreakpointEvent event)
        Breakpoint bp = event:GetBreakpoint()
        if bp = undefined or debuggingProgram = undefined
            return now
        end

        BuildInformation info = debuggingProgram
        CompilerResult result = info:result
        SymbolTable table = result:symbolTable
        if table = undefined
            return now
        end


        Class value = table:GetClass(bp:GetDotName())
        if value = undefined
            //check the standard library
            table = library:GetSymbolTable()
            value = table:GetClass(bp:GetDotName())
            if value = undefined return now end
        end
        File file = value:GetFile()
        integer line = bp:GetLine()
        logger:Log("Breakpoint: " + file:GetPath() + ":" + line)
        UpdateDebugger(file, line)
    end

    private action UpdateDebugger(File newFile, integer line)
        VariablesTab variablesTab = outputTabs:GetVariablesTab()
        UpdateVariablesBehavior update
        update:SetSelectedTab(variablesTab)
        update:SetOutputEditorTabPane(outputTabs)
        update:SetDebugger(debugger)
        update:SetTreeTable(variablesTab:GetDebuggerTreeTable())
        update:SetNewFile(newFile)
        update:SetDebuggerLine(line)
        update:SetBuildManager(me)

        CodeEditorTabPane code = GetCodeEditorTabPane()
        TabPaneSelection selection = code:GetSelection()
        update:SetCodeEditorTabPane(code)

        EditorTab tab = cast(EditorTab, selection:GetTab())
        if tab not= undefined
            CodeTextBox box = tab:GetTextBox()
            update:SetOldTextBox(box)
        end
        variablesTab:AddBehavior(update)

        //update the callstack
        CallStackTab call = outputTabs:GetCallStackTab()

        UpdateCallStackBehavior behavior
        behavior:SetBuildInformation(debuggingProgram)
        behavior:SetCallStackTab(call)
        behavior:SetOutputEditorTabPane(outputTabs)
        behavior:SetDebugger(debugger)
        call:AddBehavior(behavior)
    end

    action Scan
        text locationPath = DEFAULT_LIBRARY_PATH
        text outputPath = DEFAULT_LIBRARY_OUTPUT_PATH
        File libraryLocation
        File outputLocation

        if options not= undefined and options:IsOverridingStandardLibrary()
            locationPath = options:GetStandardLibraryOverrideLocation()
            outputPath = options:GetStandardLibraryOutputOverrideLocation()

            libraryLocation:SetAbsolutePath(locationPath)
            library:SetLocation(libraryLocation)
            library:SetCachingLibraryOpcodes(false)

            outputLocation:SetAbsolutePath(outputPath)
            library:SetOutputFolder(outputLocation)
        else
            libraryLocation:SetPath(locationPath)
            library:SetLocation(libraryLocation)
            library:SetCachingLibraryOpcodes(false)

            outputLocation:SetPath(outputPath)
            library:SetOutputFolder(outputLocation)
        end

        
        
        library:Scan()
        Index()
    end

    action RequestCodeCompletion returns CodeCompletionResult
        if not library:IsScanned()
            return undefined
        else 
        end
        
        //check to see what the current file open is
        CodeEditorTabPane code = GetCodeEditorTabPane()
        TabPaneSelection selection = code:GetSelection()

        EditorTab tab = cast(EditorTab, selection:GetTab())
        if tab = undefined
            return undefined
        end

        File file = tab:GetFile()
        //get the file the tab is using
        if file = undefined
            return undefined
        end

        QuorumProject project = cast(QuorumProject, projectManager:IsProjectSourceFile(file))
        Compiler compiler = undefined
        text resultKey = undefined
        if project = undefined
            compiler = standardLibraryCompiler
            resultKey = SINGLE_FILE_COMPILE_KEY
        else
            compiler = project:GetCompiler()
            File location = project:GetLocation()
            resultKey = location:GetAbsolutePath()
        end

        CodeTextBox box = tab:GetTextBox()
        text source = box:GetText()
        integer index = box:GetCaretPosition()

        CodeCompletionRequest request
        request:fileKey = file:GetAbsolutePath()

        Class libraryClass = GetStandardLibraryPath(file)
        text path = file:GetAbsolutePath()
        text libraryClassPath = undefined
        if libraryClass not= undefined
            request:fileKey = libraryClass:GetFile():GetAbsolutePath()
        end

        request:library = library
        request:source = source
        request:caretLocation = index
        request:result = recentCompilerResults:GetValue(resultKey)
        request:lastCompiledResult = goodCompilerResults:GetValue(resultKey)
 
        check
            CodeCompletionResult result = compiler:Request(request)
    
            //this was probably a garbage request, so send it off, but probably ignore it
            //the compiler is probably busy.
            if request:table = undefined
                result:SetIsValidCodeCompletion(false)
            end
            return result
        detect e
            logger:Log(e:GetStackTraceMessage())
        end
        return undefined
    end

    private action ChangeErrorLocations(CompilerErrorManager errors, text key, text libraryKey)
        errors:ChangeErrorKey(libraryKey, key)
        errors:ChangeHintKey(libraryKey, key)
    end

    private action FastBuildStandardLibraryFile(BuildInformation info, text key, text libraryKey)
        OutputTab out = info:outputTab

        Array<File> sources
        File libraryFile
        libraryFile:SetAbsolutePath(libraryKey)
        sources:Add(libraryFile)
       
        File fakeMain
        fakeMain:SetPath("Resources/Files/Main.quorum")
        sources:Add(fakeMain)

        //get the project type
        CompilerRequest request
        request:SetOutputType(request:JAVA_BYTECODE)
        request:noWritingFiles = true
        
        File main = fakeMain
        request:library = library
        request:files = sources
        request:isFastCompileRequest = true

        //these are the core changes
        CodeTextBox box = info:box
        if box not= undefined
            request:recompileValue = box:GetText()
        else 
            request:recompileValue = info:recompileValue
        end
        
        request:recompile = libraryFile
        
        request:main = main
        Compiler compiler = standardLibraryCompiler
        info:request = request

        DateTime time
        number start = time:GetEpochTime()
        CompilerResult result = compiler:Compile(request)
        number finish = time:GetEpochTime()
        text displayedTime = GetFormattedTime(start, finish)
        info:result = result

        //this will need to be changed to update the editor once red lines exist.
        CompilerErrorManager errors = result:compilerErrorManager
        ChangeErrorLocations(errors, key, libraryKey)
        
        result:Dispose()
        if errors:IsCompilationErrorFree()
            CompilerResult copy = result:CopyToBareResult()
            goodCompilerResults:Add(SINGLE_FILE_COMPILE_KEY, copy)
        end
        recentCompilerResults:Add(SINGLE_FILE_COMPILE_KEY, result)
        
        if box not= undefined
            box:SetBuildManager(me)
            UpdateCodeEditorBehavior updater
            //updater:SetHintPathComparison(libraryKey)
            //updater:SetBuildInformation(info)
            updater:SetBuildManager(me)
            updater:SetProjectKey(SINGLE_FILE_COMPILE_KEY)

            QuorumProject proj = GetQuorumProject()
            //if there is a compiler project open, compare the file to that one
            if proj not= undefined
                boolean hasGit = proj:HasGitSupport()
                if hasGit //if it has Git support, do a diff on the file and update accordingly
                    Repository repository = proj:GetGitRepository()
                    Git git = proj:GetGit()
                    DiffRequest req
                    req:SetFile(libraryFile)
                    text currentText = box:GetText()
                    req:SetCurrentText(currentText)
                    DiffResult res = git:RequestDiff(repository, req)
                    updater:SetDiffResult(res)
                end
            end
            //updater:SetCompilerResult(result)
            updater:SetPath(libraryFile)
            box:AddBehavior(updater)
        end
    end

    private action GetQuorumProject returns QuorumProject
        Iterator<QuorumProject> iterator = projectManager:GetIterator()
        repeat while iterator:HasNext()
            QuorumProject project = iterator:Next()
            if project:IsCompilerProject()
                return project
            end
        end

        return undefined
    end

    private action GetIndexOf(text path) returns integer
        integer val = path:IndexOf("/Library/Standard/Libraries")
        if val = -1//try the other pathing
            val = path:IndexOf("\Library\Standard\Libraries")
        end
        return val
    end
    private action GetStandardLibraryPath(File original) returns Class
        text path = original:GetAbsolutePath()
        integer val = GetIndexOf(path)
        SymbolTable symbol = library:GetSymbolTable()
        Class libraryClass = undefined
        text libraryClassPath = undefined
        //if this value exists, it's very likely this is in the standard library.
        if val not= -1
            Iterator<Class> iterator = symbol:GetClasses()
            Class clazz = iterator:Next()
            if clazz not= undefined
                File file = clazz:GetFile()
                text actualPath = file:GetAbsolutePath()
                integer newVal = GetIndexOf(actualPath)
                if newVal not= -1
                    text value2 = actualPath:GetSubtext(0, newVal)
                    text value3 = path:GetSubtext(val)
                    libraryClassPath = value2 + value3
                    libraryClass = symbol:GetClassInFile(libraryClassPath)
                    if libraryClass not= undefined
                        return libraryClass
                    end
                end
            end
        end
        return undefined
    end

    action FastBuild(BuildInformation info)
        QuorumProject project = info:project
        File theFileCompiled = info:recompile
        Class libraryClass = GetStandardLibraryPath(theFileCompiled)
        text path = theFileCompiled:GetAbsolutePath()
        text libraryClassPath = undefined
        if libraryClass not= undefined
            libraryClassPath = libraryClass:GetFile():GetAbsolutePath()
        end
        
        //in this case, we have a class in the standard library
        //run a compile, but tell the compiler what's up.
        if libraryClass not= undefined
            FastBuildStandardLibraryFile(info, path, libraryClassPath)
            return now
        end

        //if the project is undefined, the user might be trying to 
        //compile just a standalone Quorum file
        //We don't support this in Quorum Studio 1.0, but this is where it would
        //go if we did.
        if project = undefined
            return now
        end
        OutputTab out = info:outputTab

        Array<File> sources = project:GetSources()
        Iterator<text> extraSourceIterator = project:GetQuorumDependencies()
        repeat while extraSourceIterator:HasNext()
            text value = extraSourceIterator:Next()
            File file
            File loc = project:GetLocation()
            file:SetWorkingDirectory(loc:GetAbsolutePath())
            file:SetPath(value)
            sources:Add(file)
        end
        
        //get the project type
        CompilerRequest request
        if project:IsBytecodeType()
            request:SetOutputType(request:JAVA_BYTECODE)
        elseif project:IsJavascriptType()
            request:SetOutputType(request:JAVASCRIPT)
        elseif project:IsServerType()
            request:SetWebRequest(true)
            request:SetOutputType(request:JAVA_BYTECODE)
        elseif project:IsLegoType()
            request:SetOutputType(request:JAVA_BYTECODE)
        elseif project:IsAndroidType()
            request:SetOutputType(request:JAVA_BYTECODE)
        elseif project:IsDocumentationType()
            request:SetOutputType(request:DOCUMENT)
        elseif project:IsDocumentationStandardLibraryType()
            request:SetOutputType(request:DOCUMENT)
            GenerateStandardLibraryDocumentation(info)
            return now
        end
        
        File main = project:GetMain()
        request:library = library
        request:files = sources
        request:isFastCompileRequest = true

        CompilerResult lastResult = recentCompilerResults:GetValue(project:GetLocation():GetAbsolutePath())
        if lastResult not= undefined
            request:symbolTable = lastResult:symbolTable
            request:opcodes = lastResult:opcodes
        end

        //these are the core changes
        request:recompileValue = info:recompileValue
        request:recompile = info:recompile
        
        request:main = main
        Compiler compiler = project:GetCompiler()
        info:request = request

        DateTime time
        number start = time:GetEpochTime()
        CompilerResult result = compiler:Compile(request)        
        number finish = time:GetEpochTime()

        text displayedTime = GetFormattedTime(start, finish)
        info:result = result
        text value = project:GetLocation():GetAbsolutePath()
        //this will need to be changed to update the editor once red lines exist.
        CompilerErrorManager errors = result:compilerErrorManager
        
        result:Dispose()
        if errors:IsCompilationErrorFree()
            CompilerResult copy = result:CopyToBareResult()
            goodCompilerResults:Add(value, copy)
        end

        

        recentCompilerResults:Add(value, result)
        CodeTextBox box = info:box
        if box not= undefined
            box:SetBuildManager(me)
            UpdateCodeEditorBehavior updater
            //updater:SetBuildInformation(info)
            updater:SetBuildManager(me)
            updater:SetProjectKey(value)
            
            boolean hasGit = project:HasGitSupport()
            if hasGit //if it has Git support, do a diff on the file and update accordingly
                Repository repository = project:GetGitRepository()
                Git git = project:GetGit()
                DiffRequest req
                req:SetFile(theFileCompiled)
                text currentText = box:GetText()
                req:SetCurrentText(currentText)
                DiffResult res = git:RequestDiff(repository, req)
                updater:SetDiffResult(res)
            end
            updater:SetPath(info:recompile)
            box:AddBehavior(updater)
        end
    end

    action Bootstrap(BuildInformation info)
        //first we build the program with Library.quorum
        QuorumProject project = info:project
        OutputTab out = info:outputTab
        out:Empty()

        //out:Append("Bootstrapping")
//        out:Append("Compiling Library.quorum")
//        //now we run it and check for errors
//        project:SetMain("SourceCode/Library.quorum")
//        Run(info)
//        
//        out:Append("Compiling Main.quorum")
//        //Now we rebuild with main.quorum
//        project:SetMain("SourceCode/main.quorum")
//        Build(info)

        //Now we do the equivalent of the old sh/bat script
        BootstrapCopy(info)
    end

    private action BootstrapCopy(BuildInformation info)
        DateTime date
        number start = date:GetEpochTime()
        QuorumProject project = info:project
        OutputTab out = info:outputTab
        out:Append("Copying Standard Library")

        
        File location = project:GetLocation()

        text copyFolderName = "Quorum3Compiler"
        text runFolderName = "Run"
        text libraryFolderName = "Library"
        text sourceCodeFolderName = "SourceCode"
        

//        File sodbeansReleaseFolder
//        sodbeansReleaseFolder:SetAbsolutePath(location:GetAbsolutePath())
//        sodbeansReleaseFolder = sodbeansReleaseFolder:GetParentDirectory():GetParentDirectory()
//        sodbeansReleaseFolder:SetPath("sodbeans/Sodbeans/Quorum/release/")
//
//        File sodbeansExtFolder
//        sodbeansExtFolder = sodbeansReleaseFolder:GetParentDirectory():GetParentDirectory()
//        sodbeansExtFolder:SetPath("Quorum/release/modules/ext/")
//
//        File sodbeansLibraryFolder
//        sodbeansLibraryFolder = sodbeansReleaseFolder:GetParentDirectory():GetParentDirectory()
//        sodbeansLibraryFolder:SetPath("Quorum/release/modules/Library")

        File quorumStudioLibraryFolder
        quorumStudioLibraryFolder:SetAbsolutePath(location:GetAbsolutePath())
        quorumStudioLibraryFolder = quorumStudioLibraryFolder:GetParentDirectory():GetParentDirectory()
        quorumStudioLibraryFolder:SetPath("quorum-studio/QuorumStudio/Library")

//        File copyFolder
//        copyFolder:SetWorkingDirectory(location:GetAbsolutePath())
//        copyFolder:SetPath(copyFolderName)
//
//        File runFolder
//        runFolder:SetWorkingDirectory(location:GetAbsolutePath())
//        runFolder:SetPath(runFolderName)

        File libraryFolder
        libraryFolder:SetWorkingDirectory(location:GetAbsolutePath())
        libraryFolder:SetPath(libraryFolderName)

//        File sourceCodeFolder
//        sourceCodeFolder:SetWorkingDirectory(location:GetAbsolutePath())
//        sourceCodeFolder:SetPath(sourceCodeFolderName)
//        
//        File newLibraryFolder
//        newLibraryFolder:SetWorkingDirectory(copyFolder:GetAbsolutePath())
//        newLibraryFolder:SetPath(libraryFolderName)
//        
//        if copyFolder:Exists()
//            copyFolder:Delete(true)
//        end
        
        
//        copyFolder:CreateDirectories()
//
//        runFolder:Copy(copyFolder, true)
//        libraryFolder:Copy(newLibraryFolder, true)
//        sourceCodeFolder:Copy(copyFolder, true)
//
//        Array<File> sourceFiles = project:GetSources()
//
//        //now setup a process that will compile the compiler
//        out:Append("Compiling Quorum Next in Quorum")
//        RunCompilerProcess(out, copyFolder, location, sourceCodeFolder, sourceFiles, 
//            "/Default.jar")
//        
//        //now recursively copy the folder in Run up a folder
//        File newRunFolder
//        newRunFolder:SetWorkingDirectory(copyFolder:GetAbsolutePath())
//        newRunFolder:SetPath(runFolderName)
//        newRunFolder:Copy(copyFolder, true)
//        newRunFolder:Delete(true)
//
//        out:Append("Recompiling Quorum Next in Quorum next")
//        RunCompilerProcess(out, copyFolder, location, sourceCodeFolder, sourceFiles, 
//            "/Quorum.jar")
//
//        out:Append("Copying to Development Environments")
//
//        constant text quorumJarName = "Quorum.jar"
//        constant text quorumStandardLibraryJarName = "QuorumStandardLibrary.jar"
//        constant text quorumStandardPluginsJarName = "QuorumStandardPlugins.jar"
//        constant text quorumStandardLibraryJavascriptName = "QuorumStandardLibrary.js"

        //first copy in the compiler and the standard library

//        File compiledQuorumJar
//        compiledQuorumJar:SetWorkingDirectory(copyFolder:GetAbsolutePath())
//        compiledQuorumJar:SetPath(quorumJarName)
//
//        File compiledStandardLibraryJar
//        compiledStandardLibraryJar:SetWorkingDirectory(copyFolder:GetAbsolutePath())
//        compiledStandardLibraryJar:SetPath(quorumStandardLibraryJarName)
//
//        File compiledStandardPluginsJar
//        compiledStandardPluginsJar:SetWorkingDirectory(copyFolder:GetAbsolutePath())
//        compiledStandardPluginsJar:SetPath(quorumStandardPluginsJarName)
//
//        File compiledStandardLibraryJavaScript
//        compiledStandardLibraryJavaScript:SetWorkingDirectory(copyFolder:GetAbsolutePath())
//        compiledStandardLibraryJavaScript:SetPath(quorumStandardLibraryJavascriptName)

//        File sodbeansQuorumJar
//        sodbeansQuorumJar:SetWorkingDirectory(sodbeansExtFolder:GetAbsolutePath())
//        sodbeansQuorumJar:SetPath(quorumJarName)
//
//        File sodbeansStandardLibraryJar
//        sodbeansStandardLibraryJar:SetWorkingDirectory(sodbeansExtFolder:GetAbsolutePath())
//        sodbeansStandardLibraryJar:SetPath(quorumStandardLibraryJarName)
//
//        File sodbeansStandardPluginsJar
//        sodbeansStandardPluginsJar:SetWorkingDirectory(sodbeansExtFolder:GetAbsolutePath())
//        sodbeansStandardPluginsJar:SetPath(quorumStandardPluginsJarName)
//
//        File sodbeansStandardLibraryJavaScript
//        sodbeansStandardLibraryJavaScript:SetWorkingDirectory(sodbeansExtFolder:GetAbsolutePath())
//        sodbeansStandardLibraryJavaScript:SetPath(quorumStandardLibraryJavascriptName)

        //copy the jar files
//        compiledQuorumJar:Copy(sodbeansQuorumJar)
//        compiledStandardLibraryJar:Copy(sodbeansStandardLibraryJar)
//        compiledStandardPluginsJar:Copy(sodbeansStandardPluginsJar)
//        compiledStandardLibraryJavaScript:Copy(sodbeansStandardLibraryJavaScript)
//
//        //delete library folders if they exist
//        if sodbeansLibraryFolder:Exists()
//            sodbeansLibraryFolder:Delete(true)
//        end

        if quorumStudioLibraryFolder:Exists()
            quorumStudioLibraryFolder:Delete(true)
        end

        //copy the standard library all fresh and new
//        libraryFolder:Copy(sodbeansLibraryFolder, true)
        libraryFolder:Copy(quorumStudioLibraryFolder, true)

//        out:Append("Creating Deployment Packages")
//        constant text deployName = "Deploy"
//        File deployFolder
//        deployFolder:SetWorkingDirectory(location:GetAbsolutePath())
//        deployFolder:SetPath(deployName)
//
//        if deployFolder:Exists()
//            deployFolder:Delete(true)
//        end

//        deployFolder:CreateDirectories()
//
//        File deploymentQuorumJar
//        deploymentQuorumJar:SetWorkingDirectory(deployFolder:GetAbsolutePath())
//        deploymentQuorumJar:SetPath(quorumJarName)
//
//        File deploymentStandardLibraryJar
//        deploymentStandardLibraryJar:SetWorkingDirectory(deployFolder:GetAbsolutePath())
//        deploymentStandardLibraryJar:SetPath(quorumStandardLibraryJarName)
//
//        File deploymentStandardPluginsJar
//        deploymentStandardPluginsJar:SetWorkingDirectory(deployFolder:GetAbsolutePath())
//        deploymentStandardPluginsJar:SetPath(quorumStandardPluginsJarName)
//
//        File deploymentStandardLibraryJavaScript
//        deploymentStandardLibraryJavaScript:SetWorkingDirectory(deployFolder:GetAbsolutePath())
//        deploymentStandardLibraryJavaScript:SetPath(quorumStandardLibraryJavascriptName)
//        
//        //copy into the deploy folder
//        compiledQuorumJar:Copy(deploymentQuorumJar)
//        compiledStandardLibraryJar:Copy(deploymentStandardLibraryJar)
//        compiledStandardPluginsJar:Copy(deploymentStandardPluginsJar)
//        compiledStandardLibraryJavaScript:Copy(deploymentStandardLibraryJavaScript)
//
//        if copyFolder:Exists()
//            copyFolder:Delete(true)
//        end

        number finish = date:GetEpochTime()
        number total = finish - start
        total = total / 1000.0
        out:Append("Completed in " + total + " seconds.")
    end

    private action RunCompilerProcess(
        OutputTab out, File copyFolder, File location, File sourceCodeFolder, 
        Array<File> sourceFiles, text compilerName)
        Process runner
        
//        runner:SetOutputTab(out)

        runner:AddListener(me)
        runner:SetDirectory(copyFolder)
        Properties properties
        text os = properties:GetOperatingSystemName()
        text java = FindJava()
        if java = undefined
            out:Append("I could not find Java. Is it installed?")
        end

        text value = location:GetAbsolutePath()
        outputTabsForProcesses:Add(value, out)
        if processes:HasKey(value) //kill it, if you have to
            Process old = processes:RemoveKey(value)
            outputTabsForProcesses:RemoveKey(value)
            old:Cancel()
        end

        text run = copyFolder:GetAbsolutePath() + compilerName


        Array<text> flags
        flags:Add("-Dsodbeans=1")
        flags:Add("-jar")
        flags:Add(run)
        flags:Add("-name")
        flags:Add("Quorum")
        flags:Add("-compile")
        flags:Add("main.quorum") //add the main in first

        integer size = sourceCodeFolder:GetAbsolutePath():GetSize()
        //now add in all of the rest of the files, but as text
        Iterator<File> iterator = sourceFiles:GetIterator()
        repeat while iterator:HasNext()
            File file = iterator:Next()
            if file:GetFileName() not= "main.quorum"
                //calculate its path relative to this folder
                text absolutePath = file:GetAbsolutePath()
                text relativePath = absolutePath:GetSubtext(size)
                //toss this in as a flag
                flags:Add(relativePath)
            end
        end

        runner:SetName(java)
        runner:SetParameters(flags)
        runner:Run()
        //add it into the list of running processes
        processes:Add(value, runner)
    end

    action Build(BuildInformation info)
        if info:isCleanAndBuild = false
            // Make the build button pulse.
            QuorumStudio studio = cast(QuorumStudio, gameStateManager:GetGame())
            Toolbar toolbar = studio:GetToolbar()
            Button buildButton = toolbar:GetButton("Build")
            buildPulseBehavior:SetFinished(false)
            buildButton:AddBehavior(buildPulseBehavior)
        else
            // Make the clean and build button pulse.
            QuorumStudio studio = cast(QuorumStudio, gameStateManager:GetGame())
            Toolbar toolbar = studio:GetToolbar()
            Button buildButton = toolbar:GetButton("Clean and Build")
            buildPulseBehavior:SetFinished(false)
            buildButton:AddBehavior(buildPulseBehavior)
        end

        QuorumProject project = info:project
        OutputTab out = info:outputTab
        if info:clearOutput
            out:Empty()
        end
        out:Append("Building " + project:GetName())

        //do image sheet manipulation here
        if project:IsImageSheetsEnabled() and project:IsRecompileImageSheetsOnBuild()
            ImageSheets sheets = project:GetImageSheets()
            Iterator<ImageSheet> iterator = sheets:GetIterator()

            if iterator:HasNext()
                out:Append("Automatically building the following image sheets: ")
            end

            repeat while iterator:HasNext()
                ImageSheet sheet = iterator:Next()
                text next = sheet:GetName()
                out:Append(next)
                sheet:Save(project:GetLocation())
            end
        end
        //do file saving here if necessary
        editors:SaveDirtyTabs()

        Array<File> sources = project:GetSources()
        Iterator<text> extraSourceIterator = project:GetQuorumDependencies()
        repeat while extraSourceIterator:HasNext()
            text value = extraSourceIterator:Next()
            File file
            File loc = project:GetLocation()
            file:SetWorkingDirectory(loc:GetAbsolutePath())
            file:SetPath(value)
            sources:Add(file)
        end
        
        //get the project type
        CompilerRequest request
        if project:IsBytecodeType()
            request:SetOutputType(request:JAVA_BYTECODE)
        elseif project:IsJavascriptType()
            request:writeJavaScriptToDisk = true
            request:SetOutputType(request:JAVASCRIPT)
        elseif project:IsServerType()
            request:SetWebRequest(true)
            request:SetOutputType(request:JAVA_BYTECODE)
        elseif project:IsLegoType()
            request:SetOutputType(request:JAVA_BYTECODE)
        elseif project:IsAndroidType()
            request:SetOutputType(request:JAVA_BYTECODE)
        elseif project:IsDocumentationType()
            request:SetOutputType(request:DOCUMENT)
        elseif project:IsDocumentationStandardLibraryType()
            request:SetOutputType(request:DOCUMENT)
            GenerateStandardLibraryDocumentation(info)

            buildPulseBehavior:SetFinished(true)

            return now
        end
        
        
        File main = project:GetMain()
        request:library = library
        request:files = sources
        
        request:main = main
        Compiler compiler = project:GetCompiler()
        info:request = request
        text path = project:GetLocation():GetAbsolutePath()
        CompilerResult lastResult = recentCompilerResults:GetValue(path)
        //this is the correct optimization, but appears to not be working as correctly
        //TODO: Fix this so that it still builds correctly with it in there.
        if lastResult not= undefined and not info:isCleanAndBuild
            request:symbolTable = lastResult:symbolTable
            request:opcodes = lastResult:opcodes
            if lastResult:opcodes = undefined
                request:symbolTable = undefined //reset it, because something is wrong.
            end
        end

        DateTime time
        number start = time:GetEpochTime()
        CompilerResult result = compiler:Compile(request)
        recentCompilerResults:Add(path, result)
        number finish = time:GetEpochTime()

        text displayedTime = GetFormattedTime(start, finish)
        info:result = result

        CompilerErrorManager errors = result:compilerErrorManager
        OutputErrors(info, errors, "Build Successful in " + displayedTime + " seconds")
 
        if project:IsLegoType() and errors:IsCompilationErrorFree()
            SendToLego(info)
        end

        buildPulseBehavior:SetFinished(true)
    end

    private action OutputErrors(BuildInformation info, CompilerErrorManager errors, text message)
        QuorumProject project = info:project
        OutputTab out = info:outputTab
        ErrorTab errorTab = info:errorTab

        SetErrorsBehavior behavior
        behavior:SetCompilerErrorManager(errors)
        behavior:SetErrorTab(errorTab)
        behavior:SetOutputEditorTabPane(outputTabs)
        behavior:SetOutputTab(out)
        behavior:SetMessage(message)
        errorTab:AddBehavior(behavior)
    end

    private action GetFormattedTime(number start, number finish) returns text
        number amount = (finish - start) / 1000.0
        text formattedTime = "" + amount
        Array<text> timeArray = formattedTime:Split("\.")
        text left = timeArray:Get(0)
        text right = timeArray:Get(1)
        if right:GetSize() >= 3
            right = right:GetSubtext(0, 2)
        end

        text displayedTime = left + "." + right
        return displayedTime
    end

    private action GenerateStandardLibraryDocumentation(BuildInformation info)
        DocumentationGenerator generator
        QuorumProject project = info:project
        OutputTab out = info:outputTab
        
        Compiler compiler = project:GetCompiler()
        File run = compiler:GetRunFolder()
        generator:SetRunFolder(run)
        

        DateTime date
        number start = date:GetEpochTime()
        generator:Write(library)
        number finish = date:GetEpochTime()

        text displayedTime = GetFormattedTime(start, finish)
        out:Append("Documentation Generated at " + run:GetAbsolutePath() + " in " + displayedTime + " seconds.")
    end

    private action SendToLego(BuildInformation info)
        Lego lego
        QuorumProject project = info:project
        OutputTab out = info:outputTab

        File library
        File plugins
        File loc = project:GetExecutableLocation()
        File parentOfExec = loc:GetParentDirectory()
        library:SetWorkingDirectory(parentOfExec:GetAbsolutePath() + "/" + "QuorumStandardLibrary.jar")
        plugins:SetWorkingDirectory(parentOfExec:GetAbsolutePath() + "/" + "QuorumStandardPlugins.jar")

        lego:Send(library)
        lego:Send(plugins)
        boolean found = lego:Send(loc)
        if found
            out:Append("Successfully output " + project:GetExecutableName() + " to your lego robot.")
        else
            out:Append("I could not connect to a lego device. Is it plugged in?")
        end
    end

    action Clean(BuildInformation info)
        QuorumProject project = info:project
        Compiler compiler = project:GetCompiler()
        File build = compiler:GetBuildFolder()
        File run = compiler:GetRunFolder()
        if build not= undefined and build:Exists() and build:IsDirectory()
            build:Delete(true)
        end

        if run not= undefined and run:Exists() and run:IsDirectory()
            run:Delete(true)
        end
    end

    action CleanAndBuild(BuildInformation info)
        info:isCleanAndBuild = true
        Clean(info)
        Build(info)
    end

    action SendToIOS(BuildInformation info)
        QuorumProject project = info:project
        OutputTab out = info:outputTab
        if project:IsLegoType()
            out:Append("The project is currently in LEGO mode. I cannot send a LEGO project to an Android Device. Please compile in Standard mode.")
            return now
        end

        if project:IsServerType()
            out:Append("The project is currently in Server mode. I cannot send a Server project to an Android Device. Please compile in Standard mode.")
            return now
        end

        if project:IsJavascriptType()
            out:Append("The project is currently in Web Client mode. I cannot send a Web client project to an Android Device. Please compile in Standard mode.")
            return now
        end
        Build(info)

        CompilerResult result = info:result
        SymbolTable table = result:symbolTable
        CompilerErrorManager errors = result:compilerErrorManager
        if not errors:IsCompilationErrorFree()
            return now
        end

        //now get the main, so we can write a new template file
        File main = project:GetMain()
        if main = undefined
            out:Append("Main not found. Ending iOS Compilation")
            return now
        end

        Class mainClazz = table:GetClassInFile(main:GetAbsolutePath())
        if mainClazz = undefined
            out:Append("Main not found. Ending iOS Compilation")
            return now
        end

        text run = project:GetLocation():GetAbsolutePath() + "/Run"
        
        File runDirectory
        runDirectory:SetAbsolutePath(run)
        File parentDirectory = runDirectory:GetParentDirectory()

        File mediaDirectory
        text mediaPathFromProject = project:GetMobileAssetsPath()
        if mediaPathFromProject not= undefined
            text media = parentDirectory:GetAbsolutePath() + "/" + mediaPathFromProject

            mediaDirectory:SetAbsolutePath(media)
        end
        
        //Get the custom iOS properties, if any.
        text path = ""
        text jarName = project:GetExecutableName() + ".jar"
        text applicationName = project:GetExecutableName()
        File iosLocation
        iosLocation:SetPath("External/Mac")

        IOSSupport ios
        ios:AddListener(me)
        ios:Setup(runDirectory:GetAbsolutePath(), jarName)
        

        if path not= undefined and iosLocation:Exists()
            //android:SetAndroidPath(androidPath)
        end

        out:Append("")
        out:Append("Starting iOS Generator")
        out:Append("Generating Template iOS Project")
        ios:CopyAndRename(iosLocation:GetAbsolutePath(), runDirectory:GetAbsolutePath(), applicationName)
        out:Append("Copying Information")
        ios:CopyLibraries() 

        out:Append("")
        out:Append("Creating XCode Project")
        Process createXCodeProcess = ios:GetGenerateXCodeProjectProcess()
        //createXCodeProcess:AddListener(me)
        createXCodeProcess:Run()
        
        text device = project:GetIOSDevice()
        text version = project:GetIOSVersionKey()
        out:Append("Building Natives for " + device + ", ios version " + version + 
            ". This process can take several minutes.")

        AppleNativeCompileListener nativeListener
        nativeListener:SetOutputTab(out)
        Process xcodeBuildProcess = ios:GetBuildXCodeProjectProcess(project)
        xcodeBuildProcess:AddListener(nativeListener)
        xcodeBuildProcess:Run()

        out:Append("Natives completed")
        out:Append("Writing configuration files")
        ios:RewriteConfig(info)       

        text mobileAssetPath = project:GetMobileAssetsPath()
        if mediaDirectory not= undefined and mediaDirectory:Exists() and mobileAssetPath not= undefined
            out:Append("Copying Assets")
            ios:CopyAssets(mediaDirectory, mobileAssetPath)
        else
            out:Append("No assets requested for copying")
        end

        out:Append("Running iOS program")
        Process build = ios:GetBuildForSimulatorProcess(project)
        build:AddListener(ios)
        build:Run()
    end

    action SendToAndroidDebugMode(BuildInformation info)
        QuorumProject project = info:project
        OutputTab out = info:outputTab
        if project:IsLegoType()
            out:Append("The project is currently in LEGO mode. I cannot send a LEGO project to an Android Device. Please compile in Standard mode.")
            return now
        end

        if project:IsServerType()
            out:Append("The project is currently in Server mode. I cannot send a Server project to an Android Device. Please compile in Standard mode.")
            return now
        end

        if project:IsJavascriptType()
            out:Append("The project is currently in Web Client mode. I cannot send a Web client project to an Android Device. Please compile in Standard mode.")
            return now
        end
        Build(info)

        CompilerResult result = info:result
        SymbolTable table = result:symbolTable
        CompilerErrorManager errors = result:compilerErrorManager
        if not errors:IsCompilationErrorFree()
            return now
        end

        //now get the main, so we can write a new template file
        File main = project:GetMain()
        if main = undefined
            out:Append("Main not found. Ending Android Compilation")
            return now
        end

        Class mainClazz = table:GetClassInFile(main:GetAbsolutePath())
        if mainClazz = undefined
            out:Append("Main not found. Ending Android Compilation")
            return now
        end

        text run = project:GetLocation():GetAbsolutePath() + "/Run"
        
        File runDirectory
        runDirectory:SetAbsolutePath(run)
        File parentDirectory = runDirectory:GetParentDirectory()

        File mediaDirectory
        text mediaPathFromProject = project:GetMobileAssetsPath()
        if mediaPathFromProject not= undefined
            text media = parentDirectory:GetAbsolutePath() + "/" + mediaPathFromProject

            mediaDirectory:SetAbsolutePath(media)
        end

        //Get the paths for the android project, if the user has customized them
        text androidPath = project:GetAndroidPath()
        text androidAlternateJDK = project:GetAndroidAlternateJDKPath()
        text jarName = project:GetExecutableName() + ".jar"
        text applicationName = project:GetExecutableName()
        File androidLocation
        androidLocation:SetPath("External/Android")

        AndroidSupport android
        android:AddListener(me)
        android:Setup(runDirectory:GetAbsolutePath(), jarName)

        if androidPath not= undefined and not androidPath:IsEmpty()
            android:SetAndroidPath(androidPath)
        end

        out:Append("")
        out:Append("Starting Android Generator")
        out:Append("Generating Template Android Project")
        android:CopyAndRename(androidLocation:GetAbsolutePath(), runDirectory:GetAbsolutePath(), applicationName, androidAlternateJDK)
        out:Append("Copying Information")
        android:CopyLibraries()
        android:CopyNewMain(mainClazz)
        

        text mobileAssetPath = project:GetMobileAssetsPath()
        if mediaDirectory not= undefined and mediaDirectory:Exists() and mobileAssetPath not= undefined
            out:Append("Copying Assets")
            android:CopyAssets(mediaDirectory, mobileAssetPath)
        else
            out:Append("No assets requested for copying")
        end

        out:Append("Requesting build from Android System. This can take a few minutes. Please wait.")
        Process build = android:GetAPKDebugBuildProcess()
        build:AddListener(android)
        build:Run()

        out:Append("Installing program (if device is found)")
        Process install = android:GetDebugInstallProcess()
        install:AddListener(android)
        install:Run()
        out:Append("Completed Android Process with log at: " + android:GetLogLocation())

        //for the signed version
//        text androidPath = project:GetAndroidPath()
//        text androidKeystorePath = project:GetAndroidKeystorePath()
//        text androidKeystorePassword = project:GetAndroidKeystorePassword()
//        text androidKeyAlias = project:GetAndroidKeyAlias()
//        text androidKeyPassword = project:GetAndroidKeyPassword()
//        text androidAlternateJDK = project:GetAndroidAlternateJDKPath()
    end

    action StartingBuild 
        OutputTab out = outputTabs:GetOutputTab()
        if out = undefined
            return now
        end

        //Don't output a message. It doesn't seem to be helpful.
        //out:Append("Starting Google's translator to Android")
    end

    action BuildingArchitecture(text message) 
        OutputTab out = outputTabs:GetOutputTab()
        if out = undefined
            return now
        end

        out:Append("Compiling architecture: " + message)
    end

    action BuildingPlatform(text message) 
        OutputTab out = outputTabs:GetOutputTab()
        if out = undefined
            return now
        end

        out:Append("    Compiling platform: " + message)
    end

    action BuildingType(text message) 
        OutputTab out = outputTabs:GetOutputTab()
        if out = undefined
            return now
        end

        out:Append("    Build Type: " + message)
    end

    action SettingNativeDevelopmentKit(text message) 
        OutputTab out = outputTabs:GetOutputTab()
        if out = undefined
            return now
        end

        out:Append("    Native Development Kit at: " + message)
    end

    action Linking(text message) 
        OutputTab out = outputTabs:GetOutputTab()
        if out = undefined
            return now
        end

        out:Append("Linking Graphics Engine into Architecture.")
    end

    action BootingSimulator(text message) 
        OutputTab out = outputTabs:GetOutputTab()
        if out = undefined
            return now
        end

        out:Append("Booting Simulator")
    end

    action Error(text message) 
        OutputTab out = outputTabs:GetOutputTab()
        if out = undefined
            return now
        end

        out:Append(message)
    end
    
    action FinishedBuild(boolean success, text message) 
        OutputTab out = outputTabs:GetOutputTab()
        if out = undefined
            return now
        end

        if success
            out:Append("Success: " + message)
        else
            out:Append("Failed: " + message)
        end
    end

    action Debug(BuildInformation info)
        debuggingProgram = undefined
        QuorumProject project = info:project
        Build(info)
        OutputTab out = info:outputTab

        CompilerResult result = info:result
        SymbolTable table = result:symbolTable
        CompilerErrorManager errors = result:compilerErrorManager
        if errors:IsCompilationErrorFree()
            out:Append("Starting Debugger")
        else 
            return now
        end

        CompilerRequest request = info:request
        Compiler compiler = project:GetCompiler()
        File exec = compiler:GetExecutable(request)
        File wd = project:GetLocation()
        debugger:SetExecutable(exec:GetAbsolutePath())
        debugger:SetWorkingDirectory(wd:GetAbsolutePath())

        debugger:EmptyBreakpoints()
        Iterator<Breakpoint> iterator = GetBreakpointIterator()
        repeat while iterator:HasNext()
            Breakpoint bp = iterator:Next()
            ToggleBreakpointInDebugger(bp, table)
        end
        debuggingProgram = info:Copy()
        debuggingProgram:result = result:CopyToBareResult()
        debugger:Start()
        debugger:Continue()
    end

    private action ToggleBreakpointInDebugger(Breakpoint bp, SymbolTable table)
        SymbolTable libraryTable = library:GetSymbolTable()
        Class clazz = libraryTable:GetClassInFile(bp:GetFile():GetAbsolutePath())
        File file = bp:GetFile()

        //Is it in the passed in symbol table?
        if clazz = undefined and table not= undefined
            clazz = table:GetClassInFile(file:GetAbsolutePath())
        end

        //it's not in the standard library, so see if the current
        //file is in a project somewhere. If not, ignore this request.
        if clazz = undefined
            if projectManager = undefined
                return now
            end
            
            Project proj = projectManager:IsProjectSourceFile(file) 
            if proj not= undefined
                CompilerResult result = goodCompilerResults:GetValue(proj:GetLocation():GetAbsolutePath())
                if result not= undefined
                    table = result:symbolTable
                    if table not= undefined
                        clazz = table:GetClassInFile(file:GetAbsolutePath())
                    end
                end
            end           
        end

        if clazz not= undefined
            text key = clazz:GetStaticKey()
            bp:SetDotName(key)
            debugger:Toggle(bp)
        end
    end

    private action FindJava returns text
        //first check if there's a JDK underneath quorum studio. By default this is JDK 11
        File file
        text local = file:GetAbsolutePath() + "/Java/jdk/Contents/Home/bin/" + "/" + "java"
        //You can't reliably know the file extension, so check the existence
        //of the parent folder. 
        File parentFolder
        File javaFile
        javaFile:SetAbsolutePath(local)
        parentFolder:SetAbsolutePath(file:GetAbsolutePath() + "/Java/jdk/Contents/Home/bin/")
        if parentFolder:Exists() //use the local one if you can.
            return javaFile:GetAbsolutePath()
        end

        //If there isn't one, see if they have a leftover JRE from a previous install.
        local = file:GetAbsolutePath() + "/jre/bin" + "/" + "java"
        //You can't reliably know the file extension, so check the existence
        //of the parent folder. 
        javaFile:SetAbsolutePath(local)
        parentFolder:SetAbsolutePath(file:GetAbsolutePath() + "/jre/bin")
        if parentFolder:Exists() //use the local one if you can.
            return javaFile:GetAbsolutePath()
        end

        //We can't find a local JVM, perhaps because the user deleted it. Is it in Java Home?
        Properties properties
        text home = properties:GetProperty("java.home")
        home = home + "/" + "bin" + "/" + "java"

        javaFile:SetAbsolutePath(home)
        parentFolder:SetAbsolutePath(properties:GetProperty("java.home") + "/" + "bin")
        if parentFolder:Exists() //use the local one if you can.
            return javaFile:GetAbsolutePath()
        end
        return undefined
    end

    action Run(BuildInformation info)
        QuorumProject project = info:project
        OutputTab out = info:outputTab
        Build(info)
        
        // We don't want to run the project here if it isn't meant for desktop use.
        if project:IsLegoType() or project:IsAndroidType() or project:IsIphoneType() or project:IsJavascriptType()
            return now
        end

        CompilerResult result = info:result
        CompilerErrorManager errors = result:compilerErrorManager
        if errors:IsCompilationErrorFree()
            out:Append("Running " + project:GetName())
            Process runner
            

            runner:AddListener(me)
            Properties properties
            text os = properties:GetOperatingSystemName()
            text java = FindJava()
            if java = undefined
                out:Append("I could not find Java. Is it installed?")
            end
            text value = project:GetLocation():GetAbsolutePath()
            outputTabsForProcesses:Add(value, out)
            if processes:HasKey(value) //kill it, if you have to
                Process old = processes:RemoveKey(value)
                outputTabsForProcesses:RemoveKey(value)
                old:Cancel()
            end

            //add it into the list of running processes
            processes:Add(value, runner)
            if os:Contains("Mac OS X")
                text run = project:GetLocation():GetAbsolutePath() + "/Run/" + project:GetExecutableName() + ".jar"
                runner:SetDirectory(project:GetLocation())
                Array<text> flags
                flags:Add("-Dsodbeans=1")
                flags:Add("-XstartOnFirstThread")
                flags:Add("-jar")
                flags:Add(run)
                runner:SetName(java)
                runner:SetParameters(flags)
                runner:Run()
            elseif os:Contains("Windows")
                text run = project:GetLocation():GetAbsolutePath() + "/Run/" + project:GetExecutableName() + ".jar"
                runner:SetDirectory(project:GetLocation())
                Array<text> flags
                flags:Add("-Dsodbeans=1")
                flags:Add("-jar")
                flags:Add(run)
                runner:SetName(java)
                runner:SetParameters(flags)
                runner:Run()
            else
                text run = project:GetLocation():GetAbsolutePath() + "/Run/" + project:GetExecutableName() + ".jar"
                runner:SetDirectory(project:GetLocation())
                Array<text> flags
                flags:Add("-Dsodbeans=1")
                flags:Add("-jar")
                flags:Add(run)
                runner:SetName(java)
                runner:SetParameters(flags)
                runner:Run()
            end
        else 
            
        end
    end

    action AddInputToProcess(BuildInformation info, text value)
        QuorumProject project = info:project
        text path = project:GetLocation():GetAbsolutePath()
        if processes:HasKey(path) //kill it, if you have to
            Process process = processes:GetValue(path) //I think we can toss it
            process:SendInput(value)
        end

        if debuggingProgram not= undefined
            debugger:SendInput(value)
        end
    end

    action StopAll
        Iterator<text> iterator = processes:GetKeyIterator()
        repeat while iterator:HasNext()
            text key = iterator:Next()
            Process process = processes:GetValue(key)
            process:Cancel()
        end
        if debuggingProgram not= undefined
            debugger:Stop()
            debuggingProgram = undefined

            DebuggerStopEvent ds
            Run(ds)
        end
        pulseBehavior:SetFinished(true)
    end

    action ProcessStarted(ProcessEvent event)
        QuorumStudio studio = cast(QuorumStudio, gameStateManager:GetGame())
        Toolbar toolbar = studio:GetToolbar()
        Button debugButton = toolbar:GetButton("Run")
        pulseBehavior:SetFinished(false)
        debugButton:AddBehavior(pulseBehavior)
    end

    action ProcessStopped(ProcessEvent event)
        Process process = event:GetProcess()
        File file = process:GetDirectory()
        if processes:HasKey(file:GetAbsolutePath()) //kill it, if you have to
            processes:RemoveKey(file:GetAbsolutePath()) //I think we can toss it
        end

        pulseBehavior:SetFinished(true)
    end

    action Error(ProcessEvent event)
        Process process = event:GetProcess()
        text key = processes:GetKey(process)
        
        OutputTab out = outputTabsForProcesses:GetValue(key)
        if out not= undefined and event not= undefined
            out:Append(event:GetOutput())
        end
    end

    action Output(ProcessEvent event)
        Process process = event:GetProcess()
        text key = processes:GetKey(process)
        OutputTab out = outputTabsForProcesses:GetValue(key)
        if out not= undefined and event not= undefined
            out:Append(event:GetOutput())
        end
    end
end