package Libraries.Development.Environment.Studio.Build
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Language.Compile.Library
use Libraries.Language.Compile.CompilerErrorManager
use Libraries.Language.Compile.CompilerRequest
use Libraries.Language.Compile.Compiler
use Libraries.Language.Compile.CompilerResult
use Libraries.Development.Environment.Studio.Interface.OutputTab
use Libraries.Containers.Iterator
use Libraries.Language.Compile.CompilerError
use Libraries.Concurrency.ProcessRunner
use Libraries.System.Properties
use Libraries.Language.Debug.Debugger
use Libraries.Language.Debug.DebuggerListener
use Libraries.Language.Debug.DebuggerStartEvent
use Libraries.Language.Debug.DebuggerStopEvent
use Libraries.Language.Debug.DebuggerStepEvent
use Libraries.Language.Debug.DebuggerErrorEvent
use Libraries.Language.Debug.BreakpointEvent
use Libraries.Containers.HashTable
use Libraries.Language.Debug.Breakpoint
use Libraries.Containers.List
use Libraries.Language.Debug.BreakpointListener
use Libraries.Language.Compile.Symbol.SymbolTable
use Libraries.Language.Compile.Symbol.Class
use Libraries.Development.Environment.Studio.CodeEditorTabPane
use Libraries.Development.Environment.Studio.Interface.EditorTab
use Libraries.Interface.Controls.TextBox
use Libraries.Language.Debug.VariablesModel
use Libraries.Language.Debug.Variable
use Libraries.Development.Environment.Studio.OutputEditorTabPane
use Libraries.Development.Environment.Studio.Interface.VariablesTab
use Libraries.Interface.Selections.TabPaneSelection
use Libraries.Interface.Controls.Tab
use Libraries.System.DateTime
use Libraries.Development.Environment.Projects.Quorum.ImageSheets
use Libraries.Development.Environment.Projects.Quorum.ImageSheet
use Libraries.Development.Environment.Lego
use Libraries.Language.Compile.Documentation.DocumentationGenerator
use Libraries.Concurrency.ProcessListener
use Libraries.Concurrency.ProcessStartedEvent
use Libraries.Concurrency.ProcessStoppedEvent
use Libraries.Concurrency.ProcessErrorEvent
use Libraries.Concurrency.ProcessOutputEvent
use Libraries.Development.Environment.Studio.Interface.ErrorTab
use Libraries.Development.Environment.Studio.Behaviors.SelectTabBehavior
use Libraries.Development.Environment.Studio.Behaviors.UpdateVariablesBehavior
use Libraries.Development.Environment.Projects.ProjectManager
use Libraries.Concurrency.ThreadRunner
use Libraries.Development.Environment.Studio.Behaviors.BuildLoop
use Libraries.Development.Environment.Studio.Behaviors.UpdateCodeEditorBehavior

class BuildManager is DebuggerListener, ProcessListener
    Library library
    constant text DEFAULT_LIBRARY_PATH = "Library/Standard"
    constant text DEFAULT_LIBRARY_OUTPUT_PATH = "Library/Compiled"
    Debugger debugger
    HashTable<text, BuildInformation> builds
    HashTable<text, HashTable<integer, Breakpoint>> breakpoints
    Array<BreakpointListener> breakpointListeners
    BuildInformation debuggingProgram = undefined
    CodeEditorTabPane editors = undefined
    OutputEditorTabPane outputTabs = undefined
    HashTable<text, ProcessRunner> processes
    ProjectManager projectManager = undefined

    //for the parsing and indexing procedures
    BuildLoop buildLoop
    
    on create
        debugger:Add(me)
    end

    action GetProjectManager returns ProjectManager
        return projectManager
    end

    action SetProjectManager(ProjectManager manager)
        projectManager = manager
    end

    action GetCodeEditorTabPane returns CodeEditorTabPane
        return editors
    end

    action SetCodeEditorTabPane(CodeEditorTabPane pane)
        me:editors = pane
    end

    action GetOutputEditorTabPane returns OutputEditorTabPane
        return outputTabs
    end

    action SetOutputEditorTabPane(OutputEditorTabPane pane)
        me:outputTabs = pane
    end

    action Add(BreakpointListener listener)
        breakpointListeners:Add(listener)
    end

    action Remove(BreakpointListener listener)
        breakpointListeners:Remove(listener)
    end

    action GetBreakpointListeners returns Iterator<BreakpointListener>
        return breakpointListeners:GetIterator()
    end

    action GetBreakpointIterator returns Iterator<Breakpoint>
        Array<Breakpoint> bps
        Iterator<text> iterator = breakpoints:GetKeyIterator()
        repeat while iterator:HasNext()
            text value = iterator:Next()
            HashTable<integer,Breakpoint> lines = breakpoints:GetValue(value)
            Iterator<Breakpoint> points = lines:GetValueIterator()
            repeat while points:HasNext()
                Breakpoint bp = points:Next()
                bps:Add(bp)
            end
        end
        return bps:GetIterator()
    end

    private action FireBreakpointEvent(BreakpointEvent event)
        i = 0
        repeat while i < breakpointListeners:GetSize()
            BreakpointListener listener = breakpointListeners:Get(i)
            listener:ToggledBreakpoint(event)
            i = i + 1
        end
    end

    action StartIndexing
        //parsingAndIndexingThread:Add(buildLoop)
    end

    /*
        This action returns true if the build engine chose to index at this time.
        The engine may reject an index request, normally because the currently 
        open file is not dirty.
    */
    action Index returns boolean
        //first check if the standard library is finished scanning. If not, bail
        if not library:IsScanned()
            return false
        else 
        end
        
        //check to see what the current file open is
        CodeEditorTabPane code = GetCodeEditorTabPane()
        TabPaneSelection selection = code:GetSelection()

        EditorTab tab = cast(EditorTab, selection:GetTab())
        File file = tab:GetFile()
        //get the file the tab is using
        if file = undefined
            return false
        end

        //first check if the tab is dirty. If not, exit and return false
        if not tab:IsParseDirty()
            return false
        end

        //now check to see if it has been long enough since the user stopped typing
        if tab:GetTimeSinceDirty() < 0.5
            return false
        end

        //set this file to not be parse dirty, so that it is not compiled again
        //unless it changes
        tab:SetIsParseDirty(false)
        QuorumProject project = cast(QuorumProject, projectManager:IsProjectSourceFile(file))
        TextBox box = tab:GetTextBox()
        text source = box:GetText()

        //actually do the building
        BuildInformation info
        info:outputTab = outputTabs:GetOutputTab()
        info:project = project
        info:errorTab = outputTabs:GetErrorTab()
        info:recompile = file
        info:recompileValue = source
        info:box = box

        FastBuild(info)
        
        return true
    end

    action StopIndexing
        //parsingAndIndexingThread:ShutDown()
    end

    action ToggleBreakpoint(Breakpoint point)
        File file = point:GetFile()
        integer line = point:GetLine()
        text path = file:GetAbsolutePath()
        BreakpointEvent event
        event:SetBreakpoint(point)
        if breakpoints:HasKey(path)
            HashTable<integer, Breakpoint> lines = breakpoints:GetValue(path)
            if lines:HasKey(line)
                lines:RemoveKey(line)

                if lines:IsEmpty()
                    breakpoints:RemoveKey(path)
                end
                event:SetIsAdded(false)
            else 
                lines:Add(line, point)
                event:SetIsAdded(true)
            end
        else 
            HashTable<integer, Breakpoint> lines
            lines:Add(line, point)
            breakpoints:Add(path, lines)
            event:SetIsAdded(true)
        end

        FireBreakpointEvent(event)
    end

    action ToggleBreakpoint(File file, integer line)
        //path = path + ":" + line
        Breakpoint point
        point:SetLine(line)
        point:SetFile(file)
        ToggleBreakpoint(point)
    end

    /*
        This action returns the most recent information from the build.
        If the system has never been built
    */
    action GetBuildInformation(QuorumProject project) returns BuildInformation
        File loc = project:GetLocation()
        if builds:HasKey(loc:GetAbsolutePath())
            BuildInformation info = builds:GetValue(loc:GetAbsolutePath())
            return info
        end
        return undefined
    end

    action GetDebugger returns Debugger
        return debugger
    end

    action Run(DebuggerStartEvent event)
        output "Start"
    end

    action Run(DebuggerStopEvent event)
        output "Stop"
        debuggingProgram = undefined
    end

    action Run(DebuggerStepEvent event)
        output "Step"
        if debuggingProgram not= undefined
            CompilerResult result = debuggingProgram:result
            SymbolTable table = result:symbolTable
            Class clazz = table:GetClass(event:GetClassName())
            if clazz not= undefined
                File file = clazz:GetFile()
                if file not= undefined and editors not= undefined
                    editors:QueueTabOpen(file, event:GetLine())
                end
            end
            UpdateDebugger()
        end
    end

    action Run(DebuggerErrorEvent event)
        output "Error"
    end

    action Run(BreakpointEvent event)
        VariablesTab variablesTab = outputTabs:GetVariablesTab()
        SelectTabBehavior behavior
        behavior:SetOutputEditorTabPane(outputTabs)
        behavior:SetSelectedTab(variablesTab)
        variablesTab:AddBehavior(behavior)
        UpdateDebugger()
    end

    private action UpdateDebugger
        VariablesTab variablesTab = outputTabs:GetVariablesTab()
        UpdateVariablesBehavior update
        update:SetSelectedTab(variablesTab)
        update:SetOutputEditorTabPane(outputTabs)
        update:SetDebugger(debugger)
        update:SetTreeTable(variablesTab:GetDebuggerTreeTable())
        variablesTab:AddBehavior(update)
    end

    action Scan
        File libraryLocation
        libraryLocation:SetPath(DEFAULT_LIBRARY_PATH)
        library:SetLocation(libraryLocation)
        library:SetCachingLibraryOpcodes(true)


        File outputLocation
        outputLocation:SetPath(DEFAULT_LIBRARY_OUTPUT_PATH)
        library:SetOutputFolder(outputLocation)
        library:Scan()
        Index()
    end

    action FastBuild(BuildInformation info)
        QuorumProject project = info:project
        OutputTab out = info:outputTab
        out:Empty()

        Array<File> sources = project:GetSources()
        Iterator<text> extraSourceIterator = project:GetQuorumDependencies()
        repeat while extraSourceIterator:HasNext()
            text value = extraSourceIterator:Next()
            File file
            File loc = project:GetLocation()
            file:SetWorkingDirectory(loc:GetAbsolutePath())
            file:SetPath(value)
            sources:Add(file)
        end
        
        //get the project type
        CompilerRequest request
        if project:IsBytecodeType()
            request:SetOutputType(request:JAVA_BYTECODE)
        elseif project:IsJavascriptType()
            request:SetOutputType(request:JAVASCRIPT)
        elseif project:IsServertType()
            request:SetWebRequest(true)
            request:SetOutputType(request:JAVA_BYTECODE)
        elseif project:IsLegoType()
            request:SetOutputType(request:JAVA_BYTECODE)
        elseif project:IsAndroidType()
            request:SetOutputType(request:JAVA_BYTECODE)
        elseif project:IsDocumentationType()
            request:SetOutputType(request:DOCUMENT)
        elseif project:IsDocumentationStandardLibraryType()
            request:SetOutputType(request:DOCUMENT)
            GenerateStandardLibraryDocumentation(info)
            return now
        end
        
        File main = project:GetMain()
        request:library = library
        request:files = sources
        request:isFastCompileRequest = true

        //these are the core changes
        request:recompileValue = info:recompileValue
        request:recompile = info:recompile
        
        request:main = main
        Compiler compiler = project:GetCompiler()
        info:request = request


        DateTime time
        number start = time:GetEpochTime()
        CompilerResult result = compiler:Compile(request)
        number finish = time:GetEpochTime()

        text displayedTime = GetFormattedTime(start, finish)
        info:result = result

        TextBox box = info:box
        if box not= undefined
            UpdateCodeEditorBehavior updater
            updater:SetCompilerResult(result)
            updater:SetPath(info:recompile)
            box:AddBehavior(updater)
        end

        //this will need to be changed to update the editor once red lines exist.
        CompilerErrorManager errors = result:compilerErrorManager
        if errors:IsCompilationErrorFree()
            output "No errors"
        else
            output "I found " + errors:GetErrorAmount() + " errors and have listed them in the errors tab."
            Iterator<CompilerError> iterator = errors:GetIterator()
            repeat while iterator:HasNext()
                CompilerError error = iterator:Next()
                output error:GetErrorMessage()
            end
        end
    end

    action Build(BuildInformation info)
        QuorumProject project = info:project
        OutputTab out = info:outputTab
        out:Empty()

        //do image sheet manipulation here
        if project:IsImageSheetsEnabled() and project:IsRecompileImageSheetsOnBuild()
            ImageSheets sheets = project:GetImageSheets()
            Iterator<ImageSheet> iterator = sheets:GetIterator()

            if iterator:HasNext()
                out:Append("Automatically building the following image sheets: ")
            end

            repeat while iterator:HasNext()
                ImageSheet sheet = iterator:Next()
                text next = sheet:GetName()
                out:Append(next)
                sheet:Save(project:GetLocation())
            end
        end
        //do file saving here if necessary
        editors:SaveDirtyTabs()

        Array<File> sources = project:GetSources()
        Iterator<text> extraSourceIterator = project:GetQuorumDependencies()
        repeat while extraSourceIterator:HasNext()
            text value = extraSourceIterator:Next()
            File file
            File loc = project:GetLocation()
            file:SetWorkingDirectory(loc:GetAbsolutePath())
            file:SetPath(value)
            sources:Add(file)
        end
        
        //get the project type
        CompilerRequest request
        if project:IsBytecodeType()
            request:SetOutputType(request:JAVA_BYTECODE)
        elseif project:IsJavascriptType()
            request:SetOutputType(request:JAVASCRIPT)
        elseif project:IsServertType()
            request:SetWebRequest(true)
            request:SetOutputType(request:JAVA_BYTECODE)
        elseif project:IsLegoType()
            request:SetOutputType(request:JAVA_BYTECODE)
        elseif project:IsAndroidType()
            request:SetOutputType(request:JAVA_BYTECODE)
        elseif project:IsDocumentationType()
            request:SetOutputType(request:DOCUMENT)
        elseif project:IsDocumentationStandardLibraryType()
            request:SetOutputType(request:DOCUMENT)
            GenerateStandardLibraryDocumentation(info)
            return now
        end
        
        
        File main = project:GetMain()
        request:library = library
        request:files = sources
        
        request:main = main
        Compiler compiler = project:GetCompiler()
        info:request = request


        DateTime time
        number start = time:GetEpochTime()
        CompilerResult result = compiler:Compile(request)
        number finish = time:GetEpochTime()

        text displayedTime = GetFormattedTime(start, finish)
        info:result = result

        CompilerErrorManager errors = result:compilerErrorManager
        OutputErrors(info, errors, "Build Successful in " + displayedTime + " seconds")
        if project:IsLegoType() and errors:IsCompilationErrorFree()
            SendToLego(info)
        end
    end

    private action OutputErrors(BuildInformation info, CompilerErrorManager errors, text message)
        QuorumProject project = info:project
        OutputTab out = info:outputTab
        ErrorTab errorTab = info:errorTab

        if errors:IsCompilationErrorFree()
            out:Append(message)
            errorTab:Empty()
            errorTab:Resize()
            outputTabs:Select(out)
        else
            errorTab:Empty()
            out:Append("I found " + errors:GetErrorAmount() + " errors and have listed them in the errors tab.")
            Iterator<CompilerError> iterator = errors:GetIterator()
            repeat while iterator:HasNext()
                CompilerError error = iterator:Next()
                errorTab:AddError(error)
            end
            errorTab:Resize()
            outputTabs:Select(errorTab)
        end
    end

    private action GetFormattedTime(number start, number finish) returns text
        number amount = (finish - start) / 1000.0
        text formattedTime = "" + amount
        Array<text> timeArray = formattedTime:Split("\.")
        text left = timeArray:Get(0)
        text right = timeArray:Get(1)
        if right:GetSize() >= 3
            right = right:GetSubtext(0, 2)
        end

        text displayedTime = left + "." + right
        return displayedTime
    end

    private action GenerateStandardLibraryDocumentation(BuildInformation info)
        DocumentationGenerator generator
        QuorumProject project = info:project
        OutputTab out = info:outputTab
        
        Compiler compiler = project:GetCompiler()
        File run = compiler:GetRunFolder()
        generator:SetRunFolder(run)
        

        DateTime date
        number start = date:GetEpochTime()
        generator:Write(library)
        number finish = date:GetEpochTime()

        text displayedTime = GetFormattedTime(start, finish)
        out:Append("Documentation Generated at " + run:GetAbsolutePath() + " in " + displayedTime + " seconds.")
    end

    private action SendToLego(BuildInformation info)
        Lego lego
        QuorumProject project = info:project
        OutputTab out = info:outputTab

        File library
        File plugins
        File loc = project:GetExecutableLocation()
        File parentOfExec = loc:GetParentDirectory()
        library:SetWorkingDirectory(parentOfExec:GetAbsolutePath() + "/" + "QuorumStandardLibrary.jar")
        plugins:SetWorkingDirectory(parentOfExec:GetAbsolutePath() + "/" + "QuorumStandardPlugins.jar")

        lego:Send(library)
        lego:Send(plugins)
        boolean found = lego:Send(loc)
        if found
            out:Append("Successfully output " + project:GetExecutableName() + " to your lego robot.")
        else
            out:Append("I could not connect to a lego device. Is it plugged in?")
        end
    end

    action Clean(BuildInformation info)
        QuorumProject project = info:project
        Compiler compiler = project:GetCompiler()
        File build = compiler:GetBuildFolder()
        File run = compiler:GetRunFolder()
        if build not= undefined and build:Exists() and build:IsDirectory()
            build:Delete(true)
        end

        if run not= undefined and run:Exists() and run:IsDirectory()
            run:Delete(true)
        end
    end

    action CleanAndBuild(BuildInformation info)
        Clean(info)
        Build(info)
    end

    action Debug(BuildInformation info)
        debuggingProgram = undefined
        QuorumProject project = info:project
        Build(info)
        OutputTab out = info:outputTab

        CompilerResult result = info:result
        SymbolTable table = result:symbolTable
        CompilerErrorManager errors = result:compilerErrorManager
        if errors:IsCompilationErrorFree()
            out:Append("Starting Debugger")
        else 
            return now
        end

        CompilerRequest request = info:request
        Compiler compiler = project:GetCompiler()
        File exec = compiler:GetExecutable(request)
        File wd = project:GetLocation()
        debugger:SetExecutable(exec:GetAbsolutePath())
        debugger:SetWorkingDirectory(wd:GetAbsolutePath())

        debugger:EmptyBreakpoints()
        Iterator<Breakpoint> iterator = GetBreakpointIterator()
        repeat while iterator:HasNext()
            Breakpoint bp = iterator:Next()
            //calculate its dot location from the build information
            Class clazz = table:GetClassInFile(bp:GetFile():GetAbsolutePath())
            if clazz not= undefined
                text key = clazz:GetStaticKey()
                bp:SetDotName(key)
                debugger:Add(bp)
            end
        end
        debuggingProgram = info
        debugger:Start()
        debugger:Continue()
    end

    action Run(BuildInformation info)
        QuorumProject project = info:project
        OutputTab out = info:outputTab
        Build(info)
        
        CompilerResult result = info:result
        CompilerErrorManager errors = result:compilerErrorManager
        if errors:IsCompilationErrorFree()
            out:Append("Running " + project:GetName())
            ProcessRunner runner
            runner:SetOutputTab(out)

            runner:AddListener(me)
            Properties properties
            text os = properties:GetOperatingSystemName()
            text java = properties:GetProperty("java.home")
            java = java + "/" + "bin" + "/" + "java"
            
            text value = project:GetLocation():GetAbsolutePath()
            if processes:HasKey(value) //kill it, if you have to
                ProcessRunner old = processes:RemoveKey(value)
                old:Cancel()
            end

            //add it into the list of running processes
            processes:Add(value, runner)
            if os:Contains("Mac OS X")
                text run = project:GetLocation():GetAbsolutePath() + "/Run/" + project:GetExecutableName() + ".jar"
                runner:SetDirectory(project:GetLocation())
                Array<text> flags
                flags:Add("-Dsodbeans=1")
                flags:Add("-XstartOnFirstThread")
                flags:Add("-jar")
                flags:Add(run)
                runner:SetProcessName(java)
                runner:SetParameters(flags)
                runner:Run()
            elseif os:Contains("Windows")
                text run = project:GetLocation():GetAbsolutePath() + "/Run/" + project:GetExecutableName() + ".jar"
                runner:SetDirectory(project:GetLocation())
                Array<text> flags
                flags:Add("-Dsodbeans=1")
                flags:Add("-jar")
                flags:Add(run)
                runner:SetProcessName(java)
                runner:SetParameters(flags)
                runner:Run()
            else
                text run = project:GetLocation():GetAbsolutePath() + "/Run/" + project:GetExecutableName() + ".jar"
                runner:SetDirectory(project:GetLocation())
                Array<text> flags
                flags:Add("-Dsodbeans=1")
                flags:Add("-jar")
                flags:Add(run)
                runner:SetProcessName(java)
                runner:SetParameters(flags)
                runner:Run()
            end
        else 
            
        end
    end

    action AddInputToProcess(BuildInformation info, text value)
        QuorumProject project = info:project
        text path = project:GetLocation():GetAbsolutePath()
        if processes:HasKey(path) //kill it, if you have to
            ProcessRunner process = processes:GetValue(path) //I think we can toss it
            process:SendInput(value)
        end
    end

    action Run(ProcessStartedEvent event)
    end

    action Run(ProcessStoppedEvent event)
        ProcessRunner process = event:GetProcess()
        File file = process:GetDirectory()
        if processes:HasKey(file:GetAbsolutePath()) //kill it, if you have to
            processes:RemoveKey(file:GetAbsolutePath()) //I think we can toss it
        end
    end

    action Run(ProcessErrorEvent event)
        output "Error  " + event:GetName()
    end

    action Run(ProcessOutputEvent event)
        ProcessRunner process = event:GetProcess()
        OutputTab out = process:GetOutputTab()
        out:Append(event:GetOutput())
    end
end