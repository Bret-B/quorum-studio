package Libraries.Development.Environment.Studio.Build
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Language.Compile.Library
use Libraries.Language.Compile.CompilerErrorManager
use Libraries.Language.Compile.CompilerRequest
use Libraries.Language.Compile.Compiler
use Libraries.Language.Compile.CompilerResult
use Libraries.Development.Environment.Studio.Interface.OutputTab
use Libraries.Containers.Iterator
use Libraries.Language.Compile.CompilerError
use Libraries.Concurrency.ProcessRunner
use Libraries.System.Properties
use Libraries.Language.Debug.Debugger
use Libraries.Language.Debug.DebuggerListener
use Libraries.Language.Debug.DebuggerStartEvent
use Libraries.Language.Debug.DebuggerStopEvent
use Libraries.Language.Debug.DebuggerStepEvent
use Libraries.Language.Debug.DebuggerErrorEvent
use Libraries.Language.Debug.BreakpointEvent
use Libraries.Containers.HashTable
use Libraries.Language.Debug.Breakpoint
use Libraries.Containers.List
use Libraries.Language.Debug.BreakpointListener

class BuildManager is DebuggerListener
    Library library
    constant text DEFAULT_LIBRARY_PATH = "Library/Standard"
    constant text DEFAULT_LIBRARY_OUTPUT_PATH = "Library/Compiled"
    Debugger debugger
    HashTable<text, BuildInformation> builds
    HashTable<text, HashTable<integer, Breakpoint>> breakpoints
    Array<BreakpointListener> breakpointListeners

    on create
        debugger:Add(me)
    end

    action Add(BreakpointListener listener)
        breakpointListeners:Add(listener)
    end

    action Remove(BreakpointListener listener)
        breakpointListeners:Remove(listener)
    end

    action GetBreakpointListeners returns Iterator<BreakpointListener>
        return breakpointListeners:GetIterator()
    end

    action GetBreakpointIterator returns Iterator<Breakpoint>
        Array<Breakpoint> bps
        Iterator<text> iterator = breakpoints:GetKeyIterator()
        repeat while iterator:HasNext()
            text value = iterator:Next()
            HashTable<integer,Breakpoint> lines = breakpoints:GetValue(value)
            Iterator<Breakpoint> points = lines:GetValueIterator()
            repeat while points:HasNext()
                Breakpoint bp = points:Next()
                bps:Add(bp)
            end
        end
        return bps:GetIterator()
    end

    private action FireBreakpointEvent(BreakpointEvent event)
        i = 0
        repeat while i < breakpointListeners:GetSize()
            BreakpointListener listener = breakpointListeners:Get(i)
            listener:ToggledBreakpoint(event)
            i = i + 1
        end
    end

    action ToggleBreakpoint(File file, integer line)
        text path = file:GetAbsolutePath()
        //path = path + ":" + line
        Breakpoint point
        point:SetLine(line)
        point:SetFile(file)
        BreakpointEvent event
        event:SetBreakpoint(point)
        if breakpoints:HasKey(path)
            HashTable<integer, Breakpoint> lines = breakpoints:GetValue(path)
            if lines:HasKey(line)
                lines:RemoveKey(line)

                if lines:IsEmpty()
                    breakpoints:RemoveKey(path)
                end
                event:SetIsAdded(false)
            else 
                lines:Add(line, point)
                event:SetIsAdded(true)
            end
        else 
            HashTable<integer, Breakpoint> lines
            lines:Add(line, point)
            breakpoints:Add(path, lines)
            event:SetIsAdded(true)
        end

        FireBreakpointEvent(event)
    end


    /*
        This action returns the most recent information from the build.
        If the system has never been built
    */
    action GetBuildInformation(QuorumProject project) returns BuildInformation
        File loc = project:GetLocation()
        if builds:HasKey(loc:GetAbsolutePath())
            BuildInformation info = builds:GetValue(loc:GetAbsolutePath())
            return info
        end
        return undefined
    end

    action GetDebugger returns Debugger
        return debugger
    end

    action Run(DebuggerStartEvent event)
        output "Debugger Started"
    end

    action Run(DebuggerStopEvent event)
        output "Debugger stopped"
    end

    action Run(DebuggerStepEvent event)
        output "Step"
    end

    action Run(DebuggerErrorEvent event)
        output "Error"
    end

    action Run(BreakpointEvent event)
        output "Breakpoint"
    end

    action Scan
        File libraryLocation
        libraryLocation:SetPath(DEFAULT_LIBRARY_PATH)
        library:SetLocation(libraryLocation)
        library:SetCachingLibraryOpcodes(true)


        File outputLocation
        outputLocation:SetPath(DEFAULT_LIBRARY_OUTPUT_PATH)
        library:SetOutputFolder(outputLocation)
        library:Scan()
    end

    action Build(BuildInformation info)
        QuorumProject project = info:project
        OutputTab out = info:outputTab
        out:Empty()

        //do image sheet manipulation here

        //do file saving here if necessary
        
        //get the project type
        if project:IsBytecodeType()

        else 

        end
        
        Array<File> sources = project:GetSources()
        Iterator<text> extraSourceIterator = project:GetQuorumDependencies()
        repeat while extraSourceIterator:HasNext()
            text value = extraSourceIterator:Next()
            File file
            file:SetPath(value)
            sources:Add(file)
        end
        File main = project:GetMain()
        
        CompilerRequest request
        request:library = library
        request:files = sources
        request:main = main
        Compiler compiler = project:GetCompiler()
        info:request = request
        CompilerResult result = compiler:Compile(request)
        info:result = result

        CompilerErrorManager errors = result:compilerErrorManager
        if errors:IsCompilationErrorFree()
            out:Append("Build Successful")
        else
            Iterator<CompilerError> iterator = errors:GetIterator()
            repeat while iterator:HasNext()
                CompilerError error = iterator:Next()
                text value = error:GetDisplayName()
                out:Append(value)
            end
        end
    end

    action Clean(BuildInformation info)
        QuorumProject project = info:project
        Compiler compiler = project:GetCompiler()
        File build = compiler:GetBuildFolder()
        File run = compiler:GetRunFolder()
        if build not= undefined and build:Exists() and build:IsDirectory()
            build:Delete()
        end

        if run not= undefined and run:Exists() and run:IsDirectory()
            run:Delete()
        end
    end

    action CleanAndBuild(BuildInformation info)
        Clean(info)
        Build(info)
    end

    action Debug(BuildInformation info)
        QuorumProject project = info:project
        Build(info)
        OutputTab out = info:outputTab

        CompilerResult result = info:result
        CompilerErrorManager errors = result:compilerErrorManager
        if errors:IsCompilationErrorFree()
            out:Append("Starting Debugger")
        end

        CompilerRequest request = info:request
        Compiler compiler = project:GetCompiler()
        File exec = compiler:GetExecutable(request)
        File wd = project:GetLocation()
        debugger:SetExecutable(exec:GetAbsolutePath())
        debugger:SetWorkingDirectory(wd:GetAbsolutePath())

        debugger:Start()

        debugger:Continue()
    end

    action Run(BuildInformation info)
        QuorumProject project = info:project
        OutputTab out = info:outputTab
        Build(info)
        
        CompilerResult result = info:result
        CompilerErrorManager errors = result:compilerErrorManager
        if errors:IsCompilationErrorFree()
            out:Append("Running")
            ProcessRunner runner

            Properties properties
            text os = properties:GetOperatingSystemName()
            if os:Contains("Mac OS X")
                text java = properties:GetProperty("java.home")
                java = java + "/" + "bin" + "/" + "java"

                text run = project:GetLocation():GetAbsolutePath() + "/Run/" + project:GetExecutableName() + ".jar"
                runner:SetDirectory(project:GetLocation())
                Array<text> flags
                flags:Add("-Dsodbeans=1")
                flags:Add("-XstartOnFirstThread")
                flags:Add("-jar")
                flags:Add(run)
                runner:Run(java, flags)
            elseif os:Contains("Windows")
                text java = properties:GetProperty("java.home")
                java = java + "/" + "bin" + "/" + "java"

                text run = project:GetLocation():GetAbsolutePath() + "/Run/" + project:GetExecutableName() + ".jar"
                runner:SetDirectory(project:GetLocation())
                Array<text> flags
                flags:Add("-Dsodbeans=1")
                flags:Add("-jar")
                flags:Add(run)
                runner:Run(java, flags)
            else//for now do nothing, because we support Windows only in the first release, technically

            end

        end
    end
end