package Libraries.Development.Environment.Studio.Android
use Libraries.Containers.Array
use Libraries.System.Properties
use Libraries.System.Process
use Libraries.System.File

class RunAndroid 
    text FILE_SEPARATOR = "/"
    text PATH_TO_LIBS = FILE_SEPARATOR + "app" + FILE_SEPARATOR + "libs"
    text ASSEMBLED_APK_FOR_RELEASE = FILE_SEPARATOR + "app" + FILE_SEPARATOR + "build" + FILE_SEPARATOR + "outputs" + FILE_SEPARATOR + "apk" + FILE_SEPARATOR + "release" + FILE_SEPARATOR + "app-release-unsigned.apk"
    
    text keyStorePath = ""
    text keyStorePassword = ""
    text keyAlias = "key0"
    text keyPassword = ""
    text androidSDKPath = ""
    
    text toolPath = FILE_SEPARATOR +  "build-tools" + FILE_SEPARATOR + "27.0.3" + FILE_SEPARATOR
    text zipalignPath = toolPath + "zipalign"
    text zipalignOptions = "-v -p 4"
    text apksignerPath = toolPath + "apksigner"
    text pathToRunFolder = ""
    
    text pathToBuildAndroidFolder = "./TestApplication"
    
    Array<text> librarySources 
    Array<text> libraryDestinations
    text FOLDER_NAME = "Android"
    AndroidSupport support

    action Setup(text pathToRunFolder, text jarName)
        androidSDKPath = support:GetDefaultAndroidSDKPath()
        me:pathToRunFolder = pathToRunFolder
        me:pathToBuildAndroidFolder = pathToRunFolder + FILE_SEPARATOR + FOLDER_NAME

        librarySources:Add(FILE_SEPARATOR + jarName)
        librarySources:Add(FILE_SEPARATOR + "QuorumStandardLibrary.jar")
        librarySources:Add(FILE_SEPARATOR + "QuorumStandardPlugins.jar")

        libraryDestinations:Add(me:pathToBuildAndroidFolder + PATH_TO_LIBS + FILE_SEPARATOR + jarName)
        libraryDestinations:Add(me:pathToBuildAndroidFolder + PATH_TO_LIBS + FILE_SEPARATOR + "QuorumStandardLibrary.jar")
        libraryDestinations:Add(me:pathToBuildAndroidFolder + PATH_TO_LIBS + FILE_SEPARATOR + "QuorumStandardPlugins.jar")

        Properties properties
        if properties:IsWindows()
            zipalignPath = zipalignPath + ".exe"
        end
    end

    action HasKeystoreInfo returns boolean
        if  keyStorePath = undefined or keyStorePath:IsEmpty() or 
            keyStorePassword = undefined or keyStorePassword:IsEmpty() or 
            keyPassword = undefined or keyPassword:IsEmpty() or 
            keyAlias = undefined or keyAlias:IsEmpty()
            return false
        end

        return true
    end

    action GetZipAlignProcess returns Process
        Properties properties
        Process process
        if properties:IsWindows()
            
        elseif properties:IsMac()

        else

        end

        return process
    end

//    public Process GetZipalignProcess() throws IOException, InterruptedException  {
//        if (isWindows()) {
//            String[] list = buildZipalignCommandWindows();
//
//            ProcessBuilder pb = new ProcessBuilder(list);
//            pb.redirectErrorStream(true);
//
//            
//            return pb.start();
//        } else if(isMac()) {
//            //mac JDK's typically remove executable properties after a copy. Restore them.
//            File file = new File(androidSDKPath + zipalignPath);
//            if(file.exists()) {
//                file.setExecutable(true);
//            }
//            ProcessBuilder pb = new ProcessBuilder(buildZipalignCommand());
//            pb.redirectErrorStream(true);
//            
//            return pb.start();
//        } else {
//            ProcessBuilder pb = new ProcessBuilder(buildZipalignCommand());
//            pb.redirectErrorStream(true);
//            
//            return pb.start();
//        }
//    }
end