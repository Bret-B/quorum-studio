package Libraries.Development.Environment.Studio.Android

use Libraries.System.Properties
use Libraries.System.File
use Libraries.Containers.List
use Libraries.Containers.Array
use Libraries.Concurrency.ProcessRunner
use Libraries.Concurrency.ProcessListener
use Libraries.Concurrency.ProcessOutputEvent
use Libraries.Concurrency.ProcessErrorEvent
use Libraries.Concurrency.ProcessStoppedEvent
use Libraries.Concurrency.ProcessStartedEvent

class AndroidSupport is ProcessListener
    text FILE_SEPARATOR = "/"
    constant text PATH_TO_MAIN = FILE_SEPARATOR + "app" + FILE_SEPARATOR + "src" + FILE_SEPARATOR + "main" + FILE_SEPARATOR
    constant text PATH_TO_MAIN_XML = PATH_TO_MAIN + "AndroidManifest.xml"
    constant text PATH_TO_APP_BUILD_GRADLE = FILE_SEPARATOR + "app" + FILE_SEPARATOR  + "build.gradle"
    constant text PATH_TO_LAYOUT = PATH_TO_MAIN + "res" + FILE_SEPARATOR + "layout" + FILE_SEPARATOR
    constant text PATH_TO_LAYOUT_XML = PATH_TO_LAYOUT + "activity_main.xml"
    constant text PATH_TO_PACKAGE = PATH_TO_MAIN + "java" + FILE_SEPARATOR
    constant text PACKAGES_FOLDER = "packagesfolder"
    constant text FOLDER_NAME = "Android"

    text androidSDKPath = ""

    //these come from Run Android
    text PATH_TO_LIBS = FILE_SEPARATOR + "app" + FILE_SEPARATOR + "libs"
    text ASSEMBLED_APK_FOR_RELEASE = FILE_SEPARATOR + "app" + FILE_SEPARATOR + "build" + FILE_SEPARATOR + "outputs" + FILE_SEPARATOR + "apk" + FILE_SEPARATOR + "release" + FILE_SEPARATOR + "app-release-unsigned.apk"
    
    text keyStorePath = ""
    text keyStorePassword = ""
    text keyAlias = "key0"
    text keyPassword = ""
    
    text toolPath = FILE_SEPARATOR +  "build-tools" + FILE_SEPARATOR + "27.0.3" + FILE_SEPARATOR
    text zipalignPath = toolPath + "zipalign"
    text zipalignOptions = "-v -p 4"
    text apksignerPath = toolPath + "apksigner"
    text pathToRunFolder = ""
    
    text pathToBuildAndroidFolder = "./TestApplication"
    
    Array<text> librarySources 
    Array<text> libraryDestinations

    on create
        androidSDKPath = GetDefaultAndroidSDKPath()
    end

    action Run(ProcessStartedEvent event)
        //output "Staring " + event:GetName()
    end

    action Run(ProcessStoppedEvent event)
        //output "Stopping " + event:GetName()
    end

    action Run(ProcessErrorEvent event)
        //output event:GetOutput()
    end

    action Run(ProcessOutputEvent event)
        //output event:GetOutput()
    end

    action Setup(text pathToRunFolder, text jarName)
        androidSDKPath = GetDefaultAndroidSDKPath()
        me:pathToRunFolder = pathToRunFolder
        me:pathToBuildAndroidFolder = pathToRunFolder + FILE_SEPARATOR + FOLDER_NAME

        librarySources:Add(FILE_SEPARATOR + jarName)
        librarySources:Add(FILE_SEPARATOR + "QuorumStandardLibrary.jar")
        librarySources:Add(FILE_SEPARATOR + "QuorumStandardPlugins.jar")

        libraryDestinations:Add(me:pathToBuildAndroidFolder + PATH_TO_LIBS + FILE_SEPARATOR + jarName)
        libraryDestinations:Add(me:pathToBuildAndroidFolder + PATH_TO_LIBS + FILE_SEPARATOR + "QuorumStandardLibrary.jar")
        libraryDestinations:Add(me:pathToBuildAndroidFolder + PATH_TO_LIBS + FILE_SEPARATOR + "QuorumStandardPlugins.jar")

        Properties properties
        if properties:IsWindows()
            zipalignPath = zipalignPath + ".exe"
        end
    end

    action HasKeystoreInfo returns boolean
        if  keyStorePath = undefined or keyStorePath:IsEmpty() or 
            keyStorePassword = undefined or keyStorePassword:IsEmpty() or 
            keyPassword = undefined or keyPassword:IsEmpty() or 
            keyAlias = undefined or keyAlias:IsEmpty()
            return false
        end

        return true
    end

    action CopyAssets(File mediaFolder, text value)
        if not mediaFolder:Exists() or value = undefined
            return now
        end //bail if it isn't there

        File assetsFolder
        text pathtemp = pathToBuildAndroidFolder + FILE_SEPARATOR + "app" + FILE_SEPARATOR + "src" + FILE_SEPARATOR + "main" + FILE_SEPARATOR + "assets" + FILE_SEPARATOR + value
        assetsFolder:SetAbsolutePath(pathtemp)
        if not assetsFolder:Exists()
            assetsFolder:CreateDirectories()
        end

        mediaFolder:Copy(assetsFolder, true)
    end

    action CopyLibraries 
        CopyLibraries(librarySources, libraryDestinations)
    end

    action CopyLibraries(Array<text> sourcePaths, Array<text> destinationPaths)
        File libFolder
        libFolder:SetAbsolutePath(pathToBuildAndroidFolder + PATH_TO_LIBS)

        if not libFolder:Exists()
            libFolder:CreateDirectories()
        end

        i = 0
        repeat while i < sourcePaths:GetSize()
            File from
            File to
            from:SetAbsolutePath(pathToRunFolder + sourcePaths:Get(i))
            to:SetAbsolutePath(destinationPaths:Get(i))
            from:Copy(to)
            i = i + 1
        end
    end

    action GetAPKDebugBuildProcess returns ProcessRunner
        Properties properties
        ProcessRunner process
        File directory
        directory:SetAbsolutePath(pathToBuildAndroidFolder)
        process:SetDirectory(directory)
        if properties:IsWindows()
            Array<text> params = BuildDebugAPKWindows()
            process:SetProcessName("cmd")
            process:SetParameters(params)
        elseif properties:IsMac()
            File file
            file:SetAbsolutePath(pathToBuildAndroidFolder + "/gradlew")
            if file:Exists()
                file:SetExecutable(true)
            end
            process:SetProcessName("./gradlew")
            Array<text> params = BuildDebugAPK()
            process:SetParameters(params)
        else
            process:SetProcessName("./gradlew")
            Array<text> params = BuildDebugAPK()
            process:SetParameters(params)
        end

        return process
    end

    private action BuildDebugAPKWindows returns Array<text>
        text value = ""
        text dq = value:GetDoubleQuote()
        Array<text> params
        params:Add("/C")
        params:Add(dq + dq)
        params:Add(pathToBuildAndroidFolder+"\\gradlew.bat")
        params:Add("-p")  
        params:Add(pathToBuildAndroidFolder)
        params:Add("assembleDebug")
        params:Add("&")
        params:Add("exit")
        return params
    end

    private action BuildDebugAPK returns Array<text>
        text value = ""
        text dq = value:GetDoubleQuote()
        Array<text> params
        params:Add("-p")  
        params:Add(pathToBuildAndroidFolder)
        params:Add("assembleDebug")
        return params
    end

    action GetDebugInstallProcess returns ProcessRunner
        Properties properties
        ProcessRunner process
        File directory
        directory:SetAbsolutePath(pathToBuildAndroidFolder)
        process:SetDirectory(directory)
        if properties:IsWindows()
            process:SetProcessName("cmd")
            Array<text> params = BuildDebugInstallAPKWindows()
            process:SetParameters(params)
        elseif properties:IsMac()
            File file
            file:SetAbsolutePath(pathToBuildAndroidFolder + "/gradlew")
            if file:Exists()
                file:SetExecutable(true)
            end
            process:SetProcessName("./gradlew")
            Array<text> params = BuildDebugInstallAPK()
            process:SetParameters(params)
        else
            process:SetProcessName("./gradlew")
            Array<text> params = BuildDebugInstallAPK()
            process:SetParameters(params)
        end

        return process
    end

    private action BuildDebugInstallAPKWindows returns Array<text>
        text value = ""
        text dq = value:GetDoubleQuote()
        Array<text> params
        params:Add("/C")
        params:Add(dq + dq)
        params:Add(pathToBuildAndroidFolder+"\\gradlew.bat")
        params:Add("-p")  
        params:Add(pathToBuildAndroidFolder)
        params:Add("installDebug")
        params:Add("&")
        params:Add("exit")
        return params
    end

    private action BuildDebugInstallAPK returns Array<text>
        text value = ""
        text dq = value:GetDoubleQuote()
        Array<text> params
        params:Add("-p")  
        params:Add(pathToBuildAndroidFolder)
        params:Add("installDebug")
        return params
    end

    action GetZipAlignProcess returns ProcessRunner
        Properties properties
        ProcessRunner process
        if properties:IsWindows()
            Array<text> params = BuildZipAlignCommandWindows()
            process:SetProcessName(params:Get(0))
            params:RemoveAt(0)
            process:SetParameters(params)
            process:Run()
        elseif properties:IsMac()
            File file
            file:SetAbsolutePath(androidSDKPath + zipalignPath)
            if file:Exists()
                file:SetExecutable(true)
            end
            Array<text> params = BuildZipAlignCommand()
            process:SetParameters(params)
            process:Run()
        else
            Array<text> params = BuildZipAlignCommand()
            process:SetParameters(params)
            process:Run()
        end

        return process
    end

    action BuildZipAlignCommandWindows returns Array<text>
        text value = ""
        text dq = value:GetDoubleQuote()
        Array<text> params
        params:Add("cmd")
        params:Add("/c")
        params:Add(dq + dq)
        params:Add(androidSDKPath + zipalignPath)
        params:Add("-v")
        params:Add("-p")  
        params:Add("4")
        params:Add(pathToBuildAndroidFolder + ASSEMBLED_APK_FOR_RELEASE)
        params:Add(pathToRunFolder + FILE_SEPARATOR + "Assembled.apk")
        params:Add("&")
        params:Add("exit")
        return params
    end

    action BuildZipAlignCommand returns Array<text>
        text value = ""
        text dq = value:GetDoubleQuote()
        Array<text> params
        params:Add(androidSDKPath + zipalignPath)
        params:Add("-v")
        params:Add("-p")  
        params:Add("4")
        params:Add(pathToBuildAndroidFolder + ASSEMBLED_APK_FOR_RELEASE)
        params:Add(pathToRunFolder + FILE_SEPARATOR + "Assembled.apk")
        return params
    end

    action GetAndroidPath returns text
        return androidSDKPath
    end

    action SetAndroidPath(text path)
        androidSDKPath = path
    end

    action GetDefaultAndroidSDKPath returns text
        Properties properties
        text home = properties:GetProperty("user.home")
        
        if properties:IsWindows()
            home = home + FILE_SEPARATOR + "AppData" + FILE_SEPARATOR + "Local" + FILE_SEPARATOR + "Android"+ FILE_SEPARATOR +"sdk"
        else
            home = home + FILE_SEPARATOR + "Library/Android/sdk"
        end
        
        return home
    end

    action CopyAndRename(text templateLocation, text pathToRunFolder, text applicationName, text jdkPath)
        text pathToBuildAndroidFolder = pathToRunFolder + FILE_SEPARATOR + FOLDER_NAME

        // Copy project into new folder with appropriate name
        CopyFolder(templateLocation, pathToBuildAndroidFolder)

        SetSDKLocation(pathToBuildAndroidFolder)
        SetNDKLocation(pathToBuildAndroidFolder)


        if jdkPath not= undefined and not jdkPath:IsEmpty()
            SetJDKLocation(pathToBuildAndroidFolder, jdkPath)
        end
        
        // Change Application Name
        ChangeApplicationName(pathToBuildAndroidFolder, applicationName)
//    
//        // Clean the generated files that might conflict with the renamings
        CleanGeneratedFiles(pathToBuildAndroidFolder)
    end
    
    action ChangeApplicationName(text projectPath, text applicationName)
        text pathToMain = projectPath + PATH_TO_MAIN_XML
        text dq = pathToMain:GetDoubleQuote()

        ReplaceLineTextInFile(pathToMain, "android:label=" + dq + "Android" + dq, "android:label=" + dq + applicationName + dq)
        
        text pathToBuild = projectPath + PATH_TO_APP_BUILD_GRADLE
        ReplaceLineTextInFile(pathToBuild, "api files('libs/Default.jar')", "    api files('libs/"+applicationName+".jar')")
    end

    action CleanGeneratedFiles(text projectPath)
        Properties properties
        ProcessRunner process
        Array<text> parameters
        process:SetParameters(parameters)
        if properties:IsWindows()
            File directory
            directory:SetAbsolutePath(projectPath)
            process:SetDirectory(directory)
            process:SetProcessName("cmd")

            parameters:Add("/C")
            //text dq = ""
            //dq = dq:GetDoubleQuote()
            parameters:Add("./gradlew.bat")
            //parameters:Add("gradlew.bat")
            parameters:Add("-p")
            parameters:Add(projectPath)
            parameters:Add(" clean")
            //parameters:Add(dq + dq + " " + projectPath + "\gradlew.bat -p " + projectPath + " clean")
            process:SetParameters(parameters)
            process:AddListener(me)
            process:Run()
        elseif properties:IsMac()
            File file
            file:SetAbsolutePath(projectPath + "/gradlew")
            if file:Exists()
                file:SetExecutable(true)
            end

            File value = file:GetParentDirectory()
            process:SetDirectory(value)
            process:SetProcessName("./gradlew")
            parameters:Add("-p")
            parameters:Add(projectPath)
            parameters:Add(" clean")
            process:Run()
        else
            File file
            file:SetAbsolutePath(projectPath + "/gradlew")

            process:SetDirectory(file:GetParentDirectory())
            process:SetProcessName("/gradlew")
            parameters:Add("-p")
            parameters:Add(projectPath)
            parameters:Add(" clean")
            process:Run()
        end
    end

    action SetJDKLocation(text pathToBuildAndroidFolder, text jdkPath)
        text pathToLocalProperties = pathToBuildAndroidFolder + FILE_SEPARATOR + "gradle.properties"
        text sdkLocation = jdkPath

        Properties properties
        if properties:IsWindows()
            sdkLocation = ""
            i = 0
            repeat while i < jdkPath:GetSize()
                sdkLocation = sdkLocation + jdkPath:GetCharacter(i)
                if jdkPath:GetCharacter(i) = "\"
                    sdkLocation = sdkLocation + "\\"
                end
                i = i + 1
            end
        end

        AppendLineToFile(pathToLocalProperties, "org.gradle.java.home="+sdkLocation)
    end

    private action CopyFolder(text from, text to)
        File toFile
        File fromFile

        toFile:SetAbsolutePath(to)
        fromFile:SetAbsolutePath(from)

        if toFile:Exists()
            toFile:Delete(true)
        end

        fromFile:Copy(toFile, true)
    end

    action SetSDKLocation(text pathToBuildAndroidFolder)
        text pathToLocalProperties = pathToBuildAndroidFolder + FILE_SEPARATOR + "local.properties"
        text sdkLocation = androidSDKPath

        Properties properties
        if properties:IsWindows()
            sdkLocation = ""
            i = 0
            repeat while i < androidSDKPath:GetSize()
                text character = androidSDKPath:GetCharacter(i)
                if character = "\"
                    sdkLocation = sdkLocation + "\\"
                elseif character = "/"
                    sdkLocation = sdkLocation + "\\"
                else 
                    sdkLocation = sdkLocation + character
                end
                i = i + 1
            end
        end

        ReplaceLineTextInFile(pathToLocalProperties, "sdk.dir=", "sdk.dir="+sdkLocation)
    end

    action SetNDKLocation(text pathToBuildAndroidFolder)
        text pathToLocalProperties = pathToBuildAndroidFolder + FILE_SEPARATOR + "local.properties"
        text ndkLocation = androidSDKPath + FILE_SEPARATOR + "ndk-bundle"
        text final = ""
        Properties properties
        if properties:IsWindows()
            i = 0
            repeat while i < ndkLocation:GetSize()
                text character = ndkLocation:GetCharacter(i)
                if character = "\"
                    final = final + "\\"
                elseif character = "/"
                    final = final + "\\"
                else 
                    final = final + character
                end
                i = i + 1
            end
        else 
            final = ndkLocation
        end

        AppendLineToFile(pathToLocalProperties, "ndk.dir="+final)
    end

    action AppendLineToFile(text path, text line)
        File file
        file:SetAbsolutePath(path)
        text value = file:Read()
        value = value + line + value:GetLineFeed()
        file:Write(value)
    end

    action ReplaceLineTextInFile(text filePath, text toReplace, text newString)
        File file
        file:SetAbsolutePath(filePath)
        text value = file:Read()
        Array<text> lines = value:SplitIntoLines()

        text finalValue = ""
        i = 0
        repeat while i < lines:GetSize()
            text line = lines:Get(i)
            if line:Contains(toReplace)
                lines:Set(i, newString)
            end

            finalValue = finalValue + lines:Get(i) + finalValue:GetLineFeed()
            i = i + 1
        end
        file:Write(finalValue)
    end
end