package Libraries.Development.Environment.Projects
use Libraries.Interface.Controls.TreeItem
use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Development.Environment.Resources
use Libraries.Development.Environment.Studio.Behaviors.OpenTabBehavior
use Libraries.Development.Environment.Studio.CodeEditorTabPane
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Interface.Controls.PopupMenu
use Libraries.Interface.Controls.MenuItem
use Libraries.Development.Environment.Studio.Behaviors.Behaviors
use Libraries.Development.Environment.Studio.Behaviors.OpenNewFileBehavior
use Libraries.Development.Environment.Studio.Behaviors.SetProgramStartBehavior
use Libraries.Development.Environment.Studio.Behaviors.DeleteFileBehavior
use Libraries.Interface.Controls.Icon

class QuorumProjectView is ProjectView
    QuorumProject project = undefined
    Resources resources = undefined
    CodeEditorTabPane pane = undefined
    QuorumStudio studio = undefined
    Behaviors behaviors = undefined

    constant text SOURCE_FOLDER_NAME = "Source Code"
    action SetMainApplication(QuorumStudio studio)
        me:studio = studio
        behaviors = studio:GetBehaviors()
    end

    action GetMainApplication returns QuorumStudio
        return studio
    end

    action GetProject returns Project
        return project
    end

    action SetProject(Project project)
        if project is QuorumProject
            me:project = cast(QuorumProject, project)
        end
    end

    action GetResources returns Resources
        return resources
    end

    action SetResources(Resources resources)
        me:resources = resources
    end

    private action GeneratePopupMenu returns PopupMenu
        PopupMenu menu
        MenuItem build
        build:SetName("Build")
        build:SetBehavior(behaviors:GetThreadedBuildProjectBehavior())
        menu:Add(build)

        MenuItem clean
        clean:SetName("Clean")
        clean:SetBehavior(behaviors:GetThreadedCleanProjectBehavior())
        menu:Add(clean)

        MenuItem cleanAndBuild
        cleanAndBuild:SetName("Clean and Build")
        cleanAndBuild:SetBehavior(behaviors:GetThreadedCleanBuildProjectBehavior())
        menu:Add(cleanAndBuild)

        MenuItem run
        run:SetName("Run")
        run:SetBehavior(behaviors:GetThreadedRunProjectBehavior())
        menu:Add(run)

        MenuItem debug
        debug:SetName("Debug")
        debug:SetBehavior(behaviors:GetThreadedDebugProjectBehavior())
        menu:Add(debug)

        MenuItem close
        close:SetName("Close")
        close:SetBehavior(behaviors:GetCloseProjectBehavior())
        menu:Add(close)

        boolean bootstrap = project:IsCompilerProject()
        if bootstrap
            MenuItem bootstrapItem
            bootstrapItem:SetName("Bootstrap")
            bootstrapItem:SetBehavior(behaviors:GetThreadedBootstrapBehavior())
            menu:Add(bootstrapItem)
        end

        MenuItem properties
        properties:SetName("Properties")
        properties:SetBehavior(behaviors:GetOpenProjectPropertiesBehavior())
        menu:Add(properties)
        return menu
    end

    action GetLogicalTree returns TreeItem
        if project = undefined
            return undefined
        end

        ProjectTreeItem projectItem
        PopupMenu menu = GeneratePopupMenu()
        projectItem:SetPopupMenu(menu)

        Array<ProjectTreeItem> folders

        projectItem:SetProject(project)
        File sources = project:GetSourceLocation()
        //ProjectTreeItem source = GetItem(sources)
        
        File projectFolder = sources:GetParentDirectory()
        Array<File> projectFolders = projectFolder:GetDirectoryListing()
        i = 0
        repeat while i < projectFolders:GetSize()
            File sub = projectFolders:Get(i)
            text name = sub:GetFileName()
            if (sub:IsDirectory() and name not= "Project"
                and name not= "Run"
                and name not= "Build")

                ProjectTreeItem folder = GetItem(sub)
                folders:Add(folder)
            end
            i = i + 1
        end

        //folders:Add(source)
        projectItem:SetFile(projectFolder)
        projectItem:SetName(project:GetName())
        projectItem:SetIcon(resources:GetProjectLogo())
        projectItem:Add(folders)

        return projectItem
    end

    private action GetFileIcon(File file) returns Icon
        if file:IsDirectory()
            return resources:GetFolder()
        elseif not project:IsMainFile(file)
            return resources:GetQuorumFile()
        else //THERE CAN ONLY BE ONE
            return resources:GetMainFile()
        end
    end

    private action GetItem(File source) returns ProjectTreeItem
        ProjectTreeItem value
        Array<File> files = source:GetDirectoryListing()

        FileSorter sorter
        files:Sort(sorter)
        Array<ProjectTreeItem> items
        i = 0
        repeat while i < files:GetSize()
            File file = files:Get(i)

            if file:IsDirectory()
                ProjectTreeItem directory = GetItem(file)
                items:Add(directory)
            else
                ProjectTreeItem item
                item:SetFile(file)
                
                item:SetName(file:GetFileName())
                item:SetProject(project)
                item:SetIcon(GetFileIcon(file))

                if not project:IsMainFile(file)
                    
                else //THERE CAN ONLY BE ONE
                    project:SetMainFileProjectTreeItem(item)
                end
                items:Add(item)
            end
            i = i + 1
        end

        value:SetIcon(GetFileIcon(source))
        if source:IsDirectory()
            value:SetFile(source)
        end

        value:SetName(source:GetFileName())
        value:Add(items)
        
        return value
    end
end