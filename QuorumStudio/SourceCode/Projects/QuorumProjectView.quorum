package Libraries.Development.Environment.Projects
use Libraries.Interface.Controls.TreeItem
use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Development.Environment.Resources
use Libraries.Development.Environment.Studio.Behaviors.OpenTabBehavior
use Libraries.Development.Environment.Studio.CodeEditorTabPane
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Interface.Controls.PopupMenu
use Libraries.Interface.Controls.MenuItem

class QuorumProjectView is ProjectView
    QuorumProject project = undefined
    Resources resources = undefined
    CodeEditorTabPane pane = undefined
    QuorumStudio studio = undefined

    constant text SOURCE_FOLDER_NAME = "Source Code"
    action SetMainApplication(QuorumStudio studio)
        me:studio = studio
    end

    action GetMainApplication returns QuorumStudio
        return studio
    end

    action GetProject returns Project
        return project
    end

    action SetProject(Project project)
        if project is QuorumProject
            me:project = cast(QuorumProject, project)
        end
    end

    action GetResources returns Resources
        return resources
    end

    action SetResources(Resources resources)
        me:resources = resources
    end

    private action GeneratePopupMenu returns PopupMenu
        PopupMenu menu

        MenuItem build
        build:SetName("Build")
        menu:Add(build)

        MenuItem cleanAndBuild
        cleanAndBuild:SetName("Clean and Build")
        menu:Add(cleanAndBuild)

        MenuItem clean
        clean:SetName("Clean")
        menu:Add(clean)

        MenuItem run
        run:SetName("Run")
        menu:Add(run)

        MenuItem debug
        debug:SetName("Debug")
        menu:Add(debug)

        MenuItem document
        document:SetName("Document")
        menu:Add(document)

        MenuItem close
        close:SetName("Close")
        menu:Add(close)

        MenuItem delete
        delete:SetName("Delete")
        menu:Add(delete)

        boolean bootstrap = project:IsCompilerProject()
        if bootstrap
            MenuItem bootstrapItem
            bootstrapItem:SetName("Bootstrap")
            menu:Add(bootstrapItem)
        end

        MenuItem properties
        properties:SetName("Properties")
        menu:Add(properties)
        return menu
    end

    action GetLogicalTree returns TreeItem
        if project = undefined
            output "GetLogicalTree: project = undefined"
            return undefined
        end

        ProjectTreeItem projectItem
        PopupMenu menu = GeneratePopupMenu()
        projectItem:SetPopupMenu(menu)

        Array<ProjectTreeItem> folders

        projectItem:SetProject(project)
        File sources = project:GetSourceLocation()
        ProjectTreeItem source = GetItem(sources)
        folders:Add(source)


        projectItem:SetName(project:GetName())
        projectItem:SetIcon(resources:GetProjectLogo())
        projectItem:Add(folders)

        return projectItem
    end

    private action GetItem(File source) returns ProjectTreeItem
        ProjectTreeItem value
        Array<File> files = source:GetDirectoryListing()
        Array<ProjectTreeItem> items
        i = 0
        repeat while i < files:GetSize()
            File file = files:Get(i)

            if file:IsDirectory()
                ProjectTreeItem directory = GetItem(file)
                items:Add(directory)
            else
                PopupMenu exampleContextMenu
                text dq = ""
                dq = dq:GetDoubleQuote()

                MenuItem quorum1
                quorum1:SetName("Single Compile")
                exampleContextMenu:Add(quorum1)

                MenuItem quorum2
                quorum2:SetName("Context menu for " + dq + source:GetPath() + dq)
                exampleContextMenu:Add(quorum2)

                ProjectTreeItem item
                item:SetFile(file)
                OpenTabBehavior behavior
                behavior:SetMainApplication(studio)
                behavior:SetFile(file)
                item:SetBehavior(behavior)
                item:SetName(file:GetFileName())
                item:SetIcon(resources:GetQuorumFile())
                items:Add(item)

                item:SetPopupMenu(exampleContextMenu)
            end
            i = i + 1
        end

        if source:IsDirectory()
            value:SetIcon(resources:GetFolder())

            PopupMenu exampleContextMenu
            text dq = ""
            dq = dq:GetDoubleQuote()

            MenuItem directory1
            directory1:SetName("Rename Directory")
            exampleContextMenu:Add(directory1)

            MenuItem directory2
            directory2:SetName("Example for " + dq + source:GetPath() + dq)
            exampleContextMenu:Add(directory2)
            value:SetPopupMenu(exampleContextMenu)
        else
            value:SetIcon(resources:GetQuorumFile())
        end

        value:SetName(source:GetFileName())
        value:Add(items)
        
        return value
    end
end