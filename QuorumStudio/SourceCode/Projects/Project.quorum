package Libraries.Development.Environment.Projects
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Data.Formats.JavaScriptObjectNotation

/*
    This class represents a project on the system. It understands project 
    property files, can read and write them, and can store information in 
    memory about a project.
*/
class Project 
    /* This hash table stores all properties in the project as key value pairs. */
    HashTable<text, ProjectProperty> properties

    /*
        This is the location of the project properties file, based upon
        the location of the project.
    */
    public constant text PROPERTIES_LOCATION = "Project/Project.qp"
    public constant text PROJECT_NAME = "ProjectName"
    public constant text DEVELOPMENT_ENVIRONMENT_VERSION = "DevelopmentEnvironmentVersion"
    public constant text DEVELOPMENT_ENVIRONMENT_VERSION_VALUE = "Quorum Studio 1.0 Beta 1"
    constant text MULTIPLE_VALUE_SPLITTER = ";"
    File location = undefined
    File propertiesLocation

    /*
        This action returns the location of the project.
    */
    action GetLocation returns File
        return location
    end

    /*
        This action sets the location of the project
    */
    action SetLocation(File location)
        if location = undefined or location:IsFile()
            alert("The Project file location is a file, not a folder, which is not allowed.")
        end
        me:location = location

        propertiesLocation:SetWorkingDirectory(location:GetAbsolutePath())
        propertiesLocation:SetPath(PROPERTIES_LOCATION)
    end

    /*
        This action returns the location of the project properties file
        based upon the location of the project.
    */
    action GetPropertiesLocation returns File
        return propertiesLocation
    end
    
    action Build
    end

    /* This action adds a property to the system. If a property of this name 
        already exists, it is overriden. */
    action AddProperty(text key, text value) 
        ProjectProperty property
        property:SetKey(key)
        property:Add(value)
        properties:Add(key, property)
    end

    action AddProperty(ProjectProperty property)
        properties:Add(property:GetKey(), property)
    end

    /* This action adds a property to the system. If a property of this name 
        already exists, it is overriden. Undefined or empty arrays cause
        this action to not add the property.
    */
    action AddProperty(text key, Array<text> values) 
        ProjectProperty property
        property:SetKey(key)

        if values not= undefined and not values:IsEmpty()
            i = 0
            repeat while i < values:GetSize()
                property:Add(values:Get(i))
                i = i + 1
            end
        end
        properties:Add(key, property)
    end

    /* This action adds a property to the system. If a property of this name 
        already exists, it is overriden. Undefined or empty arrays cause
        this action to not add the property.
    */
    action SetPropertyValues(text key, Array<text> values) 
        AddProperty(key, values)
    end

    /* This action sets the value of a particular property. */
    action SetPropertyValue(text key, text value) 
        AddProperty(key, value)
    end

    /*
        This action removes all properties from the project.
    */
    action Empty
        properties:Empty()
    end

    /*
        This action returns a copy of a property currently stored in the project.
        Modifying the returned property has no impact on the project. To modify
        the properties in a project, use AddProperty or SetPropertyValue.
    */
    action GetProperty(text key) returns ProjectProperty
        ProjectProperty value = properties:GetValue(key)
        if value not= undefined
            ProjectProperty copy = value:Copy()
            return copy
        end

        return undefined
    end
    
    blueprint action GetProjectView returns ProjectView

    /*
        This action removes a property from the project.
    */
    action RemoveProperty(text key)
        properties:RemoveAllKeys(key)
    end

    /* This action returns whether or not the project has a particular property. */
    action HasProperty(text key) returns boolean
        return properties:HasKey(key)
    end

    /*
        This action returns the number of properties that exist in the project. 
        It has no relation to the size of a project on disk.
    */
    action GetSize returns integer
        return properties:GetSize()
    end

    /*
        This action makes a copy of all properties currently loaded 
        into the project and returns an iterator to them. Modifying these copies
        has no impact on the original project.
    */
    action GetProperties returns Iterator<ProjectProperty>
        Array<ProjectProperty> returned
        Iterator<text> keys = properties:GetKeyIterator()
        repeat while keys:HasNext()
            text key = keys:Next()
            ProjectProperty property = properties:GetValue(key)
            returned:Add(property:Copy())
        end

        return returned:GetIterator()
    end

    /*
        This action makes a copy of all properties currently loaded 
        into the project and returns an iterator to them. Modifying these copies
        has no impact on the original project. Items returned are sorted.
    */
    action GetProperties(boolean sort) returns Iterator<ProjectProperty>
        Array<ProjectProperty> returned
        Iterator<text> keys = properties:GetKeyIterator()
        repeat while keys:HasNext()
            text key = keys:Next()
            ProjectProperty property = properties:GetValue(key)
            returned:Add(property:Copy())
        end
        returned:Sort()
        return returned:GetIterator()
    end
    
    blueprint action Load

    //blueprint action Save

    /* This action loads a properties file from disk, in JavaScript Object Notation (JSON) 
        format, and puts them into the project in memory.
    */
    blueprint action LoadProperties(File file)

    /*
        This action saves the project properties to disk. If a file already 
        exists for this project, the system overrides it.
    */
    blueprint action SaveProperties(File file)

    /*
        This action sets the project to its default properties. By default, a
        project has no properties and thus will be cleared. Implementations of this,
        for example in particular programming languages, should override this 
        action and set the defaults however is appropriate for that system.
    */
    action SetToDefault
        Empty()
        AddProperty(DEVELOPMENT_ENVIRONMENT_VERSION, DEVELOPMENT_ENVIRONMENT_VERSION_VALUE)
    end

    /*
        This action sets a multiple value property. These values have a default
        separator of a semi-colon (;).
    */
    action SetMultipleValueProperty(text key, Array<text> values)
        text totalValues = ""
        if values = undefined
            RemoveProperty(key)
        elseif values:IsEmpty()
            RemoveProperty(key)
        else 
            i = 0
            repeat while i < values:GetSize()
                text dependency = values:Get(i) + MULTIPLE_VALUE_SPLITTER
                totalValues = totalValues + dependency
                i = i + 1
            end
            AddProperty(key, totalValues)
        end
    end

    /* This action is a helper action for returning the type of project
        loaded onto the system. Implementations should return a human
        readable name for the project type being loaded.  For example, the name 
        might be "Quorum" or "Java."
    */
    blueprint action GetProjectType returns text

    /*
        This action gets the name of the project itself.
    */
    action GetName returns text
        ProjectProperty property = GetProperty(PROJECT_NAME)
        text value = property:GetFirstValue()
        return value
    end

    /*
        This action sets the name of the project itself.
    */
    action SetName(text value)
        SetPropertyValue(PROJECT_NAME, value)
    end
end