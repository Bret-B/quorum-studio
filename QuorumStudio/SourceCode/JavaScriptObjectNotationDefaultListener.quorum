package Libraries.Data.Formats
use Libraries.Containers.Stack
use Libraries.Containers.Array

class JavaScriptObjectNotationDefaultListener is JavaScriptObjectNotationListener
    JavaScriptObjectNotationObject object = undefined
    Stack<JavaScriptObjectNotationObject> objects
    Stack<integer> opStack
    constant integer inObject = 0
    constant integer inArray = 1
    constant integer inPair = 2
    constant integer inValue = 3

    action GetObject returns JavaScriptObjectNotationObject
        return object
    end

    action EnterStart
    end

    action ExitStart
    end

    action EnterObject
        JavaScriptObjectNotationObject newObject
        newObject:SetObject()
        //this is the root, which is a special object
        if object = undefined
            object = newObject
            
        //this is a new object being pushed on. This object is the 
        //value of another JSON element, so make the "parent" the object
        else 
            JavaScriptObjectNotationObject value = objects:Peek()
            //value:SetObject()
            value:Add(newObject)
        end

        objects:Push(newObject)
        opStack:Push(inObject)
    end

    action ExitObject
        objects:Pop()
        opStack:Pop()
    end

    action EnterArray
        opStack:Push(inArray)
    end

    action ExitArray
        opStack:Pop()
    end

    action EnterPair
        JavaScriptObjectNotationObject newObject
        JavaScriptObjectNotationObject peek = objects:Peek()
        opStack:Push(inPair)
        objects:Push(newObject)
        peek:Add(newObject)
    end

    action ExitPair
        opStack:Pop()
        objects:Pop()
    end

    action EnterValue
        opStack:Push(inValue)
    end

    action ExitValue
        opStack:Pop()
    end

    action VisitString(JavaScriptObjectNotationTerminal terminal)
        integer op = opStack:Peek()
        JavaScriptObjectNotationObject obj = objects:Peek()
        JavaScriptObjectNotationToken token = terminal:GetToken()
        if op = inPair
            obj:SetKey(token:value)
        elseif op = inValue
            //check if there is a token behind the peek 
            //and further check if this is an array
            integer peek = opStack:Pop()
            integer peekBehind = opStack:Peek()
            opStack:Push(peek)
            if peekBehind = inArray
                JavaScriptObjectNotationObject newObject
                newObject:SetText(token:value)
                obj:Add(newObject)
                obj:SetArray()
            else
                obj:SetText(token:value)
            end
        elseif op = inArray
            
        end
    end

    action VisitNumber(JavaScriptObjectNotationTerminal terminal)
        integer op = opStack:Peek()
        JavaScriptObjectNotationObject obj = objects:Peek()
        JavaScriptObjectNotationToken token = terminal:GetToken()
        if op = inPair
            obj:SetKey(token:value)
        elseif op = inValue
            number val = cast(number, token:value)
            obj:SetNumber(val)
        end
    end

    action VisitTrue(JavaScriptObjectNotationTerminal terminal)
        integer op = opStack:Peek()
        JavaScriptObjectNotationObject obj = objects:Peek()
        JavaScriptObjectNotationToken token = terminal:GetToken()
        if op = inPair
            obj:SetKey(token:value)
        elseif op = inValue
            obj:SetBoolean(true)
        end
    end

    action VisitFalse(JavaScriptObjectNotationTerminal terminal)
        integer op = opStack:Peek()
        JavaScriptObjectNotationObject obj = objects:Peek()
        JavaScriptObjectNotationToken token = terminal:GetToken()
        if op = inPair
            obj:SetKey(token:value)
        elseif op = inValue
            obj:SetBoolean(false)
        end
    end

    action VisitNull(JavaScriptObjectNotationTerminal terminal)
        integer op = opStack:Peek()
        JavaScriptObjectNotationObject obj = objects:Peek()
        JavaScriptObjectNotationToken token = terminal:GetToken()
        if op = inPair
            obj:SetKey(token:value)
        elseif op = inValue
            obj:SetNull()
        end
    end

    action VisitError(JavaScriptObjectNotationError error)
    end
end