package Libraries.Development.Environment.Studio.Behaviors

use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Network.NetworkConnection
use Libraries.Network.NetworkRequest
use Libraries.Network.NetworkResponseEvent
use Libraries.Network.NetworkRequestListener
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Development.Environment.Projects.ProjectManager
use Libraries.Development.Environment.Studio.Interface.CheckForUpdatesDialog
use Libraries.Development.Environment.Configuration.Options
use Libraries.Game.GameStateManager
use Libraries.Game.Game
use Libraries.Development.Environment.Projects.Credentials
use Libraries.Concurrency.ThreadRunner
use Libraries.System.Properties
use Libraries.System.File
use Libraries.Development.Environment.Studio.OutputEditorTabPane

class CheckForUpdatesBehavior is QuorumStudioBehavior, NetworkRequestListener
    QuorumStudio studio = undefined
    ProjectManager manager = undefined
    Options options = undefined
    constant text RELEASE_VERSION = "https://quorumlanguage.com/studio/version.json"
    constant text BETA_VERSION = "https://quorumlanguage.com/studio/beta.json"

    action SetMainApplication(QuorumStudio studio)
        me:studio = studio
        manager = studio:GetProjectManager()
        options = studio:GetOptions()
    end

    action GetMainApplication returns QuorumStudio
        return studio
    end

    action Run(BehaviorEvent event)
        NetworkRequest request
        request:SetRequestTypeToGet()

        if options = undefined
            GameStateManager gsm
            studio = cast(QuorumStudio, gsm:GetGame())
            options = studio:GetOptions()
        end
        boolean beta = options:GetSpecialBetaBuild()
        //if this is a special beta build, then we want to look for the internal version 
        //on the server to grab only the internal beta build.
        if not beta
            request:SetWebAddress(RELEASE_VERSION)
        else 
            request:SetWebAddress(BETA_VERSION)
        end
        NetworkConnection http
        http:AddListener(me)

        check
            http:SendRequest(request)
        detect e
            CheckForUpdatesDialog dialog
            dialog:SetNewVersion(-10)
            dialog:Initialize()
            dialog:Show()
        end
    end

    action ResponseReceived(NetworkResponseEvent response)
        text value = response:GetResponseText()
        number newVersion = -1
        text windows = undefined
        text mac = undefined
        text updateFile = undefined
        if value not= undefined
            JavaScriptObjectNotation notation
            notation:Read(value)
            text formatted = notation:ToText()
        
            check
                newVersion = cast(number, notation:GetValue("Version"))
                windows = notation:GetValue("Windows")
                mac = notation:GetValue("Mac")
            detect e //ignore this
                return now //this file is corrupt, so you know, don't update to that.
            end
        end

        //The new version of quorum studio requires flags specifying which version 
        //we are getting from the system. 
        if windows = undefined or mac = undefined
            return now
        end

        //we need some place safe to store the file.
        File propertiesLocation = options:GetPropertiesLocation()
        if propertiesLocation = undefined or not propertiesLocation:Exists()
            return now
        end

        File downloadLocation
        downloadLocation:SetWorkingDirectory(propertiesLocation:GetAbsolutePath())

        //figure out what OS I'm on and then use that version for the update request
        Properties properties
        if properties:IsWindows()
            updateFile = windows
        elseif properties:IsMac()
            updateFile = mac
        end

        text name = options:GetAutoUpdateName()
        //something else is wrong and this system isn't supported for auto-update
        if name = undefined
            return now
        end

        downloadLocation:SetPath(name)
        //only mac and windows are supported for the auto-update system.
        if updateFile = undefined
            return now
        end

        number version = studio:VERSION
        //if it's a new version, see if they're logged in. If they 
        //have a username and password, see if it is a valid user. 
        //if it is a valid user, download the file and install it.
        //if it is not a valid user, pop-up the username and password box
        if newVersion > version
            Credentials credentials = options:GetPassword(options:QUORUM_WEBSITE_PASSWORD_KEY)
            if credentials = undefined 
                or credentials:GetUsername() = undefined
                or credentials:GetPassword() = undefined
                or credentials:GetUsername():IsEmpty()
                or credentials:GetPassword():IsEmpty()
                //the user has no login credentials, so tell them to fix that
                Behaviors behaviors = studio:GetBehaviors()
                OpenQuorumStudioPropertiesBehavior behave = behaviors:GetOpenQuorumStudioPropertiesBehavior()
                behave:Run(undefined)
            else//let's try to login 
                text user = credentials:GetUsername()
                text password = credentials:GetPassword()

                Behaviors behaviors = studio:GetBehaviors()
                ThreadRunner thread = behaviors:GetNetworkThreadRunner()
                QuorumLoginBehavior qlb
                FileDownloadBehavior flb
                flb:SetFileDownloadToRequest(updateFile)
                flb:SetDownloadLocation(downloadLocation)
                RunProcessBehavior runBehave
                runBehave:SetFile(downloadLocation)
                flb:SetPostDownloadBehavior(runBehave)

                qlb:SetSuccessfulLoginBehavior(flb)
                ThreadedBehavior behave

                behave:SetNestedBehavior(qlb)
                behave:SetThreadRunner(thread)
                thread:Add(behave)

                AdjustCheckForUpdatesBehavior adjust
                adjust:SetVersion(newVersion)
                OutputEditorTabPane pane = studio:GetOutputPane()
                pane:AddBehavior(adjust)

                flb:SetDialog(adjust:GetDialog())
            end
        else //there is no new version. Just post the dialog
             //saying that we are up to date.
            CheckForUpdatesDialog dialog
            dialog:SetNewVersion(version)
            dialog:Initialize()
            dialog:Show()
        end
    end
end