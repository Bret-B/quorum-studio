package Libraries.Development.Environment.Studio.Behaviors

use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Network.NetworkConnection
use Libraries.Network.NetworkRequest
use Libraries.Network.NetworkResponseEvent
use Libraries.Network.NetworkRequestListener
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Development.Environment.Projects.ProjectManager
use Libraries.Development.Environment.Studio.Interface.CheckForUpdatesDialog
use Libraries.Development.Environment.Configuration.Options
use Libraries.Game.GameStateManager
use Libraries.Game.Game
use Libraries.Development.Environment.Projects.Credentials

class CheckForUpdatesBehavior is QuorumStudioBehavior, NetworkRequestListener
    QuorumStudio studio = undefined
    ProjectManager manager = undefined
    Options options = undefined
    constant text RELEASE_VERSION = "https://quorumlanguage.com/studio/version.json"
    constant text BETA_VERSION = "https://quorumlanguage.com/studio/beta.json"

    action SetMainApplication(QuorumStudio studio)
        me:studio = studio
        manager = studio:GetProjectManager()
        options = studio:GetOptions()
    end

    action GetMainApplication returns QuorumStudio
        return studio
    end

    action Run(BehaviorEvent event)
        NetworkRequest request
        request:SetRequestTypeToGet()

        if options = undefined
            GameStateManager gsm
            studio = cast(QuorumStudio, gsm:GetGame())
            options = studio:GetOptions()
        end
        boolean beta = options:GetSpecialBetaBuild()
        //if this is a special beta build, then we want to look for the internal version 
        //on the server to grab only the internal beta build.
        if not beta
            request:SetWebAddress(RELEASE_VERSION)
        else 
            request:SetWebAddress(BETA_VERSION)
        end
        NetworkConnection http
        http:AddListener(me)

        check
            http:SendRequest(request)
        detect e
            CheckForUpdatesDialog dialog
            dialog:SetNewVersion(-10)
            dialog:Initialize()
            dialog:Show()
        end
    end

    action ResponseReceived(NetworkResponseEvent response)
        text value = response:GetResponseText()
        number newVersion = -1
        if value not= undefined
            JavaScriptObjectNotation notation
            notation:Read(value)
            text formatted = notation:ToText()
        
            check
                newVersion = cast(number, notation:GetValue("Version"))
            detect e //ignore this
            end
        end

        number version = studio:VERSION
        //if it's a new version, see if they're logged in. If they 
        //have a username and password, see if it is a valid user. 
        //if it is a valid user, download the file and install it.
        //if it is not a valid user, pop-up the username and password box
        if newVersion > version
            Credentials credentials = options:GetPassword(options:QUORUM_WEBSITE_PASSWORD_KEY)
            if credentials = undefined 
                or credentials:GetUsername() = undefined
                or credentials:GetPassword() = undefined
                or credentials:GetUsername():IsEmpty()
                or credentials:GetPassword():IsEmpty()
                //the user has no login credentials, so tell them to fix that
                Behaviors behaviors = studio:GetBehaviors()
                OpenQuorumStudioPropertiesBehavior behave = behaviors:GetOpenQuorumStudioPropertiesBehavior()
                behave:Run(undefined)
            else//let's try to login 
                text user = credentials:GetUsername()
                text password = credentials:GetPassword()

                output user
                output password
            end
        else //there is no new version. Just post the dialog
             //saying that we are up to date.
            CheckForUpdatesDialog dialog
            dialog:SetNewVersion(version)
            dialog:Initialize()
            dialog:Show()
        end
    end
end