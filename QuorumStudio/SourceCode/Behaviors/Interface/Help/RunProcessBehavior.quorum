package Libraries.Development.Environment.Studio.Behaviors

use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Development.Environment.Configuration.Options
use Libraries.System.File
use Libraries.Concurrency.ProcessRunner
use Libraries.Concurrency.ProcessListener
use Libraries.Concurrency.ProcessStartedEvent
use Libraries.Concurrency.ProcessStoppedEvent
use Libraries.Concurrency.ProcessErrorEvent
use Libraries.Concurrency.ProcessOutputEvent
use Libraries.System.Properties
use Libraries.Containers.Array
use Libraries.Game.GameStateManager
use Libraries.Development.Environment.Resources

class RunProcessBehavior is QuorumStudioBehavior, ProcessListener
    QuorumStudio studio = undefined
    Options options = undefined
    File file = undefined

    action SetMainApplication(QuorumStudio studio)
        me:studio = studio
        options = studio:GetOptions()
    end

    action GetMainApplication returns QuorumStudio
        return studio
    end

    action Run(BehaviorEvent event)
        if GetFile() = undefined
            return now
        end
        File folder = file:GetParentDirectory()
        
        Properties properties
        //On Windows, we have tto run in elevated mode.
        //Run the bundled .bat file to do this
        if properties:IsWindows()
            ProcessRunner runner
            runner:AddListener(me)
            runner:SetDirectory(folder)

            GameStateManager manager
            me:studio = cast(QuorumStudio, manager:GetGame())
            Resources resources = studio:GetResources()
            File uac = resources:GetUserAccountControlBatch()

            //copy the UAC file to the same directory
            File newUAC
            newUAC:SetWorkingDirectory(folder:GetAbsolutePath())
            newUAC:SetPath(uac:GetFileName())
            uac:Copy(newUAC)

            Array<text> parameters = runner:GetParameters()
            parameters:Add(file:GetFileName())

            runner:SetProcessName(newUAC:GetAbsolutePath())
            runner:Run()
        else 
            ProcessRunner runner
            runner:AddListener(me)
            runner:SetDirectory(folder)
            Array<text> parameters = runner:GetParameters()
            parameters:Add(file:GetFileName())

            runner:SetProcessName("open")
            runner:Run()
        end
    end

    action GetFile returns File
        return file
    end

    action SetFile(File file)
        me:file = file
    end

    action Run(ProcessStartedEvent event)
    end

    action Run(ProcessStoppedEvent event)
    end

    action Run(ProcessErrorEvent event)
        output "Error: " + event:GetOutput()
    end

    action Run(ProcessOutputEvent event)
    end
end