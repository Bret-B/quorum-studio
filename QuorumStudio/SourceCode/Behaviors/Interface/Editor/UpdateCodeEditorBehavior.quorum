package Libraries.Development.Environment.Studio.Behaviors
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Interface.Item
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Interface.Controls.TextBox
use Libraries.Language.Compile.CompilerResult
use Libraries.System.File
use Libraries.Language.Compile.Lexer
use Libraries.Language.Compile.Token
use Libraries.Interface.Controls.TextStyles.TextStyle
use Libraries.Game.Graphics.Color
use Libraries.Language.Compile.CompilerErrorManager
use Libraries.Interface.Controls.TextStyles.TextUnderline
use Libraries.Containers.Iterator
use Libraries.Language.Compile.CompilerError
use Libraries.Interface.Controls.TextStyles.ColoredHighlight
use Libraries.Development.Environment.Studio.Build.BuildManager
use Libraries.Language.Debug.Breakpoint
use Libraries.Containers.Array
use Libraries.Language.Compile.Symbol.SymbolTable
use Libraries.Language.Compile.Symbol.Class
use Libraries.Development.Environment.Studio.Build.BuildInformation
use Libraries.Development.Environment.Studio.Interface.CodeTextBox
use Libraries.Language.Compile.Library
use Libraries.Language.Compile.Hints.Hint
use Libraries.Language.Compile.Translate.ClassOpcode
use Libraries.Language.Compile.Symbol.Variable
use Libraries.Language.Compile.Location
use Libraries.System.DateTime
use Libraries.Language.Compile.Hints.UseHint
use Libraries.Development.Versioning.DiffResult
use Libraries.Development.Environment.Studio.Interface.StatusLineGutter

class UpdateCodeEditorBehavior is QuorumStudioBehavior
    //CompilerResult compilerResult = undefined
    File path
    Color blue
    Color green
    Color darkGreen
    Color orange
    Color grey
    Color purple
    Color caretColor
    Color breakpointColor
    BuildManager manager = undefined
    //BuildInformation info = undefined
    text projectKey = ""
    text helpPathComparison = undefined
    CodeTextBox box = undefined
    DiffResult diffResult = undefined

    /*
        
    */
    on create
        blue = blue:Blue()
        orange:SetColor(206.0/255, 123.0/255, 0, 1.0)
        green:SetColor(0/255, 255.0/255, 0/255, 1.0)
        darkGreen:SetColor(0/255, 153.0/255, 0/255, 1.0)
        grey:SetColor(152.0/255, 152.0/255, 152.0/255, 1.0)
        caretColor:SetColor(233.0/255.0, 239.0/255.0, 248.0/255.0, 1.0)
        breakpointColor:SetColor(252.0/255.0, 157.0/255.0, 159.0/255.0, 1.0)
        purple = blue:Purple()
    end

    action GetBuildManager returns BuildManager
        return manager
    end

    action SetBuildManager(BuildManager manager)
        me:manager = manager
    end

    action GetHintPathComparison returns text
        return helpPathComparison
    end

    action SetHintPathComparison(text value)
        me:helpPathComparison = value
    end

    action GetPath returns File
        return path
    end

    action SetPath(File path)
        me:path = path
    end

    action Run(CodeTextBox box)
        //DateTime time
        //number startTime = time:GetEpochTime()
        File file = box:GetFile()
        boolean isStandardLibrary = false
        Library library = manager:GetLibrary()
        CompilerResult compilerResult = manager:GetRecentCompilerResult(projectKey)
        Lexer lexer = compilerResult:lexers:GetValue(path:GetAbsolutePath())
        StatusLineGutter statusGutter = box:GetStatusGutter()
        statusGutter:SetDiffResult(diffResult)

        if lexer = undefined
            return now
        end

        if box = undefined
            return now
        end
        //reset the lexer and go forward
        Array<Token> mainFileTokens
        mainFileTokens:SetMaxSize(500)
        lexer:Reset()
        box:EmptyTextStyles()
        Token token = lexer:NextToken()
        mainFileTokens:Add(token)
        i = 0
        repeat while token not= undefined
            if token:GetTokenCategory() not= -1
                if IsKeyword(token, lexer)
                    TextStyle style = GetTextStyle(token)
                    style:SetColor(blue)
                    box:AddTextStyle("Lexer" + i, style)
                elseif IsStructure(token, lexer)
                    TextStyle style = GetTextStyle(token)
                    style:SetColor(purple)
                    box:AddTextStyle("Lexer" + i, style)
                elseif IsText(token, lexer)
                    TextStyle style = GetTextStyle(token)
                    style:SetColor(orange)
                    box:AddTextStyle("Lexer" + i, style)
                elseif IsComment(token, lexer)
                    TextStyle style = GetTextStyle(token)
                    style:SetColor(grey)
                    box:AddTextStyle("Lexer" + i, style)
                end
                token = lexer:NextToken()
                mainFileTokens:Add(token)
            else
                token = undefined
            end
            
            i = i + 1
        end
        Class clazzInFile = compilerResult:symbolTable:GetClassInFile(path:GetAbsolutePath())
        if clazzInFile not= undefined
            Iterator<Variable> variables = clazzInFile:GetVariables()
            repeat while variables not= undefined and variables:HasNext()
                Variable var = variables:Next()
                
                Iterator<Location> uses = var:GetUseLocationIterator(var:GetFile())
                repeat while uses not= undefined and uses:HasNext()
                    Location location = uses:Next()
                    if location:GetFile():GetAbsolutePath() = path:GetAbsolutePath()
                        integer start = location:GetIndex()
                        integer finish = location:GetIndexEnd()

                        TextStyle style
                        style:SetIndex(start)
                        style:SetSize(finish - start + 1)
                        style:SetColor(darkGreen)
                        box:AddTextStyle("Semantics" + i, style)
                        i = i + 1
                    end
                end

                integer start = var:GetIndex()
                integer finish = var:GetIndexEnd()

                TextStyle style
                style:SetIndex(start)
                style:SetSize(finish - start + 1)
                style:SetColor(darkGreen)
                box:AddTextStyle("SemanticsName", style)
            end
        end
        
        if not isStandardLibrary
            CompilerErrorManager errors = compilerResult:compilerErrorManager
            box:SetCompilerErrorManager(errors)
            if errors = undefined
                return now
            end

            text pathToCompare = file:GetAbsolutePath()
            if helpPathComparison not= undefined
                pathToCompare = helpPathComparison
            end

            if not errors:IsCompilationErrorFree()
                i = 0
                Iterator<CompilerError> iterator = errors:GetIterator()
                repeat while iterator:HasNext()
                    CompilerError error = iterator:Next()

                    //first check if this is a multi-line error. 
                    //If it is, highlight the entire line, but no more.
                    if error:GetAbsolutePath() = pathToCompare
                        integer line = error:GetLineNumber()
                        integer lineEnd = error:GetLineNumberEnd()

                        integer index = error:GetIndex()
                        integer indexEnd = error:GetIndexEnd()

                        //change the index to just be the end of the line
                        if line not= lineEnd
                            text value = box:GetLine(line - 1)
                            indexEnd = index + value:GetSize()
                        end
                        TextStyle style
                        TextUnderline underline
                        underline:SetErrorFlag(true)
                        style:SetHighlight(underline)
                        style:SetIndex(index)
                        if indexEnd - index + 1 > 0
                            style:SetSize(indexEnd - index + 1)
                        else
                            style:SetSize(1)
                        end
                        box:AddTextStyle("Errors" + i, style)
                    end
                    i = i + 1
                end
            end

            if errors:HasHints()
                Iterator<Hint> hinterator = errors:GetHintIterator()
                i = 0
                repeat while hinterator:HasNext()
                    Hint hint = hinterator:Next()
                    
                    text value = hint:GetAbsolutePath()
                    //Only put in the green line if it's a use statement hint
                    if file not= undefined and value = pathToCompare and hint is UseHint
                        integer index = hint:GetIndex()
                        integer indexEnd = hint:GetIndexEnd()
                        TextStyle style
                        TextUnderline underline
                        underline:SetColor(green)
                        style:SetHighlight(underline)
                        style:SetIndex(index)
                        if indexEnd - index + 1 > 0
                            style:SetSize(indexEnd - index + 1)
                        else
                            style:SetSize(1)
                        end
                        box:AddTextStyle("Hints" + i, style)
                    end
                    i = i + 1
                end
            end
        end

        //now set the cursor line
        integer caret = box:GetCaretPosition()
        ColoredHighlight caretHighlight
        caretHighlight:SetColor(caretColor)
        caretHighlight:SetLineHighlight(true)
        TextStyle caretStyle
        caretStyle:SetIndex(caret)
        caretStyle:SetHighlight(caretHighlight)
        box:AddTextStyle("Caret", caretStyle)

        //add breakpoints
        Iterator<Breakpoint> breakpoints = manager:GetBreakpointIterator(path:GetAbsolutePath())
        repeat while breakpoints:HasNext()
            Breakpoint bp = breakpoints:Next()
            integer line = bp:GetLine()
            ColoredHighlight breakpointHighlight
            breakpointHighlight:SetColor(breakpointColor)
            breakpointHighlight:SetLineHighlight(true)
            TextStyle breakpointStyle
            breakpointStyle:SetIndex(box:GetIndexOfLine(line))
            breakpointStyle:SetHighlight(breakpointHighlight)
            box:AddTextStyle("Breakpoint" + bp:GetLine(), breakpointStyle)
        end

        //add the debugger line


        File f = path
        
        SymbolTable table = undefined
        if isStandardLibrary
            table = library:GetSymbolTable()
        else
            table = compilerResult:symbolTable
        end

        if table not= undefined
            Class clazz = table:GetClassInFile(f:GetAbsolutePath())

            if clazz = undefined
                ClassOpcode op = library:GetOpcode(f:GetAbsolutePath()) 
                if op not= undefined
                    clazz = op:GetClass()
                end
            end

            if clazz not= undefined
                box:SetClass(clazz)
                box:SetStaticKey(clazz:GetStaticKey())
                box:SetLexer(mainFileTokens)
            end
        end

        box:RestoreFindReplaceStyles()
        //number finishTime = time:GetEpochTime()
        //output (finishTime - startTime)
    end

    action Run(BehaviorEvent event)
        box = cast(CodeTextBox, event:GetItem())
    end

    private action GetTextStyle(Token token) returns TextStyle
        TextStyle style
        style:SetIndex(token:GetStartIndex())
        style:SetSize(token:GetStopIndex() - token:GetStartIndex() + 1)
        return style
    end

    private action IsStructure(Token token, Lexer lexer) returns boolean
        if  token:GetTokenCategory() = lexer:OUTPUT 
            or token:GetTokenCategory() = lexer:ON
            or token:GetTokenCategory() = lexer:CREATE
            or token:GetTokenCategory() = lexer:BLUEPRINT
            or token:GetTokenCategory() = lexer:NATIVE
            or token:GetTokenCategory() = lexer:ACTION
            or token:GetTokenCategory() = lexer:CLASS
            or token:GetTokenCategory() = lexer:END
            or token:GetTokenCategory() = lexer:IF
            or token:GetTokenCategory() = lexer:REPEAT
            or token:GetTokenCategory() = lexer:ELSE
            or token:GetTokenCategory() = lexer:ELSE_IF
            return true
        end

        return false
    end

    private action IsText(Token token, Lexer lexer) returns boolean
        if  token:GetTokenCategory() = lexer:STRING 
            return true
        end
        return false
    end

    private action IsComment(Token token, Lexer lexer) returns boolean
        if  token:GetTokenCategory() = lexer:COMMENTS 
            return true
        end
        return false
    end

    private action IsKeyword(Token token, Lexer lexer) returns boolean
        if  token:GetTokenCategory() = lexer:OUTPUT 
            or token:GetTokenCategory() = lexer:CONSTANT
            or token:GetTokenCategory() = lexer:ME
            or token:GetTokenCategory() = lexer:UNTIL
            or token:GetTokenCategory() = lexer:PUBLIC
            or token:GetTokenCategory() = lexer:PRIVATE
            or token:GetTokenCategory() = lexer:ALERT
            or token:GetTokenCategory() = lexer:DETECT
            or token:GetTokenCategory() = lexer:ALWAYS
            or token:GetTokenCategory() = lexer:CHECK
            or token:GetTokenCategory() = lexer:PARENT
            or token:GetTokenCategory() = lexer:CAST
            or token:GetTokenCategory() = lexer:STATIC
            or token:GetTokenCategory() = lexer:INPUT
            or token:GetTokenCategory() = lexer:SAY
            or token:GetTokenCategory() = lexer:NOW
            or token:GetTokenCategory() = lexer:WHILE
            or token:GetTokenCategory() = lexer:PACKAGE_NAME
            or token:GetTokenCategory() = lexer:TIMES
            or token:GetTokenCategory() = lexer:RETURNS
            or token:GetTokenCategory() = lexer:RETURN
            or token:GetTokenCategory() = lexer:AND
            or token:GetTokenCategory() = lexer:OR
            or token:GetTokenCategory() = lexer:NULL
            or token:GetTokenCategory() = lexer:INTEGER_KEYWORD
            or token:GetTokenCategory() = lexer:NUMBER_KEYWORD
            or token:GetTokenCategory() = lexer:TEXT
            or token:GetTokenCategory() = lexer:BOOLEAN_KEYWORD
            or token:GetTokenCategory() = lexer:USE
            or token:GetTokenCategory() = lexer:NOT
            or token:GetTokenCategory() = lexer:NOTEQUALS
            or token:GetTokenCategory() = lexer:MODULO
            or token:GetTokenCategory() = lexer:BOOLEAN
            or token:GetTokenCategory() = lexer:INHERITS
            return true
        end

        return false
    end

    boolean firstTime = true
    action Update(number seconds)
        if firstTime
        Run(box)
            firstTime = false
        end
    end

    action IsFinished returns boolean
        return not firstTime
    end

    action GetProjectKey returns text
        return projectKey
    end

    action SetProjectKey(text projectKey)
        me:projectKey = projectKey
    end
    action GetDiffResult returns DiffResult
        return diffResult
    end

    action SetDiffResult(DiffResult diffResult)
        me:diffResult = diffResult
    end
end