package Libraries.Development.Environment.Studio.Behaviors

use Libraries.Interface.Behaviors.Behavior
use Libraries.Development.Environment.Studio.OutputEditorTabPane
use Libraries.Interface.Controls.Tab
use Libraries.Interface.Controls.TreeTable
use Libraries.Language.Debug.Debugger
use Libraries.Language.Debug.VariablesModel
use Libraries.Containers.Array
use Libraries.Language.Debug.Variable
use Libraries.Language.Debug.VariableRow
use Libraries.System.File
use Libraries.Interface.Controls.TextBox
use Libraries.Development.Environment.Studio.CodeEditorTabPane
use Libraries.Development.Environment.Studio.Interface.EditorTab
use Libraries.Game.Graphics.Color
use Libraries.Interface.Controls.TextStyles.ColoredHighlight
use Libraries.Interface.Controls.TextStyles.TextStyle
use Libraries.Development.Environment.Studio.Build.BuildManager
use Libraries.Development.Environment.Studio.Interface.CodeTextBox
use Libraries.Game.GameStateManager
use Libraries.Interface.Options.InterfaceOptions
use Libraries.Development.Environment.Configuration.OptionsConstants
use Libraries.Game.Graphics.ColorGroup
use Libraries.Interface.Controls.Blocks.CodeEditor

class UpdateVariablesBehavior is Behavior
    boolean finished = false
    OutputEditorTabPane tabs = undefined
    Tab tab = undefined
    TreeTable variablesTable = undefined
    Debugger debugger = undefined
    VariableRow titleRow
    TextBox oldTextBox = undefined
    File newFile = undefined
    integer debuggerLine = -1
    CodeEditorTabPane codeEditorTabPane = undefined
    Color debuggerColor
    public constant text DEBUGGER_ANNOTATION = "Debugger"
    BuildManager manager = undefined

    on create
        SetRunOnUpdate(true)
        titleRow:SetName("Name")
        titleRow:SetType("Type")
        titleRow:SetValue("Value")
        debuggerColor:SetColor(189.0/255.0, 230.0/255.0, 170.0/255.0, 1.0)
    end

    action GetBuildManager returns BuildManager
        return manager
    end

    action SetBuildManager(BuildManager manager)
        me:manager = manager
    end

    action GetOldTextBox returns TextBox
        return oldTextBox
    end 

    action SetOldTextBox(TextBox tb)
        me:oldTextBox = tb
    end

    action GetNewFile returns File
        return newFile
    end 

    action SetNewFile(File file)
        me:newFile = file
    end

    action GetCodeEditorTabPane returns CodeEditorTabPane
        return codeEditorTabPane
    end 

    action SetCodeEditorTabPane(CodeEditorTabPane cetb)
        me:codeEditorTabPane = cetb
    end

    action SetDebuggerLine(integer line)
        debuggerLine = line
    end

    action GetDebuggerLine returns integer
        return debuggerLine
    end

    action GetDebugger returns Debugger
        return debugger
    end

    action SetDebugger(Debugger debugger)
        me:debugger = debugger
    end

    action GetOutputEditorTabPane returns OutputEditorTabPane
        return tabs
    end

    action SetOutputEditorTabPane(OutputEditorTabPane out)
        tabs = out
    end

    action SetSelectedTab(Tab tab)
        me:tab = tab
    end

    action GetSelectedTab returns Tab
        return me:tab
    end
    
    action GetTreeTable returns TreeTable
        return variablesTable
    end

    action SetTreeTable(TreeTable table)
        variablesTable = table
    end

    action Update(number seconds)
        if debugger not= undefined
            finished = true
            //remove the old debugger line
            if oldTextBox not= undefined
                oldTextBox:RemoveTextStyle(DEBUGGER_ANNOTATION)
            end

            //update the debugger color
            GameStateManager m
            InterfaceOptions io = m:GetInterfaceOptions()
            OptionsConstants const
            Color debugColor = cast(Color, io:GetColorProperty(const:EDITOR_BREAKPOINT_HIT_COLOR))

            Tab tab1 = codeEditorTabPane:OpenNewTab(newFile)
            if not (tab1 is EditorTab)
                return now
            end
            EditorTab tab = cast(EditorTab, tab1)
            if tab not= undefined
                TextBox box = tab:GetTextBox()
                if box not= undefined
                    //add the new debugger line
                    ColoredHighlight debuggerHighlight
                    debuggerHighlight:SetColor(debugColor)
                    debuggerHighlight:SetLineHighlight(true)
                    debuggerHighlight:SetRenderPriority(2)
                    TextStyle debuggerStyle
                    debuggerStyle:SetIndex(box:GetIndexOfLine(debuggerLine - 1))
                    debuggerStyle:SetHighlight(debuggerHighlight)
                    box:AddTextStyle(DEBUGGER_ANNOTATION, debuggerStyle)

                    manager:SetDebuggerLineTextBox(cast(CodeTextBox, box))
                    box:SetCaretPositionToLine(debuggerLine - 1)
                    box:GoToLine(debuggerLine - 1)
                    codeEditorTabPane:Select(tab)
                end

                CodeEditor editor = tab:GetBlockEditor()
                if editor not= undefined
                    editor:SelectBlockAtLine(debuggerLine - 1)
                    codeEditorTabPane:Select(tab)
                end
            end

            variablesTable:EmptyRows()
            variablesTable:Add(titleRow)

            VariablesModel model = debugger:GetVariablesModel()
            Array<Variable> value = model:GetRoot()
            if value not= undefined
                i = 0
                repeat while i < value:GetSize()
                    Variable variable = value:Get(i)
                    VariableRow row
                    row:SetVariable(variable)
                    row:SetVariablesModel(model)
                    variablesTable:Add(row)
                    i = i + 1
                end
                variablesTable:Resize()
            end
        end

        
    end

    action IsFinished returns boolean
        return finished
    end
end