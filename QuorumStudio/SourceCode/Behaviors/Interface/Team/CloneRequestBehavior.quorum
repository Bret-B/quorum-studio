package Libraries.Development.Environment.Studio.Behaviors

use Libraries.Interface.Events.BehaviorEvent
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Development.Environment.Studio.StudioFocusManager
use Libraries.Development.Environment.Projects.Project
use Libraries.Development.Environment.Configuration.Options
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.System.File
use Libraries.Development.Environment.Studio.OutputEditorTabPane
use Libraries.Development.Environment.Studio.CodeEditorTabPane
use Libraries.Development.Environment.Studio.Interface.OutputTab
use Libraries.Development.Versioning.Git
use Libraries.Development.Versioning.Repository
use Libraries.Development.Environment.Projects.Credentials
use Libraries.Development.Versioning.CommitRequest
use Libraries.Development.Versioning.CommitResult
use Libraries.Development.Environment.Studio.Interface.CommitDialog
use Libraries.Containers.Iterator
use Libraries.Interface.Controls.Tab
use Libraries.Development.Environment.Studio.Interface.EditorTab
use Libraries.Development.Environment.Studio.Interface.CodeTextBox
use Libraries.Development.Versioning.CloneRequest
use Libraries.Development.Versioning.CloneResult
use Libraries.Development.Versioning.VersionProgressMonitor
use Libraries.Containers.Array
use Libraries.Game.GameStateManager
use Libraries.Game.Game
use Libraries.Interface.Controls.TextBox

class CloneRequestBehavior is QuorumStudioBehavior, VersionProgressMonitor
    text remoteRepositoryLocation = ""
    text saveLocation = ""
    text username = ""
    text password = ""
    text currentTask = ""
    number maxItems = 0
    number currentItem = 0
    integer task = 0
    QuorumStudio studio = undefined
    OutputTab out = undefined

    action Run(BehaviorEvent event)
        GameStateManager manager
        Game game = manager:GetGame()
        studio = cast(QuorumStudio, game)
        OutputEditorTabPane outPane = studio:GetOutputPane()
        out = outPane:GetOutputTab()
        out:Empty()

        CloneRequest request
        request:SetUsername(GetUsername())
        request:SetPassword(GetPassword())
        request:SetRemoteRepositoryLocation(GetRemoteRepositoryLocation())
        request:SetSaveLocation(GetSaveLocation())
        request:SetProgressMonitor(me)

        text value = GetSaveLocation()
        File file
        file:SetAbsolutePath(value)
        //if file:Exists()
        //    out:Append("The folder at " + value + " is not empty. If you would like to clone to this folder, it needs to be deleted first.")
        //    return now
        //end

        Git git
        out:Append("Contacting server at: " + GetRemoteRepositoryLocation() + " ... ")
        out:Append("Cloning can take time. Please wait.")
        out:Append("")

        CloneResult result = git:Clone(request)
        out:Append("Clone completed.")
    end

    action Start(integer i) 
        maxItems = i
        out:Append("Getting files from remote server. There are " + i + " tasks to perform.")
    end

    action BeginTask(text value, integer i) 
        currentTask = value
        maxItems = i
        currentItem = 0
        out:Append(value)
    end

    action Update(integer i)
        currentItem = currentItem + i
        TextBox box = out:GetTextBox()
        integer lineNumber = box:GetLineCount()
        text line = box:GetLine(lineNumber - 1)

        number percent = currentItem / maxItems
        text percentLabel = "" + percent
        percentLabel = percentLabel:GetSubtext(0, 3)
        
        //box:SetLine(lineNumber - 1, "Progress: " + percentLabel + "%")
    end

    action EndTask
        task = task + 1
        currentItem = 0
    end

    action IsCancelled returns boolean
        return false
    end

    action GetRemoteRepositoryLocation returns text
        return remoteRepositoryLocation
    end

    action SetRemoteRepositoryLocation(text remoteRepositoryLocation)
        me:remoteRepositoryLocation = remoteRepositoryLocation
    end

    action GetSaveLocation returns text
        return saveLocation
    end

    action SetSaveLocation(text saveLocation)
        me:saveLocation = saveLocation
    end

    action GetUsername returns text
        return username
    end

    action SetUsername(text username)
        me:username = username
    end

    action GetPassword returns text
        return password
    end

    action SetPassword(text password)
        me:password = password
    end
end