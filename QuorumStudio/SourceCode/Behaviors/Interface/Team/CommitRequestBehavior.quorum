package Libraries.Development.Environment.Studio.Behaviors

use Libraries.Interface.Events.BehaviorEvent
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Development.Environment.Studio.StudioFocusManager
use Libraries.Development.Environment.Projects.Project
use Libraries.Development.Environment.Configuration.Options
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.System.File
use Libraries.Development.Environment.Studio.OutputEditorTabPane
use Libraries.Development.Environment.Studio.CodeEditorTabPane
use Libraries.Development.Environment.Studio.Interface.OutputTab
use Libraries.Development.Versioning.Git
use Libraries.Development.Versioning.Repository
use Libraries.Development.Environment.Projects.Credentials
use Libraries.Development.Versioning.CommitRequest
use Libraries.Development.Versioning.CommitResult
use Libraries.Development.Environment.Studio.Interface.CommitDialog
use Libraries.Containers.Iterator
use Libraries.Interface.Controls.Tab
use Libraries.Development.Environment.Studio.Interface.EditorTab
use Libraries.Development.Environment.Studio.Interface.CodeTextBox

class CommitRequestBehavior is QuorumStudioBehavior
    text message = ""

    action Run(BehaviorEvent event)
        QuorumStudio studio = GetMainApplication()
        StudioFocusManager manager = studio:GetStudioFocusManager()
        Project project = manager:GetProjectFocus()
        Options options = studio:GetOptions()
        

        // If the project is undefined, it fails this check.
        if project is QuorumProject
            QuorumProject quorumProject = cast(QuorumProject, project)
            File projectLocation = quorumProject:GetLocation()
            if quorumProject:HasGitSupport()
                OutputEditorTabPane outPane = studio:GetOutputPane()
                CodeEditorTabPane editor = studio:GetTabPane()

                OutputTab out = outPane:GetOutputTab()
                out:Empty()
                out:Append("Commiting ...")
                Git git
                Repository repo = quorumProject:GetGitRepository()
                

                CommitRequest request
                Credentials credentials = options:GetPassword(quorumProject:GetLocation():GetAbsolutePath())
                if credentials not= undefined
                    request:SetCredentials(credentials)
                end
                
                request:SetMessage(message)
                CommitResult result = git:Commit(repo, request)

                Iterator<Tab> iterator = editor:GetOpenTabIterator()
                repeat while iterator:HasNext()
                    Tab tab = iterator:Next()
                    if tab is EditorTab
                        EditorTab et = cast(EditorTab, tab)
                        et:SetIsParseDirty(true)
                    end
                end
                out:Append("Done")
            end
        end
    end
    action GetMessage returns text
        return message
    end

    action SetMessage(text message)
        me:message = message
    end

end