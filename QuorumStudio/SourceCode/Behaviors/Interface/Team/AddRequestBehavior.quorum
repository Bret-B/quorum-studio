package Libraries.Development.Environment.Studio.Behaviors

use Libraries.Interface.Events.BehaviorEvent
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Development.Environment.Studio.StudioFocusManager
use Libraries.Development.Environment.Projects.Project
use Libraries.Development.Environment.Configuration.Options
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.System.File
use Libraries.Development.Environment.Studio.CodeEditorTabPane
use Libraries.Interface.Controls.Tab
use Libraries.Development.Environment.Studio.Interface.EditorTab
use Libraries.Development.Environment.Studio.Interface.VisualEditorTab
use Libraries.Development.Versioning.AddRequest
use Libraries.Containers.Array
use Libraries.Development.Versioning.Repository
use Libraries.Development.Versioning.Git
use Libraries.Development.Environment.Studio.Interface.OutputTab
use Libraries.Development.Environment.Studio.OutputEditorTabPane

class AddRequestBehavior is QuorumStudioBehavior

    action Run(BehaviorEvent event)
        QuorumStudio studio = GetMainApplication()
        StudioFocusManager manager = studio:GetStudioFocusManager()
        OutputEditorTabPane outPane = studio:GetOutputPane()
        OutputTab out = outPane:GetOutputTab()
        Project project = manager:GetProjectFocus()
        Options options = studio:GetOptions()
        CodeEditorTabPane pane = studio:GetTabPane()
        Tab tab = pane:GetSelectedTab()
        if tab = undefined //nothing is focused, which is what the menu item version of this call does
            return now
        end

        File file = undefined
        EditorTab et = undefined
        if tab is EditorTab
            et = cast(EditorTab, tab)
            et:Save()
            file = et:GetFile()
        end

        VisualEditorTab vet = undefined
        if tab is VisualEditorTab
            vet = cast(VisualEditorTab, tab)
            vet:Save()
            file = vet:GetFile()
        end
        if et = undefined and vet = undefined
            return now
        end

        if file = undefined or project = undefined
            return now
        end

        //Basic error checking out of the way, do the addition to the project repository
        if project is QuorumProject
            QuorumProject quorumProject = cast(QuorumProject, project)
            File projectLocation = quorumProject:GetLocation()
            if quorumProject:HasGitSupport()
                Git git
                Repository repo = quorumProject:GetGitRepository()
                AddRequest request
                Array<File> files = request:GetFilesToAdd()
                files:Add(file)

                text path = file:GetPath()
                git:Add(repo, request)
                out:Append("")
                out:Append("Adding " + path + " to the repository on your computer.")
                out:Append("Please commit and then push to send it to the team.")
            end
        end
    end
end