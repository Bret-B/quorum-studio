package Libraries.Development.Environment.Studio.Behaviors

use Libraries.Interface.Events.BehaviorEvent
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Development.Environment.Projects.ProjectManager
use Libraries.Development.Environment.Projects.Project
use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Controls.TextBox
use Libraries.Development.Environment.Studio.OutputEditorTabPane
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.Development.Environment.Studio.Interface.OutputTab
use Libraries.Development.Environment.Studio.Build.BuildManager
use Libraries.Development.Environment.Projects.ProjectTree
use Libraries.Interface.Selections.TreeSelection
use Libraries.Containers.Array
use Libraries.Interface.Controls.TreeItem
use Libraries.Development.Environment.Projects.ProjectTreeItem
use Libraries.Development.Environment.Studio.Build.BuildInformation
use Libraries.Development.Environment.Studio.Interface.ErrorTab
use Libraries.Interface.Item
use Libraries.Development.Environment.Studio.Interface.CodeTextBox
use Libraries.Development.Environment.Studio.StudioFocusManager
use Libraries.Development.Versioning.Git
use Libraries.Development.Versioning.Repository
use Libraries.Development.Versioning.PullRequest
use Libraries.Development.Versioning.PullResult
use Libraries.Development.Versioning.ReferenceUpdate
use Libraries.Development.Environment.Configuration.Options
use Libraries.Development.Environment.Projects.Credentials
use Libraries.Development.Versioning.DiffEntry
use Libraries.Development.Versioning.GitConstants
use Libraries.Development.Environment.Studio.CodeEditorTabPane
use Libraries.System.File
use Libraries.Interface.Controls.Tab
use Libraries.Development.Environment.Studio.Interface.EditorTab

class PullRequestBehavior  is QuorumStudioBehavior

    action Run(BehaviorEvent event)
        QuorumStudio studio = GetMainApplication()
        StudioFocusManager manager = studio:GetStudioFocusManager()
        Project project = manager:GetProjectFocus()
        Options options = studio:GetOptions()
        

        // If the project is undefined, it fails this check.
        if project is QuorumProject
            QuorumProject quorumProject = cast(QuorumProject, project)
            File projectLocation = quorumProject:GetLocation()
            if quorumProject:HasGitSupport()
                OutputEditorTabPane outPane = studio:GetOutputPane()
                CodeEditorTabPane editor = studio:GetTabPane()

                OutputTab out = outPane:GetOutputTab()
                out:Empty()
                out:Append("Contacting Server ...")
                Git git
                Repository repo = quorumProject:GetGitRepository()
                

                PullRequest request
                Credentials credentials = options:GetPassword(quorumProject:GetLocation():GetAbsolutePath())
                if credentials not= undefined
                    request:SetCredentials(credentials)
                end

                PullResult result = git:Pull(repo, request)
                if result not= undefined
                    text successMessage = "Pulled from: " + result:GetFetchedFrom()
                    
                    if result:GetSuccess()
                        successMessage = successMessage + ": Success!"
                    else
                        successMessage = successMessage + ": Failed"
                    end
                    out:Append(successMessage)
                    Array<ReferenceUpdate> updates = result:GetUpdates()
                    i = 0
                    repeat while i < updates:GetSize()
                        ReferenceUpdate ref = updates:Get(i)
                        out:Append("Remote Location: " + ref:GetRemoteName())
                        i = i + 1
                    end

                    
                    GitConstants constants
                    Array<DiffEntry> diffs = result:GetDiff()
                    if diffs:GetSize() = 1
                        out:Append(diffs:GetSize() + " File Changed")
                    else
                        out:Append(diffs:GetSize() + " Files Changed")
                    end

                    i = 0
                    repeat while i < diffs:GetSize()
                        DiffEntry diff = diffs:Get(i)
                        text message = ""
                        integer value = diff:GetEntryType()
                        if value = constants:DIFF_ADD
                            message = "Add: " 
                        elseif value = constants:DIFF_MODIFY
                            message = "Modify: " 
                        elseif value = constants:DIFF_DELETE
                            message = "Delete: " 
                        elseif value = constants:DIFF_COPY
                            message = "Copy: " 
                        elseif value = constants:DIFF_RENAME
                            message = "Rename: " 
                        end
                        text location = diff:GetLocation()

                        File file
                        file:SetAbsolutePath(projectLocation:GetParentDirectory():GetAbsolutePath() + "/" + location)
                        if editor:IsOpen(file)
                            Tab tab = editor:GetOpenTab(file)
                            if tab not= undefined and tab is EditorTab
                                EditorTab et = cast(EditorTab, tab)
                                CodeTextBox code = et:GetTextBox()
                                check
                                    text newText = file:Read()
                                    code:SetText(newText)
                                    et:SetIsDirty(false)
                                    et:SetIsParseDirty(true)
                                detect e
                                end
                            end
                        end
                        message = message + location
                        out:Append(message)
                        i = i + 1
                    end
                end
            end  
        end
    end
end