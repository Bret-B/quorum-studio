package Libraries.Development.Environment.Studio.Behaviors

use Libraries.Interface.Events.BehaviorEvent
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Development.Environment.Projects.ProjectManager
use Libraries.Development.Environment.Projects.Project
use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Controls.TextBox
use Libraries.Development.Environment.Studio.OutputEditorTabPane
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.Development.Environment.Studio.Interface.OutputTab
use Libraries.Development.Environment.Studio.Build.BuildManager
use Libraries.Development.Environment.Projects.ProjectTree
use Libraries.Interface.Selections.TreeSelection
use Libraries.Containers.Array
use Libraries.Interface.Controls.TreeItem
use Libraries.Development.Environment.Projects.ProjectTreeItem
use Libraries.Development.Environment.Studio.Build.BuildInformation
use Libraries.Development.Environment.Studio.Interface.ErrorTab
use Libraries.Interface.Item
use Libraries.Development.Environment.Studio.Interface.CodeTextBox
use Libraries.Development.Environment.Studio.StudioFocusManager
use Libraries.Development.Versioning.Git
use Libraries.Development.Versioning.Repository
use Libraries.Development.Versioning.PullRequest
use Libraries.Development.Versioning.PullResult
use Libraries.Development.Versioning.ReferenceUpdate
use Libraries.Development.Environment.Configuration.Options
use Libraries.Development.Environment.Projects.Credentials
use Libraries.Development.Versioning.DiffEntry
use Libraries.Development.Versioning.GitConstants
use Libraries.Development.Environment.Studio.CodeEditorTabPane
use Libraries.System.File
use Libraries.Interface.Controls.Tab
use Libraries.Development.Environment.Studio.Interface.EditorTab
use Libraries.Development.Versioning.PushRequest
use Libraries.Development.Versioning.PushResult
use Libraries.Development.Versioning.RemoteReferenceUpdate

class PushRequestBehavior  is QuorumStudioBehavior
    GitConstants constants
    action Run(BehaviorEvent event)
        QuorumStudio studio = GetMainApplication()
        StudioFocusManager manager = studio:GetStudioFocusManager()
        Project project = manager:GetProjectFocus()
        Options options = studio:GetOptions()
        

        // If the project is undefined, it fails this check.
        if project is QuorumProject
            QuorumProject quorumProject = cast(QuorumProject, project)
            File projectLocation = quorumProject:GetLocation()
            if quorumProject:HasGitSupport()
                OutputEditorTabPane outPane = studio:GetOutputPane()
                CodeEditorTabPane editor = studio:GetTabPane()

                OutputTab out = outPane:GetOutputTab()
                out:Empty()
                out:Append("Contacting Server ...")
                Git git
                Repository repo = quorumProject:GetGitRepository()
                

                PushRequest request
                Credentials credentials = options:GetPassword(quorumProject:GetLocation():GetAbsolutePath())
                if credentials not= undefined
                    request:SetCredentials(credentials)
                else 
                    out:Append("Username and password not set, please use the Team tab in the project properties dialog.")
                end

                PushResult result = git:Push(repo, request)
                if result not= undefined
                    Array<RemoteReferenceUpdate> updates = result:GetUpdates()
                    i = 0
                    repeat while i < updates:GetSize()
                        RemoteReferenceUpdate update = updates:Get(i)
                        text message = "    Reference: "
                        text name = update:GetName()
                        text refMessage = update:GetMessage()
                        message = message + name
                        if refMessage not= undefined
                            message = message + ", " + refMessage
                        end

                        text statusMessage = ""
                        integer status = update:GetStatus()
                        if status = constants:PUSH_AWAITING_REPORT
                            statusMessage = "Failed: awaiting report from server."
                        elseif status = constants:PUSH_NON_EXISTING
                            statusMessage = "Failed: Tried to push to a repository that did not exist."
                        elseif status = constants:PUSH_NOT_ATTEMPTED
                            statusMessage = "Failed: Git chose not to attempt the push, for reasons that the system could not detect."
                        elseif status = constants:PUSH_OK
                            statusMessage = "Push Successful!"
                        elseif status = constants:PUSH_REJECTED_NODELETE
                            statusMessage = "Failed: Git rejected the push because of a deletion error."
                        elseif status = constants:PUSH_REJECTED_NONFASTFORWARD
                            statusMessage = "Failed: Git rejected the push because the repository was not up to date. Please do a pull and then try again."
                        elseif status = constants:PUSH_REJECTED_OTHER_REASON
                            statusMessage = "Failed: Git failed to push, but did not specify why."
                        elseif status = constants:PUSH_REJECTED_REMOTE_CHANGED
                            statusMessage = "Failed: The reference to the server has been changed and as such, Git rejected the push request."
                        elseif status = constants:PUSH_UP_TO_DATE
                            statusMessage = "The repository is up to date and you do not need to push."
                        end
                        out:Append(message)
                        out:Append(statusMessage)

                        i = i + 1
                    end
                    out:Append("Push request complete.")
                else
                    out:Append("Server did not respond.")
                end
            end  
        end
    end
end