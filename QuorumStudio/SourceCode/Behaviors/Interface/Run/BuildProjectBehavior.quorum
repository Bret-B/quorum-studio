package Libraries.Development.Environment.Studio.Behaviors

use Libraries.Interface.Events.BehaviorEvent
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Development.Environment.Projects.ProjectManager
use Libraries.Development.Environment.Projects.Project
use Libraries.Interface.Behaviors.Behavior
use Libraries.Interface.Controls.TextBox
use Libraries.Development.Environment.Studio.OutputEditorTabPane
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.Development.Environment.Studio.Interface.OutputTab
use Libraries.Development.Environment.Studio.Build.BuildManager
use Libraries.Development.Environment.Projects.ProjectTree
use Libraries.Interface.Selections.TreeSelection
use Libraries.Containers.Array
use Libraries.Interface.Controls.TreeItem
use Libraries.Development.Environment.Projects.ProjectTreeItem

class BuildProjectBehavior is QuorumStudioBehavior
    BuildManager builder = undefined

    action GetBuildManager returns BuildManager
        return builder
    end

    action SetBuildManager(BuildManager builder)
        me:builder = builder
    end

    action Run(BehaviorEvent event)
        QuorumStudio studio = GetMainApplication()
        OutputEditorTabPane outPane = studio:GetOutputPane()
        OutputTab out = outPane:GetOutputTab()
        
        out:Empty()
        out:Append("Building")

        ProjectTree tree = studio:GetProjectTree()
        TreeSelection selection = tree:GetSelection()
        if not selection:IsEmpty()
            Array<TreeItem> items = selection:GetPath()
            ProjectTreeItem value = cast(ProjectTreeItem, items:Get(0))
            QuorumProject project = value:GetProject()
            builder:Build(project)
        end
        

//        Compiler compiler = project:GetCompiler()
//        File location = project:GetLocation()
//        File sources = project:GetSources()
//        
//        //get the array of sources and filter them
//        Array<File> sourceFolderFiles = sources:GetDirectoryListing()
//        Array<File> sourcesToCompile
//        i = 0
//        repeat while i < sourceFolderFiles:GetSize()
//            File file = sourceFolderFiles:Get(i)
//            if file:GetFileExtension() = "quorum"
//                sourcesToCompile:Add(file)
//            end
//            i = i + 1
//        end

//        compiler:Compile(sourcesToCompile)
//        CompilerErrorManager errors = compiler:GetCompilerErrorManager()
//        Iterator<CompilerError> errorIterator = errors:GetIterator()
//
//        text version = compiler:GetVersion()
//        output version
//
//        repeat while errorIterator:HasNext()
//            CompilerError error = errorIterator:Next()
//            output error:GetErrorMessage()
//        end
    end
end