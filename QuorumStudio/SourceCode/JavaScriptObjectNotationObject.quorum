package Libraries.Data.Formats
use Libraries.Containers.HashTable
use Libraries.Containers.Array

class JavaScriptObjectNotationObject 
    Array<JavaScriptObjectNotationObject> array
    text textValue = ""
    integer integerValue = 0
    number numberValue = 0.0
    boolean booleanValue = false
    integer type = 0
    constant integer INTEGER = 1
    constant integer NUMBER = 2
    constant integer TEXT = 3
    constant integer BOOLEAN = 4
    constant integer NULL = 5
    constant integer ARRAY = 6
    constant integer OBJECT = 7
    text key = ""
    boolean object = false
    integer spaces = 4
    boolean prettyPrint = true

    action IsPrettyPrint returns boolean
        return prettyPrint
    end

    action SetPrettyPrint(boolean print)
        prettyPrint = print
    end

    action IsObject returns boolean
        return type = OBJECT
    end

    action SetObject
        type = OBJECT
    end

    action GetKey returns text
        return key
    end

    action SetKey(text key)
        me:key = key
    end

    action Add(JavaScriptObjectNotationObject object)
        array:Add(object)
    end

    action Add(text key, text value) 
        JavaScriptObjectNotationObject object
        object:SetText(value)
        object:SetKey(key)
        array:Add(object)
    end

    action Add(text key, integer value) 
        JavaScriptObjectNotationObject object
        object:SetInteger(value)
        object:SetKey(key)
        array:Add(object)
    end

    action Add(text key, boolean value) 
        JavaScriptObjectNotationObject object
        object:SetBoolean(value)
        object:SetKey(key)
        array:Add(object)
    end

    action Add(text key, number value) 
        JavaScriptObjectNotationObject object
        object:SetNumber(value)
        object:SetKey(key)
        array:Add(object)
    end

    action GetText returns text
        return textValue
    end

    action GetInteger returns integer
        return integerValue
    end

    action GetNumber returns number
        return numberValue
    end

    action GetBoolean returns boolean
        return booleanValue
    end

    action SetText(text value)
        textValue = value
        type = TEXT
    end

    action SetInteger(integer value)
        integerValue = value
        type = INTEGER
    end

    action SetNumber(number value)
        numberValue = value
        type = NUMBER
    end

    action SetBoolean(boolean value)
        booleanValue = value
        type = BOOLEAN
    end

    action IsBoolean returns boolean
        if type = BOOLEAN
           return true
        end
        return false
    end

    action SetNull
        type = NULL
    end

    action SetArray
        type = ARRAY
    end

    action IsArray returns boolean
        if type = ARRAY
           return true
        end
        return false
    end

    action IsNull returns boolean
        if type = NULL
           return true
        end
        return false
    end

    action IsInteger returns boolean
        if type = INTEGER
           return true
        end
        return false
    end

    action IsText returns boolean
        if type = TEXT
           return true
        end
        return false
    end

    action IsNumber returns boolean
        if type = NUMBER
           return true
        end
        return false
    end

    action Get(integer index) returns JavaScriptObjectNotationObject
        JavaScriptObjectNotationObject value = array:Get(index)
        return value
    end

    action Remove(integer index)
        array:RemoveAt(index)
    end

    action GetSize returns integer
        return array:GetSize()
    end

    private action GetSpaces(integer level) returns text
        text space = ""
        repeat spaces * level times
            space = space + " "
        end
        return space
    end

    private action ToText(integer level) returns text
        text result = ""
        text dq = result:GetDoubleQuote()
        text line = result:GetCarriageReturn()
        text space = ""
        if IsPrettyPrint()
            space = GetSpaces(level)
        end

        if key not= undefined and not key:IsEmpty()
            result = result + space + dq + key + dq + ": " 
        end

        if IsObject()
            if level > 0
                result = result + line + space + "{" + line
            else
                result = result + "{" + line
            end
        elseif IsArray() 
            result = result + "["
        end
            
        if IsText()
            result = result + dq + textValue + dq
        elseif IsBoolean()
            result = result + booleanValue
        elseif IsInteger()
            result = result + integerValue
        elseif IsNumber()
            result = result + numberValue
        end
        
        //get all children
        i = 0
        repeat while i < array:GetSize()
            JavaScriptObjectNotationObject value = array:Get(i)
            if IsArray()
                result = result + value:ToText(level)
            else
                result = result + value:ToText(level + 1)
            end

            if i not= array:GetSize() - 1
                text isNext = ", "
                if not IsArray()
                    isNext = isNext + line
                end
                result = result + isNext
            end
            i = i + 1
        end

        if IsObject()
            result = result + line + space + "}"
        elseif IsArray() 
            result = result + "]"
        end

        return result
    end

    action ToText returns text
        return ToText(0)
    end
end