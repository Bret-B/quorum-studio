package Libraries.Development.Environment.Projects

use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.Containers.Iterator
use Libraries.Containers.HashTable

class ProjectManager
    //This table is hashed by absolute path of the project folder
    HashTable<text, QuorumProject> projects
    public constant text PROJECT = "Project"
    public constant text EXTENSION = "qp"
    Array<ProjectListener> listeners

    action Add(ProjectListener listener)
        listeners:Add(listener)
    end

    action Remove(ProjectListener listener)
        listeners:Remove(listener)
    end

    private action FireEvent(QuorumProject project, boolean opened)
        i = 0
        repeat while i < listeners:GetSize()
            ProjectListener listener = listeners:Get(i)
            if opened
                listener:OpenedProject(project)
            else
                listener:ClosedProject(project)
            end
            i = i + 1
        end
    end

    /*
        This action checks if a particular folder is a Quorum Studio project
        folder.
    */
    action IsProject(File file) returns boolean
        if file not= undefined and file:IsFile() and file:GetFileName() = PROJECT + "." + EXTENSION
            return true
        end

        return false
    end

    /*
        This action creates a new project in a particular folder.
    */
    action New(File file) returns QuorumProject
        //first create the folders
        file:CreateDirectories()

        //now create the project folder

        File projectFolder
        projectFolder:SetWorkingDirectory(file:GetAbsolutePath())
        projectFolder:SetPath("Project")
        projectFolder:CreateDirectory()

        QuorumProject project
        project:SetLocation(file)
        project:SetToDefault()
        project:SetName(file:GetFileName())
        project:Save()

        projects:Add(file:GetAbsolutePath(), project)
        FireEvent(project, true)
        return project
    end

    /*
        This action creates a new project from a template
        in a particular folder called template.
    */
    action New(File file, File template) returns QuorumProject
        //now check to ensure the template file really is a project folder
        //if it is, copy everything in it to the new folder.
        if not IsProject(template)
            return undefined
        end

        //first create the folders
        file:CreateDirectories()

        //now copy over all of the files from the template folder
        Array<File> files = template:GetDirectoryListing()
        i = 0
        repeat while i < files:GetSize()
            File sub = files:Get(i)
            text value = sub:GetFileName()
            File newSub
            newSub:SetWorkingDirectory(file:GetAbsolutePath())
            newSub:SetPath(value)

            File test
            test:SetWorkingDirectory(sub:GetWorkingDirectory())
            test:SetPath(sub:GetPath())
            test:Copy(newSub, true)
            i = i + 1
        end

        return Open(file)
    end

    /*
        This action opens a project in a particular folder.
    */
    action Open(File file) returns QuorumProject
        //first check if it's a valid project location
        if not IsProject(file)
            return undefined
        end

        //get project folder directory
        File mom = file:GetParentDirectory():GetParentDirectory()
        QuorumProject project
        project:SetLocation(mom)
        project:Load()

        text path = file:GetAbsolutePath()
        projects:Add(path, project)
        FireEvent(project, true)
        return project
    end

    /* 
        This action closes a project in a particular folder.
    */
    action Close(File file) 
        if file = undefined
            return now
        end

        text key = file:GetAbsolutePath()
        QuorumProject project = projects:GetValue(key)
        if project not= undefined
            //first save the project before we close it
            project:Save()
            projects:RemoveKey(key)
            FireEvent(project, false)
        end
    end

    action Get(File file) returns QuorumProject
        if file = undefined
            return undefined
        end
        return projects:GetValue(file:GetAbsolutePath())
    end

    /*

    */
    action GetIterator returns Iterator<QuorumProject>
        return projects:GetValueIterator()
    end

    action GetSize returns integer
        return projects:GetSize()
    end
end