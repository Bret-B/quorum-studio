package Libraries.Data.Formats
use Libraries.System.File
use Libraries.Containers.Array

class JavaScriptObjectNotationLexer 
    public constant integer STRING = 0
    public constant integer LEFT_BRACKET = 1
    public constant integer RIGHT_BRACKET = 2
    public constant integer LEFT_BRACE = 3
    public constant integer RIGHT_BRACE = 4
    public constant integer COMMA = 5
    public constant integer COLON = 6
    public constant integer NUMBER = 7
    public constant integer TRUE = 8
    public constant integer FALSE = 9
    public constant integer NULL = 10

    Array<JavaScriptObjectNotationToken> tokens
    JavaScriptObjectNotationListener listener = undefined

    action GetListener returns JavaScriptObjectNotationListener
        return listener
    end

    action SetListener(JavaScriptObjectNotationListener listener)
        me:listener = listener
    end

    action GetToken(integer i) returns JavaScriptObjectNotationToken
        return tokens:Get(i)
    end

    action GetSize returns integer
        return tokens:GetSize()
    end

    action IsEmpty returns boolean
        return tokens:IsEmpty()
    end

    action Read(File file)
        text value = file:Read()
        text quote = value:GetDoubleQuote()
        text line = value:GetCarriageReturn() + value:GetLineFeed()
        integer currentLine = 0
        integer currentColumn = -1
        text string = ""
        i = 0
        repeat while i < value:GetSize()
            text char = value:GetCharacter(i)
            JavaScriptObjectNotationToken token

            if char = value:GetLineFeed()
                currentLine = currentLine + 1
                currentColumn = -1
            end
            currentColumn = currentColumn + 1

            token:startLine = currentLine
            token:startColumn = currentColumn
            token:startIndex = i

            if char = quote
                //greedily look forward until the next double quote.
                string = ""//quote
                j = i + 1
                repeat while j < value:GetSize()
                    char2 = value:GetCharacter(j)
                    if char2 = quote
                        i = j
                        token:tokenID = STRING
                        token:value = string
                        string = ""
                        j = value:GetSize() + 1
                        tokens:Add(token)
                    else 
                        string = string + char2
                    end
                    currentColumn = currentColumn + 1
                    j = j + 1
                end
            elseif char = "-" or IsDigit(char)
                string = char
                j = i + 1
                digitCount = 0
                if IsDigit(char)
                    digitCount = 1
                end

                done = false
                repeat while j < value:GetSize() and not done
                    char2 = value:GetCharacter(j)
                    if IsDigit(char2)
                        string = string + char2
                        digitCount = digitCount + 1
                        currentColumn = currentColumn + 1
                        j = j + 1
                    else //stop at the first non-digit
                        if digitCount = 0
                            ThrowError(currentLine,currentColumn + 4,j, "A Minus (-) must be followed by any number of digits (0-9)")
                        end
                        done = true
                    end
                end

                //we now have a bunch of digits. The next character is either 
                //an E, an e, or a dot.
                if j < value:GetSize()
                    char2 = value:GetCharacter(j)
                    if char2 = "."
                        string = string + char2
                        j = j + 1
                        done = false
                        digitCount = 0
                        repeat while j < value:GetSize() and not done
                            char2 = value:GetCharacter(j)
                            if IsDigit(char2)
                                string = string + char2
                                digitCount = digitCount + 1
                                currentColumn = currentColumn + 1
                                j = j + 1
                            else //stop at the first non-digit
                                if digitCount = 0
                                    ThrowError(currentLine,currentColumn + 4,j, "A period (.) must be followed by any number of digits (0-9)")
                                end
                                done = true
                            end
                        end
                    end
                end

                //whether there was a dot or not, the last thing 
                //we might have is the exponent
                if j < value:GetSize()
                    char2 = value:GetCharacter(j)
                    if char2 = "e" or char2 = "E"
                        string = string + char2
                        j = j + 1

                        //now check if is a plus or a minus
                        if j < value:GetSize()
                            char2 = value:GetCharacter(j)
                            if char2 = "+" or char2 = "-"
                                string = string + char2
                                j = j + 1
                            end
                        end

                        //now add more integers
                        done = false
                        digitCount = 0
                        repeat while j < value:GetSize() and not done
                            char2 = value:GetCharacter(j)
                            if IsDigit(char2)
                                string = string + char2
                                j = j + 1
                                currentColumn = currentColumn + 1
                                digitCount = digitCount + 1
                            else //stop at the first non-digit
                                if digitCount = 0
                                    ThrowError(currentLine,currentColumn + 4,j, "An exponent (e or E) must be followed by any number of digits (0-9)")
                                end
                                done = true
                            end
                        end
                    end
                end

                i = j - 1
                token:tokenID = NUMBER
                token:value = string
                tokens:Add(token)
            elseif char = "{"
                token:tokenID = LEFT_BRACKET
                token:value = "{"
                tokens:Add(token)
            elseif char = "}"
                token:tokenID = RIGHT_BRACKET
                token:value = "}"
                tokens:Add(token)
            elseif char = "["
                token:tokenID = LEFT_BRACE
                token:value = "["
                tokens:Add(token)
            elseif char = "]"
                token:tokenID = RIGHT_BRACE
                token:value = "]"
                tokens:Add(token)
            elseif char = ":"
                token:tokenID = COLON
                token:value = ":"
                tokens:Add(token)
            elseif char = ","
                token:tokenID = COMMA
                token:value = ","
                tokens:Add(token)
            elseif char = "t"
                //check the next three characters to see if they match "true"
                //if they don't, this is an error
                if i + 3 < value:GetSize()
                    char = value:GetCharacter(i + 1)
                    if char not= "r"
                        ThrowError(currentLine,currentColumn + 1,i + 1, "I was not expecting the character " + char + " when trying to evaluate a token that starts with t")
                    end

                    char = value:GetCharacter(i + 2)
                    if char not= "u"
                        ThrowError(currentLine,currentColumn + 2,i + 2, "I was not expecting the character " + char + " when trying to evaluate a token that starts with tr")
                    end

                    char = value:GetCharacter(i + 3)
                    if char not= "e"
                        ThrowError(currentLine,currentColumn + 3,i + 3, "I was not expecting the character " + char + " when trying to evaluate a token that starts with tru")
                    end

                    token:tokenID = TRUE
                    token:value = "true"
                    tokens:Add(token)
                else //this is a lexer error, throw an error message
                    ThrowError(currentLine,currentColumn,i, "I found a token that starts with the letter t, but the stream stops before I can process the word true")
                end
            elseif char = "f"
                //check the next three characters to see if they match "true"
                //if they don't, this is an error
                if i + 4 < value:GetSize()
                    char = value:GetCharacter(i + 1)
                    if char not= "a"
                        ThrowError(currentLine,currentColumn + 1,i + 1, "I was not expecting the character " + char + " when trying to evaluate a token that starts with f")
                    end

                    char = value:GetCharacter(i + 2)
                    if char not= "l"
                        ThrowError(currentLine,currentColumn + 2,i + 2, "I was not expecting the character " + char + " when trying to evaluate a token that starts with fa")
                    end

                    char = value:GetCharacter(i + 3)
                    if char not= "s"
                        ThrowError(currentLine,currentColumn + 3,i + 3, "I was not expecting the character " + char + " when trying to evaluate a token that starts with fal")
                    end

                    char = value:GetCharacter(i + 4)
                    if char not= "e"
                        ThrowError(currentLine,currentColumn + 4,i + 4, "I was not expecting the character " + char + " when trying to evaluate a token that starts with fals")
                    end

                    token:tokenID = FALSE
                    token:value = "false"
                    tokens:Add(token)
                else //this is a lexer error, throw an error message
                    ThrowError(currentLine,currentColumn,i, "I found a token that starts with the letter t, but the stream stops before I can process the word false")
                end
            elseif char = "n"
                //check the next three characters to see if they match "true"
                //if they don't, this is an error
                if i + 3 < value:GetSize()
                    char = value:GetCharacter(i + 1)
                    if char not= "u"
                        ThrowError(currentLine,currentColumn + 1,i + 1, "I was not expecting the character " + char + " when trying to evaluate a token that starts with n")
                    end

                    char = value:GetCharacter(i + 2)
                    if char not= "l"
                        ThrowError(currentLine,currentColumn + 2,i + 2, "I was not expecting the character " + char + " when trying to evaluate a token that starts with nu")
                    end

                    char = value:GetCharacter(i + 3)
                    if char not= "l"
                        ThrowError(currentLine,currentColumn + 3,i + 3, "I was not expecting the character " + char + " when trying to evaluate a token that starts with nul")
                    end

                    token:tokenID = NULL
                    token:value = "null"
                    tokens:Add(token)
                else //this is a lexer error, throw an error message
                    ThrowError(currentLine,currentColumn,i, "I found a token that starts with the letter t, but the stream stops before I can process the word null")
                end
            end

            token:endLine = currentLine
            token:endColumn = currentColumn
            token:endIndex = i
            i = i + 1
        end
    end

    private action IsDigit(text char) returns boolean
        if  char = "0" or char = "1" or char = "2" or char = "3" or char = "4" or
            char = "5" or char = "6" or char = "7" or char = "8" or char = "9"
            return true
        end
        return false
    end

    action ThrowError(integer line, integer column, integer index, text message)
        if listener not= undefined
            JavaScriptObjectNotationError error
            error:SetLineNumber(line)
            error:SetColumnNumber(column)
            error:SetIndex(index)
            error:SetLineNumberEnd(line)
            error:SetColumnNumberEnd(column)
            error:SetIndexEnd(index)
            error:SetErrorMessage(message)
            listener:VisitError(error)
        end
    end
end