package Libraries.Development.Environment.Projects.Quorum
use Libraries.Development.Environment.Projects.Project
use Libraries.Containers.Array
use Libraries.Development.Environment.Projects.ProjectProperty
use Libraries.Containers.Iterator
use Libraries.System.File
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Data.Formats.JavaScriptObjectNotationObject
use Libraries.System.Logger
use Libraries.Language.Compile.Compiler
use Libraries.Development.Environment.Studio.Behaviors.BuildQuorumProject

/*
    This class loads a Quorum project into the Integrated Development Environment.
    It does so by reading a Javascript Object Notation (JSON) file that contains 
    properties a out the project. The supported properties approximate the 
    older project system in previous versions of Quorum.
*/
class QuorumProject is Project
    /* This property represents that this project type is the Quorum programming language.*/
    public constant text PROJECT_TYPE_NAME = "Quorum Project"

    /* This property represents the name of the executable file that is compiled. */
    public constant text EXECUTABLE_NAME = "ExecutableName"

    /* This property represents the default name of the executable file that is compiled. */
    public constant text DEFAULT_EXECUTABLE_NAME = "Default"


    /* This property represents the file that Quorum starts a program from. */
    public constant text PROJECT_MAIN = "Main"
    /* This property represents the file that Quorum starts a program from. */
    public constant text PROJECT_MAIN_LOCATION = "/SourceCode/Main.quorum"
    /* This is the path to the sources folder. */
    public constant text PROJECT_SOURCES = "SourceCode"

    /* This property represents what kind of project in Quorum this is. */
    public constant text PROJECT_TYPE = "ProjectType"
    /* This property is set for Project type if it is compiled to Java Bytecode. */
    public constant text JAVA_COMPILE_TYPE = "JavaType"
    /* This property is set for Project type if it is compiled to Javascript. */
    public constant text JAVASCRIPT_COMPILE_TYPE = "JavascriptType"
    /* This property is set for Project type if it is compiled to a .war file to be used in tomcat or glassfish. */
    public constant text SERVER_COMPILE_TYPE = "ServerType"
    /* This property is set for Project type if it is compiled to LEGO and sent to a connected system. */
    public constant text LEGO_COMPILE_TYPE = "LegoType"
    /* This property is set for Project type if it is compiled to an iPhone. */
    public constant text IPHONE_COMPILE_TYPE = "IphoneType"
    /* This property is set for Project type if it is compiled to Android. */
    public constant text ANDROID_COMPILE_TYPE = "AndroidType"


    /* This property stores all of the dependencies on jar files for the system. */
    public constant text JAR_DEPENDENCIES = "JarDependencies"
    /* This property stores all of the dependencies on javascript files for the system. */
    public constant text JAVASCRIPT_DEPENDENCIES = "JavascriptDependencies"
    /* This property stores all of the dependencies on java class files for the system. */
    public constant text JAVA_CLASS_DEPENDENCIES = "JavaClassDependencies"

    /* This flag is used to tell the project to tell the project to store image sheet information */
    public constant text IMAGE_SHEET_ENABLED = "ImageSheetEnabled"
    /* This flag is used to tell the project to recompile image sheets after a 
        successful compile. */
    public constant text IMAGE_SHEET_REBUILD_ON_COMPILE = "ImageSheetRebuildOnCompile"
    /* This property tells us the path for the image sheets.*/
    public constant text IMAGE_SHEET_BUILD_PATH = "ImageSheetBuildPath"
    /* This property stores the data for the image sheets themselves. */
    public constant text IMAGE_SHEETS = "ImageSheets"

    /* This property stores the location of any mobile assets. */
    public constant text MOBILE_ASSETS = "MobileAssets"
    public constant text IPHONE_PROVISIONING_KEY = "IphoneProvisioningKey"
    public constant text IPHONE_SIGNING_IDENTITY = "IphoneSigningIdentity"
    Logger logger

    /* This is the file that references the standard library.*/
    File library

    /* This is a file to the source location. */
    File sources

    /* This is a file to the source location. */
    File mainFile

    /* This is an in memory representation of the image sheets class. */
    ImageSheets sheets
    Compiler compiler

    //add all the default actions this project can do
    BuildQuorumProject build

    on create
        build:SetProject(me)
        library:SetPath("Library/Standard")

        //temporary location
        library:SetWorkingDirectory("/Users/stefika/Repositories/quorum-language/Quorum3")
        compiler:SetStandardLibraryFolder(library)
    end

    action SetLocation(File location)
        parent:Libraries.Development.Environment.Projects.Project:SetLocation(location)
        File loc = GetLocation()
        sources:SetWorkingDirectory(location:GetAbsolutePath())
        sources:SetPath(PROJECT_SOURCES)
        compiler:SetOutputFolder(loc)
    end

    action GetSources returns File
        return sources
    end

    action GetCompiler returns Compiler
        return compiler
    end

    action SetCompiler(Compiler compiler)
        me:compiler = compiler
    end

    /* This action returns the build path for image sheets. */
    action GetMobileAssetsPath returns text
        ProjectProperty property = GetProperty(MOBILE_ASSETS)
        text value = property:GetFirstValue()
        return value
    end

    /* This action sets the build path for image sheets. */
    action SetMobileAssetsPath(text path)
        SetPropertyValue(MOBILE_ASSETS, path)
    end

    /* This action returns the build path for image sheets. */
    action GetIphoneProvisioningKey returns text
        ProjectProperty property = GetProperty(IPHONE_PROVISIONING_KEY)
        text value = property:GetFirstValue()
        return value
    end

    /* This action sets the build path for image sheets. */
    action SetIphoneProvisioningKey(text path)
        SetPropertyValue(IPHONE_PROVISIONING_KEY, path)
    end

    /* This action returns the build path for image sheets. */
    action GetIphoneSigningIdentity returns text
        ProjectProperty property = GetProperty(IPHONE_SIGNING_IDENTITY)
        text value = property:GetFirstValue()
        return value
    end

    /* This action sets the build path for image sheets. */
    action SetIphoneSigningIdentity(text path)
        SetPropertyValue(IPHONE_SIGNING_IDENTITY, path)
    end

    /* This action gets all image sheets loaded from the properties file. */
    action GetImageSheets returns ImageSheets
        return sheets
    end

    /* This action sets a property values from an ImageSheets object. */
    action SetImageSheets(ImageSheets sheets)
        me:sheets = sheets
    end
    /*
        This action turns access to image sheets on or off in the project.
    */
    action EnableImageSheets(boolean value)
        AddProperty(IMAGE_SHEET_ENABLED, "" + value)
    end

    /* This action asks whether image sheets are enabled on the project. */
    action IsImageSheetsEnabled returns boolean
        ProjectProperty property = GetProperty(IMAGE_SHEET_ENABLED)
        text value = property:GetFirstValue()
        if value = "true"
            return true
        end

        return false
    end

    /* This action returns the build path for image sheets. */
    action GetImageSheetBuildPath returns text
        ProjectProperty property = GetProperty(IMAGE_SHEET_BUILD_PATH)
        text value = property:GetFirstValue()
        return value
    end

    /* This action sets the build path for image sheets. */
    action SetImageSheetBuildPath(text path)
        SetPropertyValue(IMAGE_SHEET_BUILD_PATH, path)
    end

    /* This action turns recompiling image sheets after a successful build on or
        off.
    */
    action EnableRecompileImageSheetsOnBuild(boolean value)
        AddProperty(IMAGE_SHEET_REBUILD_ON_COMPILE, "" + value)
    end

    /* This action asks whether the project will recompile image sheets
        after a successful recompile. 
    */
    action IsRecompileImageSheetsOnBuild returns boolean
        ProjectProperty property = GetProperty(IMAGE_SHEET_REBUILD_ON_COMPILE)
        text value = property:GetFirstValue()
        if value = "true"
            return true
        end

        return false
    end

    /*
        This action returns an array of all of the jar dependencies on the system.
        These dependencies are listed as file paths from the root of the project. 
        For example, a dependency that lives in the folder /dep and named abc.jar
        would be /dep/abc.jar. 
    */
    action GetJarDependencies returns Iterator<text>
        ProjectProperty property = GetProperty(JAR_DEPENDENCIES)
        property = property:Copy()
        Iterator<text> iterator = property:GetValueIterator()
        return iterator
    end

    /*
        This action sets an array of all of the jar dependencies in the project.
        These dependencies are listed as file paths from the root of the project. 
        For example, a dependency that lives in the folder /dep and named abc.jar
        would be /dep/abc.jar. 
    */
    action SetJarDependencies(Array<text> dependencies)
        SetMultipleValueProperty(JAR_DEPENDENCIES, dependencies)
    end

    /*
        This action returns an array of all of the javascript dependencies in the project.
        These dependencies are listed as file paths from the root of the project. 
        For example, a dependency that lives in the folder /dep and named abc.js
        would be /dep/abc.js.
    */
    action SetJavascriptDependencies(Array<text> dependencies)
        SetMultipleValueProperty(JAVASCRIPT_DEPENDENCIES, dependencies)
    end

    /*
        This action gets an array of all of the javascript dependencies in the project.
        These dependencies are listed as file paths from the root of the project. 
        For example, a dependency that lives in the folder /dep and named abc.js
        would be /dep/abc.js.
    */
    action GetJavascriptDependencies returns Iterator<text>
        ProjectProperty property = GetProperty(JAVASCRIPT_DEPENDENCIES)
        property = property:Copy()
        Iterator<text> iterator = property:GetValueIterator()
        return iterator
    end

    /*
        This action returns an array of all of the java class file dependencies in the project.
        These dependencies are listed as file paths from the root of the project. 
        For example, a dependency that lives in the folder /dep 
        would be /dep and would include all class files in that folder and sub-folders.
    */
    action SetJavaClassDependencies(Array<text> dependencies)
        SetMultipleValueProperty(JAVA_CLASS_DEPENDENCIES, dependencies)
    end

    /*
        This action gets an array of all of the java class file dependencies in the project.
        These dependencies are listed as file paths from the root of the project. 
        For example, a dependency that lives in the folder /dep 
        would be /dep and would include all class files in that folder and sub-folders.
    */
    action GetJavaClassDependencies returns Iterator<text>
        ProjectProperty property = GetProperty(JAVA_CLASS_DEPENDENCIES)
        property = property:Copy()
        Iterator<text> iterator = property:GetValueIterator()
        return iterator
    end

    action SetToDefault
        Empty()
        AddProperty(parent:Libraries.Development.Environment.Projects.Project:DEVELOPMENT_ENVIRONMENT_VERSION, 
                    parent:Libraries.Development.Environment.Projects.Project:DEVELOPMENT_ENVIRONMENT_VERSION_VALUE)
        AddProperty(PROJECT_TYPE, JAVA_COMPILE_TYPE)
        AddProperty(PROJECT_MAIN, PROJECT_MAIN_LOCATION)
        AddProperty(EXECUTABLE_NAME, DEFAULT_EXECUTABLE_NAME)
    end


    action Build
        if build not= undefined
            build:Run(undefined)
        end
    end

    /*
        This action gets the name of the executable file, regardless of target,
        for the executable created.
    */
    action GetExecutableName returns text
        ProjectProperty property = GetProperty(EXECUTABLE_NAME)
        text value = property:GetFirstValue()
        return value
    end

    /*
        This action sets the name of the executable file, regardless of target,
        for the executable created.
    */
    action SetExecutableName(text value)
        SetPropertyValue(EXECUTABLE_NAME, value)
    end

    /* This action returns the type of project this is. */
    action GetProjectCompileType returns text
        ProjectProperty property = GetProperty(PROJECT_TYPE)
        text value = property:GetFirstValue()
        return value
    end

    /*
        This action checks to see if a particular value is a valid type 
        that can be compiled by the Quorum compiler.
    */
    action IsValidProjectCompileType(text value) returns boolean
        if  value = JAVA_COMPILE_TYPE or
            value = JAVASCRIPT_COMPILE_TYPE or
            value = SERVER_COMPILE_TYPE or
            value = LEGO_COMPILE_TYPE or
            value = IPHONE_COMPILE_TYPE or
            value = ANDROID_COMPILE_TYPE
            return true
        end

        return false
    end

    /*
        This action attempts to set the type of project to compile to. If an 
        invalid flag is sent to the system, for example telling the compiler to
        compile to something it cannot, then an exception is thrown.
    */
    action SetProjectCompileType(text value) 
        if IsValidProjectCompileType(value)
            SetPropertyValue(PROJECT_TYPE, value)
        else 
            alert("The property passed to the project, " + value + " is not a valid type that can be compiled in Quorum.")
        end
    end

    action GetProjectType returns text
        return PROJECT_TYPE_NAME
    end

    /*
        This action loads a project from its location on disk. To use this action,
        you must first call SetLocation(File), with a valid project folder. 
    */
    action Load
        File properties = GetPropertiesLocation()
        LoadProperties(properties)
    end

    /*
        This action saves a project to disk. By default, it saves only the 
        project properties file, not any modified source files. To use this action,
        you must first call SetLocation(File), with a valid project folder. As a 
        project only stores properties set to it, saving a blank project 
        would result in a blank properties file.
    */
    action Save
        File properties = GetPropertiesLocation()
        SaveProperties(properties)
    end

    /* This action loads a properties file from disk, in JavaScript Object Notation (JSON) 
        format, and puts them into the project in memory.
    */
    action LoadProperties(File file)
        JavaScriptObjectNotation notation
        text value = file:Read()
        JavaScriptObjectNotationObject json = notation:ReadToObject(value)
        //get all the properties from JSON
        i = 0
        repeat while i < json:GetSize()
            JavaScriptObjectNotationObject obj = json:Get(i)
            ProcessKey(obj)
            i = i + 1
        end
    end

    private action ProcessKey(JavaScriptObjectNotationObject object)
        text key = object:GetKey()
        text textMessage = "Could not load property " + key + ", as its value was not of type text."
        text booleanMessage = "Could not load property " + key + ", as its value was not of type boolean."
        if key = parent:Libraries.Development.Environment.Projects.Project:PROJECT_NAME
            if not object:IsText()
                logger:Log(textMessage)
                return now
            end
            AddProperty(key, object:GetText())
        elseif key = parent:Libraries.Development.Environment.Projects.Project:DEVELOPMENT_ENVIRONMENT_VERSION
            if not object:IsText()
                logger:Log(textMessage)
                return now
            end
            AddProperty(key, object:GetText())
        elseif key = PROJECT_TYPE
            if not object:IsText()
                logger:Log(textMessage)
                return now
            end

            text type = object:GetText()
            if not IsValidProjectType(type)
                logger:Log("A project type of " + type + " is listed in the project properties file, but this is invalid.")
                return now
            end

            AddProperty(key, object:GetText())
        elseif key = EXECUTABLE_NAME
            if not object:IsText()
                logger:Log(textMessage)
                return now
            end
            AddProperty(key, object:GetText())
        elseif key = PROJECT_MAIN
            if not object:IsText()
                logger:Log(textMessage)
                return now
            end
            AddProperty(key, object:GetText())
            //setup the compiler to use the file
            File location = GetLocation()
            ProjectProperty mainProperty = GetProperty(PROJECT_MAIN)
            mainFile:SetWorkingDirectory(location:GetAbsolutePath())
            mainFile:SetPath(mainProperty:GetFirstValue())
//            compiler:SetMain(mainFile)
        elseif key = JAR_DEPENDENCIES
            AddMultivalueTextProperty(object)
        elseif key = JAVASCRIPT_DEPENDENCIES
            AddMultivalueTextProperty(object)
        elseif key = JAVA_CLASS_DEPENDENCIES
            AddMultivalueTextProperty(object)
        elseif key = IMAGE_SHEETS
            CreateImageSheets(object)
        elseif key = IMAGE_SHEET_ENABLED
            if not object:IsBoolean()
                logger:Log(booleanMessage)
                return now
            end
            AddProperty(key, "" + object:GetBoolean())
        elseif key = IMAGE_SHEET_REBUILD_ON_COMPILE
            if not object:IsBoolean()
                logger:Log(booleanMessage)
                return now
            end
            AddProperty(key, "" + object:GetBoolean())
        elseif key = IMAGE_SHEET_BUILD_PATH
            if not object:IsText()
                logger:Log(textMessage)
                return now
            end
            AddProperty(key, object:GetText())
        elseif key = MOBILE_ASSETS
            if not object:IsText()
                logger:Log(textMessage)
                return now
            end
            AddProperty(key, object:GetText())
        elseif key = IPHONE_PROVISIONING_KEY
            if not object:IsText()
                logger:Log(textMessage)
                return now
            end
            AddProperty(key, object:GetText())
        elseif key = IPHONE_SIGNING_IDENTITY
            if not object:IsText()
                logger:Log(textMessage)
                return now
            end
            AddProperty(key, object:GetText())
        end
    end

    private action CreateImageSheets(JavaScriptObjectNotationObject object)
        ImageSheets sheets
        me:sheets = sheets
        
        if object:IsEmpty()
            logger:Log("An Image Sheet is specified in the project properties file, but is empty.")
            return now
        end
        //there should be one object in this, which contains the image sheet arrays
        JavaScriptObjectNotationObject value = object:Get(0)
        if value:IsEmpty()
            logger:Log("An Image Sheet is specified in the project properties file, but is empty.")
            return now
        end

        i = 0
        
        repeat while i < value:GetSize()
            JavaScriptObjectNotationObject sheetJSON = value:Get(i)
            if not sheetJSON:IsArray()
                logger:Log("An Image Sheet named " + sheetJSON:GetKey() +" is specified in the project properties file, but it is not an array.")
                return now
            end
            text name = sheetJSON:GetKey()

            ImageSheet sheet
            sheet:SetName(name)
            Array<text> values
            j = 0
            repeat while j < sheetJSON:GetSize()
                JavaScriptObjectNotationObject image = sheetJSON:Get(j)
                if not image:IsText()
                    logger:Log("An Image Sheet named " + sheetJSON:GetKey() +" is specified in the project properties file, it references images that are not specified in text")
                    return now
                end
                text location = image:GetText()
                values:Add(location)
                j = j + 1
            end
            sheet:SetValues(values)
            sheets:Add(sheet)
            i = i + 1
        end
    end

    private action AddMultivalueTextProperty(JavaScriptObjectNotationObject object)
        text key = object:GetKey()
        Array<text> dependencies
        if not object:IsArray()
            logger:Log("Could not load property " + key + ", as its value was not of type array.")
            return now
        end

        i = 0
        repeat while i < object:GetSize()
            JavaScriptObjectNotationObject value = object:Get(i)
            if not value:IsText()
                logger:Log("Could not load property " + key + ", as its value was not of type text.")
                return now
            end

            text dependency = value:GetText()
            dependencies:Add(dependency)
            i = i + 1
        end
        AddProperty(key, dependencies)
    end
    /*
        This value returns true if the project type in the properties 
        file is a valid type.
    */
    private action IsValidProjectType(text type) returns boolean
        if type = JAVA_COMPILE_TYPE or
           type = JAVASCRIPT_COMPILE_TYPE or 
           type = SERVER_COMPILE_TYPE or
           type = LEGO_COMPILE_TYPE or
           type = IPHONE_COMPILE_TYPE or
           type = ANDROID_COMPILE_TYPE 
           return true
        end

        return false
    end
    /*
        This action saves the project properties to disk. If a file already 
        exists for this project, the system overrides it.
    */
    action SaveProperties(File file)
        text result = ""
        text dq = result:GetDoubleQuote()
        text line = result:GetCarriageReturn()
        result = "{" + line
        text space = "    "

        //first get all the properties, sort them
        //and translate them to JSON
        Iterator<ProjectProperty> iterator = GetProperties(true)
        repeat while iterator:HasNext()
            ProjectProperty property = iterator:Next()
            result = result + space + dq + property:GetKey() + dq + ": "
            if property:GetSize() = 1
                text next = property:GetFirstValue()
                if next = "true" or next = "false"
                    result = result + next
                else 
                    result = result + dq + next + dq
                end
            else
                i = 0
                text array = "["
                repeat while i < property:GetSize()
                    text value = property:Get(i)
                    array = array + dq + value + dq
                    if i not= property:GetSize() - 1
                        array = array + ", "
                    end
                    i = i + 1
                end
                array = array + "]"
                result = result + array
            end

            if iterator:HasNext()
                result = result + ","
            end

            if not iterator:HasNext() and not sheets:IsEmpty()
                result = result + ","
            end
            result = result + line
        end

        if not sheets:IsEmpty()
            text sheetText = space + dq + IMAGE_SHEETS + dq + ": {" + line
            //now add the image sheets
            Iterator<ImageSheet> sheeterator = sheets:GetSheets(true):GetIterator()
            repeat while sheeterator:HasNext()
                ImageSheet sheet = sheeterator:Next()
                text name = sheet:GetName()
                sheetText = sheetText + space + space + dq + name + dq + ": ["
                Iterator<text> imagesIterator = sheet:GetValues()
                repeat while imagesIterator:HasNext()
                    text image = imagesIterator:Next()
                    sheetText = sheetText + dq + image + dq
                    if imagesIterator:HasNext()
                        sheetText = sheetText + ","
                    end
                end
                sheetText = sheetText + "]"
                if sheeterator:HasNext()
                    sheetText = sheetText + ","
                end
                sheetText = sheetText + line
            end
            sheetText = sheetText + space + "}" + line

            result = result + sheetText + "}"
        else 
            result = result + "}"
        end
        
        file:Write(result)
    end
end