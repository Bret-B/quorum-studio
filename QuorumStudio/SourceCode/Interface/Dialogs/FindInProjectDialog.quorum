package Libraries.Development.Environment.Studio.Interface

use Libraries.Interface.Controls.Dialog
use Libraries.Game.Graphics.Label
use Libraries.Interface.Controls.TextField
use Libraries.Interface.Controls.Checkbox
use Libraries.Development.Environment.Studio.Behaviors.Behaviors
use Libraries.Concurrency.ThreadRunner
use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Development.Environment.Studio.Behaviors.DialogCancelBehavior
use Libraries.Development.Environment.Studio.Behaviors.FindInProjectBehavior
use Libraries.Interface.Options.InterfaceOptions
use Libraries.Game.GameStateManager
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Interface.Forms.Grouping
use Libraries.Interface.Controls.Button
use Libraries.Interface.Selections.TreeSelection
use Libraries.Interface.Controls.TreeItem
use Libraries.Development.Environment.Projects.ProjectTreeItem
use Libraries.Containers.Iterator
use Libraries.Interface.Pages.StackedRowPage
use Libraries.Interface.Forms.Banner

class FindInProjectDialog is Dialog
    boolean initialized = false
    Label folderField
    TextField queryField
    Checkbox matchCaseCheckbox
    Checkbox wholeWordCheckbox
    Array<File> searchFiles
    Behaviors behaviors = undefined
    SearchResultsTab tab = undefined
    ThreadRunner runner
    DialogCancelBehavior cancelBehavior
    FindInProjectBehavior findBehavior
    InterfaceOptions options

    on create
        GameStateManager gameManager
        QuorumStudio studio = cast(QuorumStudio, gameManager:GetGame())
        behaviors = studio:GetBehaviors()
        searchFiles:Empty()
        findBehavior:SetDialog(me)
        findBehavior:SetThread(runner)
        cancelBehavior:SetDialog(me)
        SetBehavior(findBehavior)
        parent:Item:visible = false
    end

    action IsInitialized returns boolean
        return initialized
    end

    action OnShow()
        if tab not= undefined
            queryField:SetText(tab:GetQuery())
            queryField:SetCaretPosition(queryField:GetText():GetSize())
        end
        queryField:Focus()
    end

    action Initialize
        if IsShowing()
            return now
        end

        initialized = true

        SetName("Find In Project")
        SetPixelWidth(400)
        SetVerticalLayoutMode(parent:Libraries.Interface.Controls.Control:FIT_CONTENTS)
        LoadDialogPage()
    end

    action LoadDialogPage
        StackedRowPage page 
        page:SetPixelHeight(400) //for testing, remove after fixes
        Banner banner = page:AddBanner("Find In Project", 
            "Find items within a folder")
        banner:PositionFromTop()

        //add radio buttons
        page:AddLabel("Contains Text")
        queryField = page:AddTextField("Query Text Field")

        page:AddLabel("Settings")
        Grouping settings = page:AddGrouping("Settings")
        wholeWordCheckbox = settings:AddCheckbox("Whole Word")
        matchCaseCheckbox = settings:AddCheckbox("Match Case")
        
        Grouping buttonGroup = page:AddGrouping("Confirm")
        Button cancelButton = buttonGroup:AddButton("Cancel")
        Button okayButton = buttonGroup:AddButton("Ok")
        buttonGroup:PositionFromBottom() 

        cancelButton:SetBehavior(cancelBehavior)
        okayButton:SetBehavior(findBehavior)

        Add(page)
    end

    action GetQuery returns text
        return queryField:GetText()
    end

    action GetSearchFiles returns Array<File>
        return searchFiles
    end

    action GetIsMatchCase returns boolean
        return matchCaseCheckbox:GetToggleState()
    end

    action GetIsWholeWord returns boolean
        return wholeWordCheckbox:GetToggleState()
    end

    action SetRootSelection(TreeSelection selection)
        TreeItem item = selection:GetTreeItem()     //gets the selected TreeItem
        if item not= undefined and item is ProjectTreeItem
            ProjectTreeItem treeItem = cast(ProjectTreeItem, item)
            if treeItem = undefined
                return now
            end
            File file = treeItem:GetFile()
            SetSearchFiles(file)
        end
    end

    /* recursive function to add all of the files to an array that are within the 
    currently selected folder and/or any of its subfolders */
    action SetSearchFiles(File file)
        if file:IsDirectory()
            Array<File> files = file:GetDirectoryListing()
            Iterator<File> it = files:GetIterator()
            
            repeat while it:HasNext()
                File f = it:Next()
                SetSearchFiles(f)
            end
        end
        if not(file:IsDirectory()) and file:GetFileExtension() = "quorum"
            searchFiles:Add(file)
        end
    end

    action SetFolderName(text name)
        folderField:SetText(name)
    end

    action SetSearchResultsTab (SearchResultsTab tab)
        me:tab = tab
    end

    action GetSearchResultsTab returns SearchResultsTab
        return tab
    end

    action Show
        parent:Dialog:Show()
    end

    action OnHide()
        searchFiles:Empty()
    end
end