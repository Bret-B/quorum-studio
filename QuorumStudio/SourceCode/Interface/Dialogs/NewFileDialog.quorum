package Libraries.Development.Environment.Studio.Interface

use Libraries.Interface.Controls.Dialog
use Libraries.Interface.Views.LabelBoxView
use Libraries.Game.Graphics.Color
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Game.Graphics.Label
use Libraries.Interface.Controls.TextField
use Libraries.Interface.Controls.Button
use Libraries.Interface.Controls.TabPane
use Libraries.Interface.Controls.Tab
use Libraries.Interface.Controls.ScrollPane
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.Interface.Controls.ButtonGroup
use Libraries.System.File
use Libraries.System.FileWriter
use Libraries.Interface.Controls.List
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Development.Environment.Studio.Behaviors.DialogCancelBehavior
use Libraries.Game.Graphics.Gradient
use Libraries.Development.Environment.Studio.Behaviors.NewFileOkBehavior
use Libraries.Development.Environment.Projects.ProjectManager
use Libraries.Development.Environment.Studio.Behaviors.OpenBrowseFoldersBehavior
use Libraries.Development.Environment.Projects.Project
use Libraries.Development.Environment.Projects.ProjectTreeItem
use Libraries.Development.Environment.Resources
use Libraries.Development.Environment.Studio.Behaviors.OpenTabBehavior
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Development.Environment.Projects.QuorumProjectView
use Libraries.Development.Environment.Projects.ProjectView
use Libraries.Interface.Controls.TreeItem
use Libraries.Development.Environment.Projects.ProjectTree
use Libraries.Containers.Array
use Libraries.Containers.Iterator
use Libraries.Game.GameStateManager
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Selections.TreeSelection
use Libraries.Containers.HashTable
use Libraries.Development.Environment.Studio.CodeEditorTabPane
use Libraries.Interface.Views.ControlShaderView
use Libraries.Interface.Options.InterfaceOptions


class NewFileDialog is Dialog

    boolean initialized = false 

    GameStateManager gameManager
    QuorumStudio studio = cast(QuorumStudio, gameManager:GetGame())
    text os = gameManager:GetOperatingSystem()
    // The current Quorum project that we're modifying the properties of.
    // Set during the SetProperties(QuorumProject) action.
    QuorumProject project = undefined   
    ProjectManager manager = undefined
    text projectName = ""
    
    //Variables for the NewFile Dialog
    TextField fileNameField
    TextField locationNameField
    Button browseButton
    Button okayButton
    Button cancelButton
    
    //Behaviors used by the Browse, Ok, and Cancel Buttons
    DialogCancelBehavior cancelBehavior
    NewFileOkBehavior okayBehavior
    OpenBrowseFoldersBehavior browseBehavior
    boolean isFolder = false

    on create
        cancelBehavior:SetDialog(me)
        okayBehavior:SetDialog(me)
        browseBehavior:SetDialog(me) 
        SetBehavior(okayBehavior)

        fileNameField:SetName("Name")
        locationNameField:SetName("Location")
    end

    action Initialize

        initialized = true

        if IsFolder()
            SetName("New Folder")
        else
            SetName("New File")
        end
        SetPixelWidth(400)
        SetVerticalLayoutMode(parent:Libraries.Interface.Controls.Control:FIT_CONTENTS)    

        ControlShaderView view
        view:Initialize()
        
        Control panel
        FlowLayout newFileLayout
        panel:SetLayout(newFileLayout)
        panel:SetPercentageWidth(1.0)
        panel:SetPixelHeight(110)
        panel:SetInterfaceOptionsKey("Dialog")
        panel:SetBorderThickness(1)
        panel:Add(CreateNewFileControl())
        panel:SetView2D(view)
        Add(panel)
    end

    //sets the folderNameField in the dialog to the default filepath for the
    //project (e.g. GameApplication/SourceCode)
    action SetProperties(QuorumProject project, text displayText)//TreeSelection selection)
        me:project = project
        projectName = project:GetName()
        if displayText = "" 
            if os:Contains("OS X")
                displayText = project:PROJECT_SOURCES + "/"
            else
                displayText = project:PROJECT_SOURCES + "\"
            end
        end
        locationNameField:SetText(displayText)
    end

    action IsInitialized returns boolean
        return initialized
    end

    action CreateNewFileControl() returns Control
        Color color
        Control createNewFileContainer
        FlowLayout createNewFileLayout
        createNewFileContainer:SetLayout(createNewFileLayout)
        createNewFileContainer:SetBorderThickness(1)
        createNewFileContainer:SetBorderColor(color:Black())
        createNewFileContainer:SetPercentageWidth(1.0)   
        createNewFileContainer:SetVerticalLayoutMode(createNewFileContainer:FIT_CONTENTS)

        FlowLayout fileLayout
        Control fileContainer
        fileContainer:SetLayout(fileLayout)
        fileContainer:SetPercentageWidth(1.0)
        fileContainer:SetVerticalLayoutMode(fileContainer:FIT_CONTENTS)
        fileContainer:SetLeftMargin(10)
        fileContainer:SetRightMargin(40)
        fileContainer:SetTopMargin(20)
        
        Label fileName
        fileName:SetText("Name:")
        fileName:SetRightMargin(37)   //when zooming the padding does not adjust correctly 
        fileContainer:Add(fileName)
        
        fileNameField:SetHorizontalLayoutMode(fileNameField:parent:Libraries.Interface.Controls.Control:FILL)
        if IsFolder()
            fileNameField:SetName("New Folder Name")
        else
            fileNameField:SetName("New File Name")
        end
        
        fileNameField:SetText("")
        fileNameField:SetFocusable(true)
        fileNameField:SetNextFocus(locationNameField)
        fileNameField:SetPreviousFocus(okayButton)
        fileContainer:Add(fileNameField)

        createNewFileContainer:Add(fileContainer)

        FlowLayout locationLayout
        Control locationContainer
        locationContainer:SetLayout(locationLayout)
        locationContainer:SetPercentageWidth(1.0)
        locationContainer:SetVerticalLayoutMode(locationContainer:FIT_CONTENTS)
        locationContainer:SetLeftMargin(10)
        locationContainer:SetTopMargin(10)
        locationContainer:SetRightMargin(10)

        Label locationName
        locationName:SetText("Location:")
        locationName:SetRightMargin(6)
        locationContainer:Add(locationName)
     
        locationNameField:SetPercentageWidth(0.6)
        locationNameField:SetName("Location")
        locationNameField:SetFocusable(true)
        locationNameField:SetNextFocus(browseButton)
        locationNameField:SetPreviousFocus(fileNameField)
        locationContainer:Add(locationNameField)

        browseButton:SetName("Browse...")
        browseButton:SetHorizontalLayoutMode(browseButton:parent:Libraries.Interface.Controls.Control:STANDARD)
        browseButton:SetPercentageWidth(0.2)
        browseButton:SetLeftMargin(6)
        browseButton:SetBottomMargin(6)
        browseButton:SetFocusable(true)
        browseButton:SetNextFocus(cancelButton)
        browseButton:SetPreviousFocus(locationNameField)
        browseButton:SetBehavior(browseBehavior)
        locationContainer:Add(browseButton)
        
        createNewFileContainer:Add(locationContainer)

        FlowLayout closingButtonsLayout
        Control closingButtonsContainer
        closingButtonsContainer:SetLayout(closingButtonsLayout)
        closingButtonsContainer:SetPercentageWidth(1.0)
        closingButtonsContainer:SetVerticalLayoutMode(closingButtonsContainer:FIT_CONTENTS)
        closingButtonsContainer:SetTopMargin(20)
        
        Control closingMargin
        closingMargin:SetPercentageWidth(0.54)
        closingMargin:SetPixelHeight(1)
        closingButtonsContainer:Add(closingMargin)

        cancelButton:SetName("Cancel")
        cancelButton:SetHorizontalLayoutMode(cancelButton:parent:Libraries.Interface.Controls.Control:STANDARD)
        cancelButton:SetPercentageWidth(0.2)
        cancelButton:SetLeftMargin(0)
        cancelButton:SetTopMargin(0)
        cancelButton:SetFocusable(true)
        cancelButton:SetNextFocus(okayButton)
        cancelButton:SetPreviousFocus(browseButton)
        cancelButton:SetBehavior(cancelBehavior)
        closingButtonsContainer:Add(cancelButton)

        Gradient okayGradient
        Color gradientTop = color:CustomColor(0.85, 0.85, 1, 1)
        Color gradientBottom = color:CustomColor(0.75, 0.75, 0.9, 1)
        okayGradient:Set(gradientBottom, gradientBottom, gradientTop, gradientTop)

        okayButton:SetName("OK")
        okayButton:SetHorizontalLayoutMode(okayButton:parent:Libraries.Interface.Controls.Control:STANDARD)
        InterfaceOptions options
        okayButton:SetInterfaceOptionsKey(options:DIALOG_ACCEPT_BUTTON)
        okayButton:SetPercentageWidth(0.2)
        okayButton:SetLeftMargin(10)
        okayButton:SetTopMargin(0)
        okayButton:SetFocusable(true)
        okayButton:SetNextFocus(fileNameField)
        okayButton:SetPreviousFocus(cancelButton)
        okayButton:SetBehavior(okayBehavior)
        closingButtonsContainer:Add(okayButton)

        createNewFileContainer:Add(closingButtonsContainer)

        return createNewFileContainer
    end
    
    //returns the current QuorumProject that the NewFile is being added to
    //used by the OpenBrowseFoldersBehavior
    action GetProject returns QuorumProject
        return me:project
    end

    //updates the locationNameField to the file path that the new file will be added to
    //(e.g. GameApplication/SourceCode to GameApplication/SourceCode/images)
    //used by the OpenBrowseFoldersBehavior
    action UpdateFolderName(text folderName)
        locationNameField:Empty()
        locationNameField:SetText(folderName)    
    end

    /* 
    Creates the new file using the file path from the locationNameField in the
    dialog. if the locationNameField is the same as the project name, then the 
    new file is by default added to the SourceCode folder
    */
    action CreateNewFile()
        File file
        File value = project:GetLocation()
        text path = value:GetAbsolutePath():Trim()

        /* If the project itself is selected  when creating a new file, then the default 
        folder for adding new files is the source code folder, else add the new file to 
        the currently selected folder */
        if project:GetName():Equals(locationNameField:GetText():Trim())
            if os:Contains("OS X")
                path = path + "/" + project:PROJECT_SOURCES + "/" + fileNameField:GetText():Trim()
            else
                path = path + "\" + project:PROJECT_SOURCES + "\" + fileNameField:GetText():Trim()
            end
        else
            if os:Contains("OS X")
                path = path + "/" +  locationNameField:GetText():Trim() + fileNameField:GetText():Trim()
            else
                path = path + "\" +  locationNameField:GetText():Trim() + fileNameField:GetText():Trim()
            end
        end
        
        file:SetAbsolutePath(path)
        
        

        if IsFolder()
            if not file:Exists()
                file:CreateDirectories()
            end
            AppendToProjectTree(file) 
        else
            if file:GetFileExtension() = ""
                file:SetAbsolutePath(path + ".quorum")
            end

            File mom = file:GetParentDirectory()
            if mom:IsFile()
                return now
            end
            if not mom:Exists()
                mom:CreateDirectories()
            end
    
            file:Write("")
            file:Close()
            AppendToProjectTree(file)  
        end
              
    end

    action AppendToProjectTree(File file) 
        QuorumProjectView projectView = cast(QuorumProjectView, project:GetProjectView())
        TreeItem treeItem = projectView:GetLogicalTree()
        CodeEditorTabPane tabPane = studio:GetTabPane()

        ProjectTree projectTree = studio:GetProjectTree()
        Iterator<TreeItem> items = projectTree:GetTreeItems()

        boolean found = false
        ProjectTreeItem oldProjectHeader = undefined

        integer counter = 0
        repeat while items:HasNext() and found = false
            oldProjectHeader = cast(ProjectTreeItem, items:Next())
            if oldProjectHeader:GetProject() = project
                found = true
            else
                counter = counter + 1
            end      
        end

        if found = false
            return now
        end

        HashTable<text, text> expand = projectTree:GetExpandState()
        projectTree:Remove(cast(TreeItem, oldProjectHeader))
        projectTree:Add(counter, treeItem)
        
        projectTree:LoadExpandState(expand)
        if not IsFolder()
            Tab tab = tabPane:OpenNewTab(file)
            tabPane:Select(tab)
        end
    end

    action GetFileName returns text
        return fileNameField:GetText()
    end

    action ActivateCancelButton()
        cancelButton:Activate()
    end

    action OnHide
        fileNameField:Empty()
        locationNameField:Empty()
        projectName = ""
        project = undefined
        manager = undefined
    end

    action OnShow
        fileNameField:Focus()
    end

    action IsFolder returns boolean
        return isFolder
    end

    action SetIsFolder(boolean isFolder)
        me:isFolder = isFolder
    end
end