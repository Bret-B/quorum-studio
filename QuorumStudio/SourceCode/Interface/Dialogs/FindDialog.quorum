package Libraries.Development.Environment.Studio.Interface

use Libraries.Interface.Controls.Dialog
use Libraries.Interface.Controls.TextField
use Libraries.Interface.Controls.Checkbox
use Libraries.Interface.Controls.Button
use Libraries.Interface.Views.LabelBoxView
use Libraries.Game.Graphics.Color
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Game.Graphics.Label
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Events.TextChangeListener
use Libraries.Interface.Selections.TextBoxSelection
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Containers.Array
use Libraries.Containers.MultipleLineText
use Libraries.Interface.Controls.TextStyles.TextStyle
use Libraries.Containers.Support.Pair
use Libraries.Interface.Controls.TextStyles.ColoredHighlight
use Libraries.Development.Environment.Studio.Behaviors.WholeWordMatchCaseBehavior
use Libraries.Game.GameStateManager
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Containers.Iterator
use Libraries.Development.Environment.Studio.Behaviors.NextBehavior
use Libraries.Development.Environment.Studio.Behaviors.PreviousBehavior
use Libraries.Development.Environment.Studio.Behaviors.FindBehavior
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Game.InputTable
use Libraries.Game.InputSet
use Libraries.Interface.Events.SelectionListener
use Libraries.Interface.Events.SelectionEvent
use Libraries.Interface.Selections.TabPaneSelection
use Libraries.Interface.Controls.Tab
use Libraries.Interface.Controls.TextBox
use Libraries.Development.Environment.Studio.CodeEditorTabPane
use Libraries.Interface.Undo.TextBoxEditState
use Libraries.Interface.Undo.TextBoxEdit
use Libraries.Interface.Views.ControlShaderView
use Libraries.Interface.Controls.Blocks.CodeEditor
use Libraries.Interface.Forms.Grouping
use Libraries.Interface.Pages.StackedRowPage
use Libraries.Interface.Forms.Banner

class FindDialog is Dialog, TextChangeListener, SelectionListener
    boolean initialized = false
    boolean showing = false
    boolean textChangeListenerOn = true

    GameStateManager gameManager
    QuorumStudio studio = cast(QuorumStudio, gameManager:GetGame())
    CodeEditorTabPane tabPane = studio:GetTabPane()

    // The TextBox that we're searching through.
    CodeTextBox textBox = undefined
    CodeEditor editor = undefined

    //FindDialog Controls
    TextField findField = undefined
    Label matches = undefined
    Checkbox wholeWord = undefined
    Checkbox matchCase = undefined
    Button previous = undefined
    Button next = undefined
    Button findButton

    //FindDialog Control Behaviors
    WholeWordMatchCaseBehavior wholeWordMatchCaseBehavior
    FindBehavior findBehavior   
    NextBehavior nextBehavior
    PreviousBehavior previousBehavior

    on create
        wholeWordMatchCaseBehavior:SetDialog(me)
        tabPane:AddSelectionListener(me)
        findBehavior:SetDialog(me)
        SetModal(false)
        SetBehavior(nextBehavior)
    end

    action OnShow()  
        showing = true
        findField:Focus()
        
        if textBox not= undefined
            wholeWord:SetToggleState(textBox:GetIsWholeWord())
            matchCase:SetToggleState(textBox:GetIsMatchCase())
            if (textBox:HasSelection())
                findField:SetText(textBox:GetFindSelection())
                findField:SetCaretPosition(findField:GetSize())
                textBox:SetCaretPosition(textBox:GetCaretPosition() - findField:GetSize())
            else
                findField:SetText(textBox:GetFindWord())
                findField:SetCaretPosition(findField:GetSize())
            end
            textBox:SetIsDialogOpen(true)
        elseif editor not= undefined
            
        end

        if findField:GetText() not= ""
            findButton:Activate()
        end

        //Should be "ALT + N" (until ALT key works correctly using the same hotkey as the CodeTextBox)
        KeyboardEvent keys
        text inputGroup = GetInputGroup()
        InputTable dialogInputs = studio:GetInputTable(inputGroup)
        InputSet nextSet 
        nextSet:SetKeyboardInput(keys:F3)
        dialogInputs:Add(nextSet, nextBehavior)
        //Should be "ALT + P" (until ALT key works correctly using the same hotkey as the CodeTextBox)
        InputSet previousSet
        previousSet:SetKeyboardInput(keys:F3)
        previousSet:AddModifier(previousSet:SHIFT)
        dialogInputs:Add(previousSet, previousBehavior)

        // Highlight the existing text so the user can easily replace it.
        findField:Select(0, findField:GetSize())
    end

    action Initialize
        initialized = true
        SetPercentageWidth(0.25)
        SetPercentageHeight(0.4)

        SetName("Find")
        SetVerticalLayoutMode(parent:Control:FILL)

        ControlShaderView view
        view:Initialize()
        Add(CreateFindControl())
    end

    private action CreateFindControl returns Control
        StackedRowPage page
        
        findField = page:AddTextField("Find Field")
        findField:AddTextChangeListener(me)
        findButton:SetBehavior(findBehavior)
        
        Grouping options = page:AddGrouping("Checkbox Options")
        wholeWord = options:AddCheckbox("Whole")
        matchCase = options:AddCheckbox("Match")
        wholeWord:SetLayoutRows(1)
        matchCase:SetLayoutRows(1)

        wholeWord:SetBehavior(wholeWordMatchCaseBehavior)
        matchCase:SetBehavior(wholeWordMatchCaseBehavior)

        Banner banner = page:AddBanner("Matches")
        matches = banner:GetTitleLabel()

        Grouping buttonGroup = page:AddGrouping("Confirm")
        previous = buttonGroup:AddButton("Previous")
        next = buttonGroup:AddButton("Next")
        buttonGroup:PositionFromBottom() 

        previous:SetBehavior(previousBehavior)
        next:SetBehavior(nextBehavior) 

        return page
    end

    private action CreateMatchesControl returns Control
        FlowLayout matchesLayout
        Control matchesContainer
        matchesContainer:SetLayout(matchesLayout)
        matchesContainer:SetPercentageWidth(1.0)
        matchesContainer:SetVerticalLayoutMode(matchesContainer:FIT_CONTENTS)
        matchesContainer:SetTopMargin(50)
        matchesContainer:SetRightMargin(10)
        matchesContainer:SetLeftMargin(20)

        Label label
        label:SetText("")
        label:SetHorizontalLayoutMode(label:parent:Libraries.Interface.Controls.Control:FIT_CONTENTS)
        label:SetPercentageWidth(0.2)
        label:SetPixelHeight(20)
        label:SetLeftMargin(6)
        label:SetRightMargin(30)
        matchesContainer:Add(label)
        SetMatchesLabel(label)
        return matchesContainer
        
    end

    action IsInitialized returns boolean
        return initialized
    end

    action Show
        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetPercentageX(0)
        properties:SetPercentageY(0)
        properties:SetPercentageOriginX(1)
        properties:SetPercentageOriginY(1)
        number globalX = 0
        number globalY = 0
        number width = 0
        number height = 0
        if textBox not= undefined
            globalX = textBox:GetGlobalX() + textBox:GetWidth()
            globalY = textBox:GetGlobalY() + textBox:GetHeight()
            width = textBox:GetWidth()
            height = textBox:GetHeight()
        elseif editor not= undefined
            globalX = editor:GetGlobalX() + editor:GetWidth()
            globalY = editor:GetGlobalY() + editor:GetHeight()
            width = editor:GetWidth()
            height = editor:GetHeight()
        end 

        //scaled buffer
        globalX = globalX - (width * 0.02)
        globalY = globalY - (height * 0.02)
        properties:SetPixelX(globalX)//textBox:GetGlobalX() + textBox:GetWidth() - 20)
        properties:SetPixelY(globalY)//textBox:GetGlobalY() + textBox:GetHeight() - 39)
        parent:Dialog:Show()
    end

    action GetCodeEditor returns CodeEditor
        return editor
    end
    
    action SetCodeEditor(CodeEditor code)
        editor = code
        findBehavior:SetCodeEditor(editor)
        previous:SetBehavior(previousBehavior)
        next:SetBehavior(nextBehavior)   
        wholeWordMatchCaseBehavior:SetCodeEditor(editor) 
    end

    action SetTextBox(CodeTextBox code)
        textBox = code
        textBox:AddTextChangeListener(me)
        //This is the original textbox state, need to use the textChangeListener to determine if there is a textChange which will 
        //invoke a new textBox state which when typing in the text box pauses will be used to "Find" the query again using the new caret position
        //where the edit takes place
        TextBoxEdit edit
        edit:SetTextBox(textBox)
        TextBoxEditState state = textBox:GetCurrentEditState()
        edit:SetUndoState(state)

        findBehavior:SetTextBox(textBox)
        textBox:SetDialog(me)
        textBox:SetIsDialogOpen(true)
        wholeWordMatchCaseBehavior:SetTextBox(textBox)
    end

    action GetTextBox returns CodeTextBox
        return textBox
    end

    action SetFindField(TextField textField)
        findField = textField
    end

    action SetMatchCase(Checkbox checkbox)
        matchCase = checkbox
    end

    action SetWholeWord(Checkbox checkbox)
        wholeWord = checkbox
    end

    action SetNextButton(Button button)
        next = button
    end

    action SetPreviousButton(Button button)
        previous = button
    end

    action GetFindWord() returns text
        return findField:GetText()
    end

    action GetIsMatchCase returns boolean
        return matchCase:GetToggleState()
    end

    action GetIsWholeWord returns boolean
        return wholeWord:GetToggleState()
    end

    action SetTextChangeListenerOn(boolean state)
        textChangeListenerOn = state
    end

    action GetTextChangeListenerOn returns boolean
        return textChangeListenerOn
    end

    action SetMatchesLabel(Label label)
        matches = label
    end

    action GetMatchesLabel returns Label
        return matches
    end

    action ResetFindFocus
        findField:Focus()
        findField:Select(0, findField:GetSize())
    end

    //Updates the matches label on the Dialog to reflect how many instances of 
    //"find" were found in the textBox. If there is a currentSelection it will also 
    //display the selection number in relation to the number of total matches found.
    action UpdateMatches(integer currentSelection, integer totalMatches)
        //if findField:GetText() not= ""
            if totalMatches = 0
                matches:SetText("No matches")
            elseif totalMatches = 1
                matches:SetText(cast(text, totalMatches) + " match")
            else
                if currentSelection >= 0
                    matches:SetText(cast(text, (currentSelection + 1)) + " of " + cast(text, totalMatches) + " matches")
                else
                    matches:SetText(cast(text, totalMatches) + " matches")
                end
            end
        //else 
            //matches:SetText("") 
        //end
    end

    //repopulates the highlighting for any remaining instances that were not replaced by calling FindText (not currently working)
    action UpdateTextBox()
        findButton:Activate()
    end

    //Listens for text change within the findField and text change events in the 
    //current textBox that is being searched. Calls to update the selections if
    //there is a text change event that occurs in either field.
    action TextChanged(TextChangeEvent event)
        text find = ""
        if event:GetControl():Equals(cast(Object, findField))
            find = findField:GetText()
            if event:GetEventType() = event:ADDED
                if find not= ""
                    findButton:Activate()
                end
            elseif event:GetEventType() = event:DELETED
                findButton:Activate()
            elseif event:GetEventType() = event:MODIFIED
                if find not= ""
                    findButton:Activate()
                end
            end
        end

        if textBox not= undefined
            if event:GetControl():Equals(cast(Object, textBox)) 
                if textChangeListenerOn
                    //determine if findWord is in the added or removed text before updating the textbox.
                    //integer startIndex = event:GetIndex() //index where the text change event is occurring, can be used to check this changed text area in the textbox before updating the textbox
                    if event:GetEventType() = event:ADDED
                        //text addedText = event:GetAddedText()
                        UpdateTextBox()
                    elseif event:GetEventType() = event:DELETED
                        //text deletedText = event:GetDeletedText()
                        UpdateTextBox()
                    elseif event:GetEventType() = event:MODIFIED   
                        UpdateTextBox()
                    end
                end
            end
        end
    end

    action SelectionChanged(SelectionEvent event) 
        if showing
            TabPaneSelection selection = tabPane:GetSelection()
            Tab tab = selection:GetTab()
            if tab not= undefined and tab is EditorTab
                EditorTab t = cast(EditorTab, tab)
                TextBox box = t:GetTextBox()
                if box not= undefined
                    textBox:RemoveFindReplaceStyles()
                    SetTextBox(cast(CodeTextBox, box))
                    UpdateTextBox()
                end
            end
        end
    end

    /* Sets all Open CodeTextBox tabs findDialogIsOpen fields to false, so that when the
    find dialog is closed in a different tab than the one it was opened in, it will still show as
    closed in all of the CodeTextBox it was used in. */
    action CloseFindDialogs
        integer size = tabPane:GetSize()
        integer i = 0
        repeat while i < size
            Tab tab = tabPane:Get(i)
            if tab is EditorTab
                EditorTab t = cast(EditorTab, tab)
                TextBox textBox = t:GetTextBox()
                if textBox not= undefined
                    CodeTextBox c = cast(CodeTextBox, textBox)
                    c:SetFindWord(findField:GetText())
                    c:SetIsDialogOpen(false)
                    c:DialogClosed()
                end
            end
            i = i + 1
        end
    end

    //Removes any highlights in the textBox, empties the arrays and textFields and resets the selection index.
    action OnHide
        showing = false
        CloseFindDialogs()
        SetTextChangeListenerOn(false)
    end

end