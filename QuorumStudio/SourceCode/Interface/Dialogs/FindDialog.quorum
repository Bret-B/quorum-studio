package Libraries.Development.Environment.Studio.Interface

use Libraries.Interface.Controls.Dialog
use Libraries.Interface.Controls.TextField
use Libraries.Interface.Controls.Checkbox
use Libraries.Interface.Controls.Button
use Libraries.Interface.Views.LabelBoxView
use Libraries.Game.Graphics.Color
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Game.Graphics.Label
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Events.TextChangeListener
use Libraries.Interface.Selections.TextBoxSelection
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Containers.Array
use Libraries.Containers.MultipleLineText
use Libraries.Interface.Controls.TextStyles.TextStyle
use Libraries.Containers.Support.Pair
use Libraries.Interface.Controls.TextStyles.ColoredHighlight
use Libraries.Development.Environment.Studio.Behaviors.WholeWordMatchCaseBehavior
use Libraries.Game.GameStateManager
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Containers.Iterator
use Libraries.Development.Environment.Studio.Behaviors.NextBehavior
use Libraries.Development.Environment.Studio.Behaviors.PreviousBehavior

class FindDialog is Dialog, TextChangeListener
    boolean initialized = false
    //boolean textChangeListenerOn = true

    GameStateManager gameManager
    QuorumStudio studio = cast(QuorumStudio, gameManager:GetGame())

    // The TextBox that we're searching through.
    CodeTextBox textBox = undefined

    Array<Pair<integer>> indices
    Array<Pair<integer>> removeIndices
    integer selection = -1       //tracks which selection of the matches is currently selected
    integer beforeCaretCount = 0            //tracks how many matches are before the caret index in the textBox used for replaceAll to correctly adjust the offset
    integer afterCaretCount = 0             //tracks how many matches are after the caret index in the textBox used for replaceAll to correctly adjust the offset
    integer removeAfter = 0                 //tracks how many matches need to be removed after the caret index (in the case of modifications such as matchCase, wholeWord, text changes)
    integer removeBefore = 0                //tracks how many matches need to be removed before the caret index (in the case of modifications such as matchCase, wholeWord, text changes)
    

    text textValue = "" 

    //FindDialog Controls
    TextField findField
    Label matches
    Checkbox wholeWord
    Checkbox matchCase
    Button previous
    Button next  

    //FindDialog Control Behaviors
    WholeWordMatchCaseBehavior wholeWordMatchCaseBehavior
    PreviousBehavior previousBehavior
    NextBehavior nextBehavior
    

    on create
        findField:AddTextChangeListener(me)
        wholeWordMatchCaseBehavior:SetDialog(cast(Dialog, me))
        wholeWordMatchCaseBehavior:SetDialogType(wholeWordMatchCaseBehavior:FIND)
        previousBehavior:SetDialog(cast(Dialog, me))
        previousBehavior:SetDialogType(previousBehavior:FIND)
        nextBehavior:SetDialog(cast(Dialog, me))
        nextBehavior:SetDialogType(nextBehavior:FIND)
        SetModal(false)
        SetBehavior(nextBehavior)
    end

    action OnShow()
        findField:Focus()
    end

    action Initialize

        initialized = true

        SetName("Find")
        SetPixelWidth(300)
        SetVerticalLayoutMode(parent:Libraries.Interface.Controls.Control:FIT_CONTENTS)

        LabelBoxView view
        Color color
        view:SetBorderThickness(1)
        view:SetBorderStyle(view:ALL - view:TOP)
        view:Initialize(color:CustomColor(0.9, 0.9, 0.9, 1), color:Black())
        
        Control panel
        FlowLayout findLayout
        panel:SetLayout(findLayout)
        panel:SetPercentageWidth(1.0)
        panel:SetPixelHeight(140)
        panel:SetBorderColor(color:Black())
        panel:SetBorderThickness(1)
        panel:Add(CreateFindControl())
        panel:SetView2D(view)
        Add(panel)
    end

    private action CreateFindControl returns Control
        Color color
        Control createFindContainer
        FlowLayout createFindLayout
        createFindContainer:SetLayout(createFindLayout)
        createFindContainer:SetBorderThickness(1)
        createFindContainer:SetBorderColor(color:Black())
        createFindContainer:SetPercentageWidth(1.0)
        createFindContainer:SetVerticalLayoutMode(createFindContainer:FIT_CONTENTS)

        FlowLayout findLayout
        Control findContainer
        findContainer:SetLayout(findLayout)
        findContainer:SetPercentageWidth(1.0)
        findContainer:SetVerticalLayoutMode(findContainer:FIT_CONTENTS)
        findContainer:SetLeftPadding(20)
        findContainer:SetTopPadding(20)
        findContainer:SetRightPadding(30)

        Label findLabel
        findLabel:SetText("Find:")
        findLabel:SetRightPadding(10)
        findContainer:Add(findLabel)
        
        findField:SetHorizontalLayoutMode(findField:parent:Libraries.Interface.Controls.Control:FILL)
        findField:SetText("")
        findField:SetFocusable(true)
        findField:SetNextFocus(wholeWord)
        findField:SetPreviousFocus(next)
        findContainer:Add(findField)

        createFindContainer:Add(findContainer)

        FlowLayout optionsLayout
        Control optionsContainer
        optionsContainer:SetLayout(optionsLayout)
        optionsContainer:SetPercentageWidth(1.0)
        optionsContainer:SetHorizontalLayoutMode(optionsContainer:STANDARD)
        optionsContainer:SetVerticalLayoutMode(optionsContainer:FIT_CONTENTS)
        optionsContainer:SetLeftPadding(10)
        optionsContainer:SetRightPadding(10)
        optionsContainer:SetTopPadding(30)
        
        wholeWord:SetName("Whole Word")
        wholeWord:SetFontSize(14)
        wholeWord:SetLeftPadding(6)
        wholeWord:SetRightPadding(6)
        wholeWord:SetPercentageWidth(0.5)
        wholeWord:SetFocusable(true)
        wholeWord:SetNextFocus(matchCase)
        wholeWord:SetPreviousFocus(findField)
        wholeWord:SetBehavior(wholeWordMatchCaseBehavior)
        optionsContainer:Add(wholeWord)

        Control buttonsPadding
        buttonsPadding:SetPercentageWidth(0.15)
        buttonsPadding:SetPixelHeight(1)
        optionsContainer:Add(buttonsPadding)

        previous:SetName("Previous")
        previous:SetFontSize(14)
        previous:SetRightPadding(6)
        previous:SetLeftPadding(6)
        previous:SetHorizontalLayoutMode(previous:parent:Libraries.Interface.Controls.Control:STANDARD)
        previous:SetPercentageWidth(0.22)
        previous:SetFocusable(true)
        previous:SetNextFocus(next)
        previous:SetPreviousFocus(matchCase)
        previous:SetBehavior(previousBehavior)
        optionsContainer:Add(previous)
        
        next:SetName("Next")
        next:SetFontSize(14)
        next:SetRightPadding(6)
        next:SetLeftPadding(6)
        next:SetHorizontalLayoutMode(next:parent:Libraries.Interface.Controls.Control:STANDARD)
        next:SetPercentageWidth(0.22)
        next:SetFocusable(true)
        next:SetNextFocus(findField)
        next:SetPreviousFocus(previous)
        next:SetBehavior(nextBehavior)
        optionsContainer:Add(next)

        matchCase:SetName("Match Case")
        matchCase:SetFontSize(14)
        matchCase:SetLeftPadding(6)
        matchCase:SetPercentageWidth(0.5)
        matchCase:SetFocusable(true)
        matchCase:SetNextFocus(previous)
        matchCase:SetPreviousFocus(wholeWord)
        matchCase:SetBehavior(wholeWordMatchCaseBehavior)
        optionsContainer:Add(matchCase)

        createFindContainer:Add(optionsContainer)

        FlowLayout matchesLayout
        Control matchesContainer
        matchesContainer:SetLayout(matchesLayout)
        matchesContainer:SetPercentageWidth(1.0)
        matchesContainer:SetVerticalLayoutMode(matchesContainer:FIT_CONTENTS)
        matchesContainer:SetTopPadding(50)
        matchesContainer:SetRightPadding(10)
        matchesContainer:SetLeftPadding(20)

        matches:SetText("")
        matches:SetHorizontalLayoutMode(matches:parent:Libraries.Interface.Controls.Control:FIT_CONTENTS)
        matches:SetPercentageWidth(0.2)
        matches:SetPixelHeight(20)
        matches:SetLeftPadding(6)
        matches:SetRightPadding(30)
        matchesContainer:Add(matches)
        createFindContainer:Add(matchesContainer)
        
        return createFindContainer
    end


    action IsInitialized returns boolean
        return initialized
    end

    action Show
        if textBox not= undefined
            LayoutProperties properties = GetDefaultLayoutProperties()
            properties:SetPercentageX(0)
            properties:SetPercentageY(0)
            properties:SetPercentageOriginX(1)
            properties:SetPercentageOriginY(1)
            properties:SetPixelX(textBox:GetGlobalX() + textBox:GetWidth() - 20)
            properties:SetPixelY(textBox:GetGlobalY() + textBox:GetHeight() - 39)
        end

        parent:Dialog:Show()
    end

    action SetTextBox(CodeTextBox code)
        textBox = code
        textValue = textBox:GetText() + " "
        textBox:AddTextChangeListener(me)
    end

    action GetTextBox returns CodeTextBox
        return textBox
    end

    action GetFind returns text
        return findField:GetText()
    end
    
   //finds all instances of "find" within the textBox and stores the start and 
    //end index for each instance in the Array indices.
    //The indices array is sorted based on the caret position in the textBox to make it easier to iterate through the currentSelection when using the
    //next and previous buttons.
    //If MatchCase is selected, calls MatchCaseFindText() to eliminate any Pair of indices that does not meet the MatchCase criteria.
    //If WholeWord is selected, calls WholeWordFindText() to eliminate any Pair of indices that does not meet the WholeWord criteria.
    //Calls UpdateSelections() to update the highlighted instances in the textBox.
    action FindText(text find)
        //textChangeListenerOn = true
        integer caretIndex = textBox:GetCaretPosition()
        afterCaretCount = 0
        beforeCaretCount = 0
        removeBefore = 0
        removeAfter = 0
        //if there is a currentSelection it needs to be removed and selection reset
        if selection >= 0
            RemoveCurrentSelection()
        end
        integer findIndex = 0
        integer findSize = find:GetSize()       //size of the word we are searching for
        integer endIndex = textValue:GetSize() - 1
        
        if find not= ""
            removeIndices = indices:CopyToArray()       //remove any previously highlighted instances of find 
            indices:Empty()

            if removeIndices:GetSize() not= 0 
                RemoveSelections()
            end

            if textValue:GetSize() not= 0           //indices array starts with the first instance of the word after the caret 
                if caretIndex >= 0
                    findIndex = caretIndex - (findSize - 1)
                    if findIndex >= 0
                        repeat while (findIndex < caretIndex)  and ((findIndex + findSize) < endIndex)      //checks to see if the caret was positioned within the first instance of the find word. If the caret is in the middle of the find word the instance is added to the afterCaretCount
                            Pair<integer> index
                            if find:EqualsIgnoringCase(textValue:GetSubtext(findIndex, (findIndex + findSize)))
                                index:Set(findIndex, (findIndex + (findSize - 1)))
                                indices:Add(index)
                                afterCaretCount = afterCaretCount + 1
                                findIndex = findIndex + findSize
                            else
                                findIndex = findIndex + 1
                            end
                        end
                    end
                    findIndex = caretIndex
                    repeat while (findIndex >= 0) and ((findIndex + findSize) <= (endIndex + 1))
                        Pair<integer> index
                        if find:EqualsIgnoringCase(textValue:GetSubtext(findIndex, (findIndex + findSize)))
                            index:Set(findIndex, (findIndex + (findSize - 1)))
                            indices:Add(index)
                            afterCaretCount = afterCaretCount + 1
                            findIndex = findIndex + findSize
                        else
                            findIndex = findIndex + 1
                        end                   
                    end
                    findIndex = 0                   //loop back around to the beginning of the textBox to add any instances of the word that occur before the caret position in the textBox
                    repeat while (findIndex >= 0) and ((findIndex + findSize) <= caretIndex) 
                        Pair<integer> index
                        if find:EqualsIgnoringCase(textValue:GetSubtext(findIndex, (findIndex + findSize)))
                            index:Set(findIndex, (findIndex + (findSize - 1)))
                            indices:Add(index)
                            beforeCaretCount = beforeCaretCount + 1
                            findIndex = findIndex + findSize
                        else
                            findIndex = findIndex + 1
                        end                   
                    end
                end
            end

            if matchCase:GetToggleState()
                MatchCaseFindText(find)
            end

            if wholeWord:GetToggleState()
                WholeWordFindText(find)
            end

            UpdateSelections()
        end
    end


    //If there are any instances of find that do not meet the MatchCase criteria then
    //the Pair<startIndex, endIndex> are added to the removeIndices array 
    //tracks how many instances are added to the removeIndices array before the caretIndex and after the caretIndex
    private action MatchCaseFindText(text find)
        text subtext = ""
        integer startIndex = 0
        integer endIndex = 0
        
        integer i = 0
        repeat while i < afterCaretCount
            startIndex = indices:Get(i):GetFirstValue()
            endIndex = indices:Get(i):GetSecondValue()
            subtext = textValue:GetSubtext(startIndex, (endIndex + 1))
            if not find:Equals(subtext)                
                removeIndices:Add(indices:Get(i))  
                removeAfter = removeAfter + 1
            end           
            i = i + 1
        end
            
       integer j = 0
        repeat while j < beforeCaretCount
            startIndex = indices:Get(i):GetFirstValue()
            endIndex = indices:Get(i):GetSecondValue()
            subtext = textValue:GetSubtext(startIndex, (endIndex + 1))
            if not find:Equals(subtext)
                removeIndices:Add(indices:Get(i))
                removeBefore = removeBefore + 1
            end
            j = j + 1
            i = i + 1
        end
         
    end

    action GetCurrentWord() returns text
        return findField:GetText()
    end

    //If there are any instances of find that do not meet the WholeWord criteria then 
    //the Pair<startIndex, endIndex> are added to the removeIndices array
    //tracks how many instances are added to the removeIndices array before the caretIndex and after the caretIndex 
    private action WholeWordFindText(text find)
        text break = "
"
        integer startIndex = 0
        integer endIndex = 0
        integer previousIndex = 0
        integer nextIndex = 0
        text previousCharacter = ""
        text nextCharacter = ""
        
        integer i = 0
        repeat while i < afterCaretCount
            startIndex = indices:Get(i):GetFirstValue()
            endIndex = indices:Get(i):GetSecondValue()
            previousIndex = startIndex - 1
            nextIndex = endIndex + 1
            if previousIndex < 0
                previousCharacter = " "
            else
                previousCharacter = textValue:GetCharacter(previousIndex)
            end
            if nextIndex > textValue:GetSize() - 1
                nextCharacter = " "
            else
                nextCharacter = textValue:GetCharacter(nextIndex)
            end

            if not((previousCharacter = " ") or (previousCharacter = ".") or (previousCharacter = "/")
            or (previousCharacter = "*") or (previousCharacter = "(") or (previousCharacter = ")") or (previousCharacter = "+") 
            or (previousCharacter = "-") or (previousCharacter = ">") or (previousCharacter = "<") or (previousCharacter = "=") 
            or (previousCharacter = break) or (previousCharacter = ","))
                removeIndices:Add(indices:Get(i))
                removeAfter = removeAfter + 1
            elseif not ((nextCharacter = " ") or (nextCharacter = ".") or (nextCharacter = "/") 
            or (nextCharacter = "*") or (nextCharacter = "(") or (nextCharacter = ")") or (nextCharacter = "+") 
            or (nextCharacter = "-") or (nextCharacter = ">") or (nextCharacter = "<") or (nextCharacter = "=") 
            or (nextCharacter = break) or (nextCharacter = ","))
                removeIndices:Add(indices:Get(i))  
                removeAfter = removeAfter + 1
            end
            i = i + 1
        end

        integer j = 0
        repeat while j < beforeCaretCount
            startIndex = indices:Get(i):GetFirstValue()
            endIndex = indices:Get(i):GetSecondValue()
            previousIndex = startIndex - 1
            nextIndex = endIndex + 1
            if previousIndex < 0
                previousCharacter = " "
            else
                previousCharacter = textValue:GetCharacter(previousIndex)
            end
            if nextIndex > textValue:GetSize() - 1
                nextCharacter = " "
            else
                nextCharacter = textValue:GetCharacter(nextIndex)
            end
            
            if not((previousCharacter = " ") or (previousCharacter = ".") or (previousCharacter = "/")
            or (previousCharacter = "*") or (previousCharacter = "(") or (previousCharacter = ")") or (previousCharacter = "+") 
            or (previousCharacter = "-") or (previousCharacter = ">") or (previousCharacter = "<") or (previousCharacter = "=") 
            or (previousCharacter = break) or (previousCharacter = ","))
                removeIndices:Add(indices:Get(i))
                removeBefore = removeBefore + 1
            elseif not ((nextCharacter = " ") or (nextCharacter = ".") or (nextCharacter = "/") 
            or (nextCharacter = "*") or (nextCharacter = "(") or (nextCharacter = ")") or (nextCharacter = "+") 
            or (nextCharacter = "-") or (nextCharacter = ">") or (nextCharacter = "<") or (nextCharacter = "=") 
            or (nextCharacter = break) or (nextCharacter = ","))
                removeIndices:Add(indices:Get(i)) 
                removeBefore = removeBefore + 1
            end
            i = i + 1
            j = j + 1
        end
    end

    //Updates the matches label on the Dialog to reflect how many instances of 
    //"find" were found in the textBox. If there is a currentSelection it will also 
    //display the selection number in relation to the number of total matches found.
    private action UpdateMatches()
        integer matchCount = indices:GetSize()
        if findField:GetText() not= ""
            if matchCount = 0
                matches:SetText("No matches")
            elseif matchCount = 1
                matches:SetText(cast(text, matchCount) + " match")
            else
                if selection >= 0
                    matches:SetText(cast(text, (selection + 1)) + " of " + cast(text, matchCount) + " matches")
                else
                    matches:SetText(cast(text, matchCount) + " matches")
                end
            end
        else 
            matches:SetText("") 
        end
    end

    //Updates the highlighted instances of "find" in the textBox
    //Calls RemoveSelections() to remove the Pair<startIndex, endIndex> that no 
    //longer apply due to MatchCase criteria, WholeWord criteria, or TextChange events 
    private action UpdateSelections()
        ColoredHighlight highlight
        Color color
        highlight:SetColor(color:Orange())
        integer startIndex = 0
        integer endIndex = 0

        if removeIndices:GetSize() not= 0
            RemoveSelections()
        end

        if indices:GetSize() not= 0
            integer i = 0
            repeat while i < indices:GetSize()
                TextStyle textStyle
                Pair<integer> index
                index = indices:Get(i)
                startIndex = index:GetFirstValue()
                endIndex = index:GetSecondValue()
//                if i = 0
//                    textBox:SetCaretPosition(startIndex - 1)
//                end
                textStyle:SetIndex(startIndex)
                textStyle:SetSize((endIndex - startIndex) + 1)
                textStyle:SetHighlight(highlight)
                textBox:AddFindReplaceStyle("highlight" + startIndex, textStyle)
                i = i + 1
            end
        end

        UpdateMatches()
    end
    

    //Removes the highlighted instances of "find" that are no longer applicable due to MatchCase 
    //criteria, WholeWord criteria, or a TextChange event.
    //Updates the number of instances of find before the caretIndex and after the caretIndex
    private action RemoveSelections()
        integer startIndex = 0
        integer i = 0
        repeat while i < removeIndices:GetSize()            
            startIndex = removeIndices:Get(i):GetFirstValue()                        
            indices:Remove(removeIndices:Get(i))
            textBox:RemoveFindReplaceStyle("highlight" + startIndex)
            i = i + 1
        end
        afterCaretCount = afterCaretCount - removeAfter
        beforeCaretCount = beforeCaretCount - removeBefore
        removeIndices:Empty() 


        if textBox not= undefined
            textBox:RemoveFindReplaceStyles()
        end
    end
    

    //moves the selection index to the next position and sends the previousSelection index to
    //UpdatCurrentSelection() to add the new currentSelection highlight and remove the 
    //previousSelection highlight from the textBox
    action NextSelection()
        integer previousSelection = selection
        selection = selection + 1
        UpdateCurrentSelection(previousSelection)
    end

    //moves the selection index to the previous position and sends the previousSelection index to
    //UpdatCurrentSelection() to add the new currentSelection highlight and remove the 
    //previousSelection highlight from the textBox
    action PreviousSelection()
        integer previousSelection = selection
        selection = selection - 1
        UpdateCurrentSelection(previousSelection)
    end
    
    //called by PreviousSelection() and NextSelection() to update the current selection
    //in the array of indices. Highlights the line of the current selection in 
    //light blue (currently not working as expected), highlights the current selection in a darker shade of blue, and
    //updates the current matches counter on the dialog to say something like 
    //1 of 10 matches.
    private action UpdateCurrentSelection(integer previousSelection)
        if selection < 0
            selection = (indices:GetSize() - 1)
        end
        if selection >= indices:GetSize()
            selection = 0
        end

        integer wordStartIndex =  indices:Get(selection):GetFirstValue()
        integer wordEndIndex = indices:Get(selection):GetSecondValue()        

        integer lineStartIndex = textBox:GetLineIndexOfCharacter(wordStartIndex)
        textBox:GoToLine(lineStartIndex)

        ColoredHighlight highlight
        ColoredHighlight selectionHighlight
        TextStyle textStyle
        TextStyle word
        Color color
        Color blue
        blue:SetColor(0, 0, 0.4, 0.2)
        highlight:SetColor(color:Orange())
        selectionHighlight:SetColor(blue)


        if previousSelection >= 0 
            integer previousStartIndex = indices:Get(previousSelection):GetFirstValue()
            integer previousEndIndex = indices:Get(previousSelection):GetSecondValue()
            integer previousLineStartIndex = textBox:GetLineIndexOfCharacter(previousStartIndex)
            textStyle:SetIndex(previousStartIndex)
            textStyle:SetSize((previousEndIndex - previousStartIndex) + 1)
            textStyle:SetHighlight(highlight)

        //resets the previous selection back to the orange highlight and removes the line highlight
            if not textBox:HasTextStyle("highlight" + previousStartIndex)
                textBox:AddFindReplaceStyle("highlight" + previousStartIndex, textStyle)
            end
            if textBox:HasTextStyle("selectionHighlight" + previousStartIndex)
                textBox:RemoveFindReplaceStyle("selectionHighlight" + previousStartIndex)
            end
            
        end

        word:SetIndex(wordStartIndex)
        word:SetSize((wordEndIndex - wordStartIndex)+ 1)
        word:SetHighlight(selectionHighlight)

        //sets the current selection to blue highlight
        textBox:RemoveFindReplaceStyle("highlight" + wordStartIndex)       //remove the orange highlight
        textBox:AddFindReplaceStyle("selectionHighlight" + wordStartIndex, word)    //add the blue highlight for current selection


        //updates which of the matches is currently selected
        UpdateMatches()
    end

    //removes the selection highlighting before updating the indices
    //called when there is a text, matchCase, or wholeWord change and when the
    //dialog is closed, to remove all highlights within the textBox 
    private action RemoveCurrentSelection
        if indices:GetSize() not= 0
            integer wordStartIndex = indices:Get(selection):GetFirstValue()
            textBox:RemoveFindReplaceStyle("selectionHighlight" + wordStartIndex)
            selection = -1
        end
    end

    //repopulates the highlighting for any remaining instances that were not replaced by calling FindText (not currently working)
    action UpdateTextBox()
        textValue = textBox:GetText()
        FindText(findField:GetText())
    end
    //Listens for text change within the findField and text change events in the 
    //current textBox that is being searched. Calls to update the selections if
    //there is a text change event that occurs in either field.
    action TextChanged(TextChangeEvent event)
        text find = ""
        if event:GetControl():Equals(cast(Object, findField)) 
            if event:GetEventType() = event:ADDED
                find = findField:GetText()
                if find not= ""
                    FindText(find)
                end
            elseif event:GetEventType() = event:DELETED
                find = findField:GetText()
                if find = ""
                    removeIndices = indices:CopyToArray()
                    indices:Empty()
                    RemoveSelections()
                    UpdateMatches()
                elseif find not= ""
                    FindText(find)
                end
            elseif event:GetEventType() = event:MODIFIED
                find = findField:GetText()
                if find not= ""
                    FindText(find)
                end
            end
        end

        if textBox not= undefined
            if event:GetControl():Equals(cast(Object, textBox))                
                //if textChangeListenerOn
                    if event:GetEventType() = event:ADDED
                        UpdateTextBox()
                    elseif event:GetEventType() = event:DELETED
                        UpdateTextBox()
                    elseif event:GetEventType() = event:MODIFIED   
                        UpdateTextBox()
                    end
                //end
            end
        end
    end

    //Removes any highlights in the textBox, empties the arrays and textFields and resets the selection index.
    action OnHide
        RemoveSelections()
        findField:Empty()
        selection = -1
        UpdateMatches()        
    end

end