package Libraries.Development.Environment.Studio.Interface

use Libraries.Interface.Controls.Dialog
use Libraries.Game.Graphics.Label
use Libraries.Game.GameStateManager
use Libraries.Game.Game
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Views.LabelBoxView
use Libraries.Game.Graphics.Color
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Controls.ProgressBar
use Libraries.Language.Compile.Library

use Libraries.Language.Compile.CompilerListener
use Libraries.Interface.AccessibilityManager
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Compute.Math
use Libraries.Containers.Array
use Libraries.Compute.Random

class SplashScreen is Dialog, CompilerListener
    boolean initialized = false
    Icon logo
    Label studio
    Label loading
    ProgressBar progress
    Library library = undefined
    number currentPercent = 0
    GameStateManager manager
    Math math
    Random random
    Array<text> scanLabels
    Array<text> parsingLabels
    Array<text> typeCheckingLabels
    Array<text> semanticsLabels
    Array<text> doneLabels

    on create
        SetModal(true)
        SetTopBarVisible(false)

        scanLabels:Add("Taking the Upside Down to Prom")
        scanLabels:Add("Counting to 11")

        parsingLabels:Add("Trolling Internet Trolls")
        parsingLabels:Add("Leaving Mom's basement")

        typeCheckingLabels:Add("Watching Robots do Standup")
        typeCheckingLabels:Add("Lowering human defenses")
        typeCheckingLabels:Add("Starting robot apocalypse")

        semanticsLabels:Add("Harvesting Garden Gnomes")
        semanticsLabels:Add("?")
        semanticsLabels:Add("Profit!")

        doneLabels:Add("Ironing Baby Yoda")
        doneLabels:Add("Resurrecting Palpatine for no reason")
    end

    action UpdatePercentageComplete(number percent)
        currentPercent = percent
    end

    action FindRandomPhrase(Array<text> phrases) returns text
        text result = ""
        if phrases not= undefined and not phrases:IsEmpty()
            integer i = random:RandomIntegerBetween(0, phrases:GetSize() - 1)
            result = phrases:Get(i)
        end
        return result
    end
    action UpdateLabel(text label)
        text result = ""
        if label = "Started Scanning"
            result = FindRandomPhrase(scanLabels)
        elseif label = "Parsing"
            result = FindRandomPhrase(parsingLabels)
        elseif label = "Type Checking"
            result = FindRandomPhrase(typeCheckingLabels)
        elseif label = "Semantic Analysis"
            result = FindRandomPhrase(semanticsLabels)
        elseif label = "All done!"
            result = FindRandomPhrase(doneLabels)
        end
        AccessibilityManager access = manager:GetAccessibilityManager()
        if access not= undefined
            access:Notify(manager:GetFocus(), result)
        end
        
        loading:SetText(result)
    end

    action Initialize
        if initialized
            output "WARNING: Re-initializing the FindDialog."
        end

        initialized = true

        QuorumStudio qs = cast(QuorumStudio, manager:GetGame())
        SetName("Loading " + qs:GetDisplayName())
        SetPixelWidth(400)
        SetVerticalLayoutMode(parent:Libraries.Interface.Controls.Control:FIT_CONTENTS)

        LabelBoxView view
        Color color
        view:SetBorderThickness(1)
        view:SetBorderStyle(view:ALL)
        view:Initialize(color:CustomColor(0.9, 0.9, 0.9, 1), color:Black())
        
        logo:Load("Resources/Graphics/Interface/Quorum.png")

        LayoutProperties properties
        Control panel
        FlowLayout findLayout
        logo:SetPercentageHeight(0.75)
        logo:SetPercentageWidth(logo:GetWidth()/ logo:GetHeight())
        logo:SetHorizontalLayoutMode (properties:MAINTAIN_ASPECT_RATIO)
        logo:SetLeftPadding(40)
        logo:SetTopPadding(50)

        studio:SetText(qs:GetDisplayName())
        studio:SetFontSize(20)
        studio:SetTopPadding(85)
        studio:SetLeftPadding(40)
        loading:SetText("Loading ...")
        loading:SetLeftPadding(270)
        loading:SetTopPadding(-70)

        loading:SetX(studio:GetX())
        loading:SetY(studio:GetY() - studio:GetHeight())
        panel:SetLayout(findLayout)
        panel:SetPercentageWidth(1.0)
        panel:SetPixelHeight(140)
        panel:SetBorderColor(color:Black())
        panel:SetBorderThickness(1)
        panel:Add(logo)

        panel:Add(progress)
        panel:Add(studio)
        panel:Add(loading)
        panel:SetView2D(view)
        Add(panel)
        progress:SetFocusable(true)
       
        
    end

    action OnShow
        progress:Focus()
        AccessibilityManager access = manager:GetAccessibilityManager()
        if access not= undefined
            access:Notify(progress, "Loading Quorum Studio, please wait.")
        end
    end

    
    action Update(number seconds)
        logo:Rotate(seconds * 90)
        number value = math:RoundToNearestInteger(currentPercent)
        progress:SetValue(value)
        loading:SetX(studio:GetX())
        loading:SetY(studio:GetY() - studio:GetHeight())
    end

    action GetLibrary returns Library
        return library
    end

    action SetLibrary(Library library)
        me:library = library
        library:AddListener(me)
    end
end
