package Libraries.Development.Environment.Studio.Interface

use Libraries.Interface.Controls.Dialog
use Libraries.Interface.Views.LabelBoxView
use Libraries.Game.Graphics.Color
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Game.Graphics.Label
use Libraries.Interface.Controls.Button
use Libraries.Development.Environment.Studio.Behaviors.SaveChangesBehavior
use Libraries.Development.Environment.Studio.Behaviors.DiscardChangesBehavior
use Libraries.Development.Environment.Studio.Behaviors.CancelExitBehavior
use Libraries.Game.GameStateManager
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Interface.Accessibility
use Libraries.Compute.Math
use Libraries.Interface.Controls.ProgressBar
use Libraries.Interface.Views.ControlShaderView
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Controls.Icon

class CheckForUpdatesDialog is Dialog
    GameStateManager manager
    QuorumStudio qs = cast(QuorumStudio, manager:GetGame())

    boolean initialized = false
    boolean updateChecked = false
    integer newMajorVersion = -10
    integer newMinorVersion = -10
    integer newBuildVersion = -10
    number percent = -1
    boolean shutdown = false
    ProgressBar progress
    Icon logo
    Label studio
    Label loading

    action OnShow()
        progress:Focus()
        text result = "No updates available."
        if not updateChecked
            result = "No updates available."
        elseif IsNewer()
            result = "Quorum Studio " + GetNewVersionNumber() + "
                Download in progress."
        end
        loading:SetText(result)
    end

    action Initialize
        initialized = true

        QuorumStudio qs = cast(QuorumStudio, manager:GetGame())
        SetName("Checking for Updates")
        SetPercentageWidth(0.40)
        
        logo:Load("Resources/Graphics/Interface/QuorumLighter.png")

        LayoutProperties properties
        Control panel
        FlowLayout panelLayout
        panel:SetLayout(panelLayout)
        panel:SetInterfaceOptionsKey("Dialog")
        panel:SetPercentageWidth(1.0)
        panel:SetVerticalLayoutMode(properties:FIT_CONTENTS)
        panel:SetBorderStyle(properties:ALL)
        panel:SetBorderThickness(1)

        // Make a region to contain the logo. It'll use a ManualLayout so we can center the logo within it.
        Control logoRegion
        logoRegion:SetPercentageWidth(0.25)
        logoRegion:SetPercentageHeight(0.8)
        logoRegion:SetVerticalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        ManualLayout logoLayout
        logoRegion:SetLayout(logoLayout)
        panel:Add(logoRegion)

        logo:SetPercentageWidth(0.75)
        logo:SetPercentageHeight(0.75)
        logo:SetHorizontalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        LayoutProperties logoProperties = logo:GetDefaultLayoutProperties()

        // Position the logo from its center (set origin), and put the origin at the center of the region
        logoProperties:SetPercentageOriginX(0.5)
        logoProperties:SetPercentageOriginY(0.5)
        logo:SetPercentageX(0.5)
        logo:SetPercentageY(0.5)
        logoRegion:Add(logo)

        Control textRegion
        ManualLayout regionLayout
        textRegion:SetLayout(regionLayout)
        textRegion:SetPercentageWidth(0.75)
        textRegion:SetPercentageHeight(logoRegion:GetPercentageHeight() / 3.0)
        textRegion:SetVerticalLayoutMode(properties:MAINTAIN_ASPECT_RATIO)
        panel:Add(textRegion)

        studio:SetText(qs:GetDisplayName())
        studio:SetFontSize(20)
        LayoutProperties studioProperties = studio:GetDefaultLayoutProperties()
        studioProperties:SetPercentageOriginX(0.5)
        studioProperties:SetPercentageOriginY(1.0)
        studio:SetPercentageX(0.5)
        studio:SetPercentageY(0.95)
        textRegion:Add(studio)
        
        loading:SetText("Connecting to Server ...")
        LayoutProperties loadingProperties = loading:GetDefaultLayoutProperties()
        loadingProperties:SetPercentageOriginX(0.5)
        loadingProperties:SetPercentageOriginY(0.5)
        loading:SetPercentageX(0.5)
        loading:SetPercentageY(0.5)
        textRegion:Add(loading)        

        progress:SetPercentageWidth(0.9)
        progress:SetPercentageX(0.05)
        progress:SetPercentageHeight(0.15)
        progress:SetPercentageY(0.1)
        progress:SetBorderThickness(1)
        progress:SetPixelHeight(0)
        textRegion:Add(progress)

        ControlShaderView view
        view:Initialize()
        panel:SetView2D(view)

        
        Add(panel)
        panel:Resize()
        progress:SetFocusable(true)   
    end

    private action IsNewer returns boolean
        integer major = qs:GetMajorVersion()
        integer minor = qs:GetMinorVersion()
        integer build = qs:GetBuildVersion()

        if newMajorVersion > major
            return true
        elseif newMajorVersion = major and newMinorVersion > minor
            return true
        elseif newMajorVersion = major and newMinorVersion = minor and 
            newBuildVersion > build
            return true
        end
        
        return false
    end

    private action GetNewVersionNumber returns text
        return "" + newMajorVersion + "." + newMinorVersion + "." + newBuildVersion
    end

    action Update(number seconds)
        if shutdown
            Hide()
        end
    end

    action OnHide()
         
    end

    action GetPercent returns number
        return percent
    end

    action SetPercent(number percent)
        me:percent = percent
        progress:SetValue(percent)
    end

    action GetLabel returns text
        return loading:GetText()
    end

    action SetLabel(text value)
        text result = "Quorum Studio " + GetNewVersionNumber() + ", "
        integer p = cast(integer, percent)
        result = result + p + "%: " + value
        loading:SetText(result)
    end

    action GetShutdown returns boolean
        return shutdown
    end

    action SetShutdown(boolean shutdown)
        me:shutdown = shutdown
    end

    action GetNewMajorVersion returns integer
        return newMajorVersion
    end

    action SetNewMajorVersion(integer newMajorVersion)
        me:newMajorVersion = newMajorVersion
    end

    action GetNewMinorVersion returns integer
        return newMinorVersion
    end

    action SetNewMinorVersion(integer newMinorVersion)
        me:newMinorVersion = newMinorVersion
    end

    action GetNewBuildVersion returns integer
        return newBuildVersion
    end

    action SetNewBuildVersion(integer newBuildVersion)
        me:newBuildVersion = newBuildVersion
    end

    action GetUpdateChecked returns boolean
        return updateChecked
    end

    action SetUpdateChecked(boolean updateChecked)
        me:updateChecked = updateChecked
    end
end