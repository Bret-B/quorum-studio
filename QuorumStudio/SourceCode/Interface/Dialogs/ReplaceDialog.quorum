package Libraries.Development.Environment.Studio.Interface

use Libraries.Interface.Controls.Dialog
use Libraries.Interface.Controls.TextField
use Libraries.Interface.Controls.Checkbox
use Libraries.Interface.Controls.Button
use Libraries.Game.Graphics.Label
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Development.Environment.Studio.Behaviors.WholeWordMatchCaseBehavior
use Libraries.Development.Environment.Studio.Behaviors.PreviousBehavior
use Libraries.Development.Environment.Studio.Behaviors.NextBehavior
use Libraries.Interface.Events.TextChangeListener
use Libraries.Interface.Controls.TextStyles.ColoredHighlight
use Libraries.Interface.Controls.TextStyles.TextStyle
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Development.Environment.Studio.Behaviors.ReplaceAllBehavior
use Libraries.Development.Environment.Studio.Behaviors.ReplaceBehavior
use Libraries.Interface.Events.KeyboardListener
use Libraries.Development.Environment.Studio.Behaviors.FindBehavior
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Game.InputTable
use Libraries.Game.InputSet
use Libraries.Interface.Controls.TextBox
use Libraries.Interface.Views.ControlShaderView
use Libraries.Interface.Controls.Blocks.CodeEditor
use Libraries.Interface.Forms.Banner
use Libraries.Interface.Forms.Grouping
use Libraries.Interface.Pages.StackedRowPage
use Libraries.Game.GameStateManager
use Libraries.Development.Environment.Studio.CodeEditorTabPane
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Events.SelectionEvent
use Libraries.Interface.Selections.TabPaneSelection
use Libraries.Interface.Controls.Tab


class ReplaceDialog is FindDialog, TextChangeListener, SelectionListener
    boolean showing = false
    boolean initialized = false
    boolean textChangeListenerOn = true     //flag for TextChangeListener for when Replace and ReplaceAll are invoked

    GameStateManager gameManager
    QuorumStudio studio = cast(QuorumStudio, gameManager:GetGame())
    CodeEditorTabPane tabPane = studio:GetTabPane()

    // The TextBox that we're searching through.
    CodeTextBox textBox = undefined
    CodeEditor editor = undefined

    //ReplaceDialog Controls
    TextField findField = undefined
    TextField replaceField = undefined
    Label matches = undefined
    Checkbox wholeWord = undefined
    Checkbox matchCase = undefined
    Button previous = undefined
    Button next = undefined
    Button replace = undefined
    Button replaceAll = undefined
    Button findButton

    //ReplaceDialog Control Behaviors
    WholeWordMatchCaseBehavior wholeWordMatchCaseBehavior
    PreviousBehavior previousBehavior 
    NextBehavior nextBehavior 
    ReplaceAllBehavior replaceAllBehavior
    ReplaceBehavior replaceBehavior
    FindBehavior findBehavior

    on create
        SetModal(false)
        SetBehavior(nextBehavior)
    end

    action OnShow()
        showing = true
        
        wholeWord:SetToggleState(textBox:GetIsWholeWord())
        matchCase:SetToggleState(textBox:GetIsMatchCase())
        if(textBox:HasSelection())
            findField:SetText(textBox:GetFindSelection())
            findField:SetCaretPosition(findField:GetSize())
            textBox:SetCaretPosition(textBox:GetCaretPosition() - findField:GetSize())
            textBox:SetReplaceWord("")
        else    
            findField:SetText(textBox:GetFindWord())
            findField:SetCaretPosition(findField:GetSize())
        end
        replaceField:SetText(textBox:GetReplaceWord())
        replaceField:SetCaretPosition(replaceField:GetSize())
        replaceField:HideCaret()
        textBox:SetIsDialogOpen(true)
        if findField:GetText() not= ""
            findButton:Activate()
        end

        findField:Focus()
        
        //Should be "ALT + N" (until ALT key works correctly using the same hotkey as the CodeTextBox)
        KeyboardEvent keys
        text inputGroup = GetInputGroup()
        InputTable dialogInputs = studio:GetInputTable(inputGroup)
        InputSet nextSet 
        nextSet:SetKeyboardInput(keys:F3)
        dialogInputs:Add(nextSet, nextBehavior)

        //Should be "ALT + P" (until ALT key works correctly using the same hotkey as the CodeTextBox)
        InputSet previousSet
        previousSet:SetKeyboardInput(keys:F3)
        previousSet:AddModifier(previousSet:SHIFT)
        dialogInputs:Add(previousSet, previousBehavior)

        //Should be "ALT + R" (until ALT key works correctly using CMD+SHIFT+R)
        InputSet replaceSet
        replaceSet:SetKeyboardInput(keys:R)
        replaceSet:AddModifier(replaceSet:SHIFT)
        dialogInputs:Add(replaceSet, replaceBehavior)

        //Should be "ALT + A" (until ALT key works correctly using CMD+SHIFT+A)
        InputSet replaceAllSet
        replaceAllSet:SetKeyboardInput(keys:A)
        replaceAllSet:AddModifier(replaceAllSet:SHIFT)
        dialogInputs:Add(replaceAllSet, replaceAllBehavior)
    end

    action Initialize
        initialized = true
        SetPercentageWidth(0.3)
        SetPercentageHeight(0.4)

        SetName("Find and Replace")
        SetVerticalLayoutMode(parent:Control:FILL)

        ControlShaderView view
        view:Initialize()
        Add(CreateReplaceControl())

        findField:AddTextChangeListener(me)
        wholeWordMatchCaseBehavior:SetDialog(me)
        replaceAllBehavior:SetDialog(me)
        replaceBehavior:SetDialog(me) 
        findBehavior:SetDialog(me)
    end

    private action CreateReplaceControl returns Control
        StackedRowPage page
        
        findField = page:AddTextField("Find Field")
        findField:AddTextChangeListener(me)
        findButton:SetBehavior(findBehavior)

        replaceField = page:AddTextField("Replace Field")
        
        Grouping options = page:AddGrouping("Checkbox Options")
        wholeWord = options:AddCheckbox("Whole")
        matchCase = options:AddCheckbox("Match")
        wholeWord:SetLayoutRows(1)
        matchCase:SetLayoutRows(1)

        wholeWord:SetBehavior(wholeWordMatchCaseBehavior)
        matchCase:SetBehavior(wholeWordMatchCaseBehavior)

        Banner banner = page:AddBanner("Matches")
        matches = banner:GetTitleLabel()
        SetMatchesLabel(matches)

        Grouping replaceGroup = page:AddGrouping("Confirm")
        replace = replaceGroup:AddButton("Replace")
        replaceAll = replaceGroup:AddButton("Replace All")

        Grouping buttonGroup = page:AddGrouping("Confirm")
        previous = buttonGroup:AddButton("Previous")
        next = buttonGroup:AddButton("Next")

        replace:SetBehavior(replaceBehavior) 
        replaceAll:SetBehavior(replaceAllBehavior) 
        previous:SetBehavior(previousBehavior)
        next:SetBehavior(nextBehavior) 

        return page

    end

    action IsInitialized returns boolean
        return initialized
    end

    action Show
        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetPercentageX(0)
        properties:SetPercentageY(0)
        properties:SetPercentageOriginX(1)
        properties:SetPercentageOriginY(1)
        number globalX = 0
        number globalY = 0
        number width = 0
        number height = 0
        if textBox not= undefined
            globalX = textBox:GetGlobalX() + textBox:GetWidth()
            globalY = textBox:GetGlobalY() + textBox:GetHeight()
            width = textBox:GetWidth()
            height = textBox:GetHeight()
        elseif editor not= undefined
            globalX = editor:GetGlobalX() + editor:GetWidth()
            globalY = editor:GetGlobalY() + editor:GetHeight()
            width = editor:GetWidth()
            height = editor:GetHeight()
        end 

        //scaled buffer
        globalX = globalX - (width * 0.02)
        globalY = globalY - (height * 0.02)
        properties:SetPixelX(globalX)
        properties:SetPixelY(globalY)
        parent:Dialog:Show()
    end

    action SetTextBox(CodeTextBox code)
        textBox = code
        textBox:AddTextChangeListener(me)
        findBehavior:SetTextBox(textBox)
        wholeWordMatchCaseBehavior:SetTextBox(textBox)
        textBox:SetDialog(me)
        replaceBehavior:SetTextBox(textBox)
        replaceAllBehavior:SetTextBox(textBox)
        previous:SetBehavior(previousBehavior)
        next:SetBehavior(nextBehavior)
    end

    action SetCodeEditor(CodeEditor code)
        editor = code
    end

    action GetTextBox returns CodeTextBox
        return textBox
    end

    action GetFindWord returns text
        return findField:GetText()
    end

    action GetIsMatchCase returns boolean
        return matchCase:GetToggleState()
    end

    action GetIsWholeWord returns boolean
        return wholeWord:GetToggleState()
    end

    action SetTextChangeListenerOn(boolean state)
        textChangeListenerOn = state
    end

    action GetTextChangeListenerOn returns boolean
        return textChangeListenerOn
    end

    action GetReplaceWord returns text
        return replaceField:GetText()
    end

    action ResetFindFocus
        findField:Focus()
    end

    //called after replace and replaceAll to update the textValue to include the textBox modifications
    //repopulates the highlighting for any remaining instances that were not replaced by calling FindText (not currently working)
    action UpdateTextBox()
        findButton:Activate()
    end

    //Listens for text change within the findField and text change events in the 
    //current textBox that is being searched. Calls to update the selections if
    //there is a text change event that occurs in either field.
    //Does not listen for textChanges in the textBox until after replaceAll is executed
    action TextChanged(TextChangeEvent event)
        text find = ""
        if event:GetControl():Equals(cast(Object, findField)) 
            find = findField:GetText()
            if event:GetEventType() = event:ADDED
                if find not= ""
                    findButton:Activate()
                end
            elseif event:GetEventType() = event:DELETED
                if (find = "") and (textBox not= undefined)
                    findButton:Activate()
                elseif find not= ""
                    findButton:Activate()
                end
            elseif event:GetEventType() = event:MODIFIED
                if find not= ""
                    findButton:Activate()
                end
            end
        end

        if textBox not= undefined
            if event:GetControl():Equals(cast(Object, textBox))                
                if textChangeListenerOn
                    if event:GetEventType() = event:ADDED
                        UpdateTextBox()
                    elseif event:GetEventType() = event:DELETED
                        UpdateTextBox()
                    elseif event:GetEventType() = event:MODIFIED   
                        UpdateTextBox()
                    end
                end
            end
        end
    end

    action SelectionChanged(SelectionEvent event) 
        if showing
            TabPaneSelection selection = tabPane:GetSelection()
            Tab tab = selection:GetTab()
            if tab not= undefined and tab is EditorTab
                EditorTab t = cast(EditorTab, tab)
                TextBox box = t:GetTextBox()
                if box not= undefined
                    textBox:RemoveFindReplaceStyles()
                    SetTextBox(cast(CodeTextBox, box))
                    UpdateTextBox()
                end
            end
        end
    end

    //Removes any highlights in the textBox, empties the arrays and textFields and resets the selection index.
    action OnHide
        showing = false
        if textBox not= undefined
            textBox:SetFindWord(findField:GetText())
            textBox:SetReplaceWord(replaceField:GetText())
            textBox:SetIsDialogOpen(false)
            textBox:DialogClosed()
        end
        SetTextChangeListenerOn(false)
    end   
end