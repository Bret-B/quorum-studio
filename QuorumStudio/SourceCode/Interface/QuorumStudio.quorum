package Libraries.Development.Environment.Studio
use Libraries.Game.Game
use Libraries.Interface.Controls.ScrollPane
use Libraries.Development.Environment.Projects.ProjectTree
use Libraries.Interface.Controls.TabPane
use Libraries.Interface.Controls.TextBox
use Libraries.Interface.Item2D
use Libraries.Game.Graphics.Color
use Libraries.Development.Environment.Projects.ProjectManager
use Libraries.Development.Environment.Studio.Updates.Updater
use Libraries.Development.Environment.Configuration.Options
use Libraries.Development.Environment.Resources
use Libraries.Development.Environment.Studio.Behaviors.Behaviors
use Libraries.Game.Layer2D
use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Controls.Tab
use Libraries.Game.Graphics.Texture
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.DesktopConfiguration
use Libraries.Interface.Item
use Libraries.Interface.Events.FocusListener
use Libraries.Interface.Events.FocusEvent
use Libraries.Game.InputTable
use Libraries.Development.Environment.Studio.Interface.KeyMap
use Libraries.Containers.Iterator
use Libraries.Development.Environment.Studio.Behaviors.ScanLibraryBehavior
use Libraries.Development.Environment.Studio.Build.BuildManager
use Libraries.Concurrency.ThreadRunner
use Libraries.System.SystemHelper
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Controls.Control
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Layouts.ManualLayout
use Libraries.Game.InputMonitor
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Development.Environment.Studio.Behaviors.BuildLoop
use Libraries.Game.Graphics.FramesPerSecondLabel
use Libraries.Interface.Controls.Dialog
use Libraries.Game.Graphics.Label
use Libraries.Development.Environment.Studio.Interface.SplashScreen
use Libraries.Development.Environment.Studio.Build.ScanListener
use Attack.FakeFocusManager
use Libraries.Sound.Audio
use Libraries.Interface.Events.ResizeListener
use Libraries.Interface.Events.ResizeEvent
use Libraries.Containers.HashTable
use Libraries.System.Console

class QuorumStudio is Game, FocusListener, ScanListener, ResizeListener
    constant number VERSION = 1.0
    constant text NAME = "Quorum Studio " + VERSION + " Beta 2"
    integer DEFAULT_WINDOW_WIDTH = 2500
    integer DEFAULT_WINDOW_HEIGHT = 1500
    ScrollPane projectPane
    ProjectTree projectTree
    CodeEditorTabPane codeTabs
    OutputEditorTabPane outputWindow
    Control mainContentPane
    // inputOutputPane contains both the code editor and the output area.
    Control inputOutputPane
    Color color
    
    //Color background
    ProjectManager manager
    Updater updater
    Toolbar toolbar
    Menu menu
    number tempXOffset = 0

    Options options
    File projectsFolder
    Resources resources
    Behaviors behaviors
    Array<Item> focusList
    HashTable<text, integer> windowsList
    integer focus = -1

    Item currentFocus = undefined
    Item previousFocus = undefined
    SystemHelper helper
    BuildLoop buildLoop
    SplashScreen splashScreen = undefined
    boolean splashScreenHide = false

    action Start
        DesktopConfiguration config = GetDesktopConfiguration()
        config:title = NAME
        StartGame()
    end

    action OnExit returns boolean
        ThreadRunner buildThreadRunner = behaviors:GetBuildThreadRunner()
        ThreadRunner indexThread = behaviors:GetBuildIndexingThread()
        buildLoop:SetFinished(true)
        buildThreadRunner:ShutDown()
        indexThread:ShutDown()
        BuildManager value = GetBuildManager()
        value:StopAll()
        Save()
        return true
    end

    action GetBehaviors returns Behaviors
        return behaviors
    end

    action GetBuildManager returns BuildManager
        return behaviors:GetBuildManager()
    end

    action GetCurrentFocus returns Item
        return currentFocus
    end

    action GetPreviousFocus returns Item
        return previousFocus
    end

    action GainedFocus(FocusEvent event)
        currentFocus = event:GetNewFocus()
        previousFocus = event:GetLastFocus()

        //Bubble up the parents until you find which window you're in
        //then set the window focus cycle to move there
        Item2D newFocus = cast(Item2D, currentFocus)
        if newFocus not= undefined and newFocus:GetParent() not= undefined
            boolean notFound = true
            repeat while notFound and newFocus:GetParent() not= undefined
                if windowsList:HasKey(newFocus:GetParent():GetName())
                    focus = windowsList:GetValue(newFocus:GetParent():GetName())
                    notFound = false
                end
                newFocus = newFocus:GetParent()
            end
        end
    end

    action LostFocus(FocusEvent event)

    end

    action GetOutputPane returns OutputEditorTabPane
        return outputWindow
    end

    action GetProjectManager returns ProjectManager
        return manager
    end

    action GetProjectTree returns ProjectTree
        return projectTree
    end

    action GetTabPane returns CodeEditorTabPane
        return codeTabs
    end

    action GetProjectsFolder returns File
        return projectsFolder
    end

    action NextFocus returns Item
        focus = focus + 1
        if focus >= focusList:GetSize()
            focus = 0
        end

        return focusList:Get(focus)
    end

    action PreviousFocus returns Item
        focus = focus - 1
        if focus < 0
            focus = focusList:GetSize() - 1
        end

        return focusList:Get(focus)
    end

    action GetFocusSelection returns integer
        return focus
    end

    action Started
    end

    action Stopped
        splashScreenHide = true
    end

    action SizeChanged(ResizeEvent event)
        integer height = event:GetHeight()
        integer width = event:GetWidth()
        options:SetWidth(GetScreenWidth())
        options:SetHeight(GetScreenHeight())
        options:SetInterfaceScale(GetInterfaceScale())
    end

    action CreateGame
        resources:SetOptions(options)

        AddResizeListener(me)
        FakeFocusManager fake
        SetFocusManager(fake)
        SetInterfaceScale(2)
        FlowLayout flowLayout
        SetLayout(flowLayout)

        options:SetMainApplication(me)
        GameStateManager gameStateManager
        GraphicsManager graphics = gameStateManager:GetGameGraphics()
        graphics:ClearScreenColor(101.0/255.0, 101.0/255.0, 101.0/255.0, 1.0)
        SetupResources()

        Layer2D layer = me:GetCurrentLayer2D()
        layer:SetAutomaticResizing(true)
        
        Load()
        SetupInterface()
        integer width = options:GetWidth()
        integer height = options:GetHeight()
        number size = options:GetInterfaceScale()
        SetInterfaceScale(size)
        SetScreenSize(width, height)
        mainContentPane:Resize()

        SplashScreen splash
        splashScreen = splash
        splashScreen:Initialize()
        splashScreen:SetLibrary(GetBuildManager():GetLibrary())
        splashScreen:Show()

        SetupFocus()
        SetupInterfaceScaling()
        
        BuildManager builds = behaviors:GetBuildManager()
        builds:SetCodeEditorTabPane(codeTabs)
        builds:SetOutputEditorTabPane(outputWindow)
        builds:SetProjectManager(manager)

        //now that we're all setup, tell the library scanner to run
        ScanLibraryBehavior scanner = behaviors:GetScanLibraryBehavior()
        scanner:Add(me)
        BuildManager builder = behaviors:GetBuildManager()
        ThreadRunner buildThreadRunner = behaviors:GetBuildThreadRunner()
        ThreadRunner indexThread = behaviors:GetBuildIndexingThread()
        buildThreadRunner:Add(scanner)
        buildLoop:SetBuildManager(builder)

        indexThread:Add(buildLoop)
        FocusWindow()

        if options:IsShowingFramesPerSecondCounter()
            FramesPerSecondLabel fps
            fps:SetSize(50)

            //get the current Layer2D and turn off depth buffer sorting for Quorum Studio
            Layer2D currentLayer2 = GetCurrentLayer2D()
            SetColliding(false)

            Layer2D fpsLayerOfAwesome
            fpsLayerOfAwesome:Add(fps)
            AddLayer(fpsLayerOfAwesome)
            fpsLayerOfAwesome:SetDepthBufferSorting(false)
            fpsLayerOfAwesome:SetColliding(false)
        end 
    end

    action SetupFocus
    /*
        The order the items are added to the focusList and the value
        associated with them in the hashTable affect the way in which
        focus cycles between the main windows
    */
        focusList:Add(toolbar)
        focusList:Add(projectTree)
        focusList:Add(codeTabs)
        focusList:Add(outputWindow)
        windowsList:Add(toolbar:GetName(), 0)
        windowsList:Add(projectTree:GetName(), 1)
        windowsList:Add(codeTabs:GetName(), 2)
        windowsList:Add(outputWindow:GetName(), 3)

        KeyMap keyMap = resources:GetKeyMap()
        
        AddFocusListener(me)
    end

    action SetupInterfaceScaling
        InputTable table = GetDefaultInputTable()
        KeyMap keyMap = resources:GetKeyMap()

        //table:Add(keyMap:GetScaleInterfaceUpKey(), behaviors:GetScaleInterfaceUpBehavior())
        //table:Add(keyMap:GetScaleInterfaceDownKey(), behaviors:GetScaleInterfaceDownBehavior())
    end

    action GetResources returns Resources
        return resources
    end

    action SetupResources
        manager:Add(projectTree)
        manager:Add(options)

        //load shared resources for all GUI components
        resources:Load()
        projectTree:SetResources(resources)
        projectTree:SetMainApplication(me)
        toolbar:SetResources(resources)
        menu:SetResources(resources)
        codeTabs:SetResources(resources)
        outputWindow:SetResources(resources)

        projectTree:SetProjectManager(manager)
        AddSelectionListener(projectTree)
        
        toolbar:SetBehaviors(behaviors)
        menu:SetBehaviors(behaviors)
        outputWindow:SetBehaviors(behaviors)
        codeTabs:SetBehaviors(behaviors)
        behaviors:SetMainApplication(me)
    end

    action SetupInterface
        menu:Setup()
        toolbar:Setup()

        CreateMainContentPane()
        Add(menu)
        Add(toolbar)
        Add(mainContentPane)
    end

    action Load
        //load the user's settings
        options:Read()

        me:projectsFolder = options:GetProjectsFolder()
        if not projectsFolder:Exists()
            projectsFolder:CreateDirectories()
        end

        Array<text> projects = options:GetProjects()

        i = 0
        repeat while i < projects:GetSize()
            text value = projects:Get(i)
            File file
            file:SetAbsolutePath(value)
            manager:Open(file)
            i = i + 1
        end

        Iterator<File> iterator = options:GetFilesOpenOnStartup()
        repeat while iterator:HasNext()
            File file = iterator:Next()
            codeTabs:OpenNewTab(file)
        end
        codeTabs:Select(0)

        Console console
        Array<text> flags = console:GetConsoleArguments()
        if flags not= undefined and flags:GetSize() > 0
            i = 0
            repeat while i < flags:GetSize()
                text value = flags:Get(i)
                check
                File file
                file:SetAbsolutePath(value)
                if file:Exists()
                    manager:Open(file)
                end
                detect e //if the user passed junk, just ignore it
                end
                i = i + 1
            end
        end
    end

    action Save
        options:SetWidth(GetScreenWidth())
        options:SetHeight(GetScreenHeight())
        options:SetInterfaceScale(GetInterfaceScale())
        manager:SaveOpenProjects()
        options:Write()
        File mapFile = options:GetKeyMapFile()
        KeyMap map = resources:GetKeyMap()
        if map not= undefined
            map:Save(mapFile)
        end

        codeTabs:SaveDirtyTabs()
    end

    action GetMenu returns Menu
        return menu
    end

    private action CreateMainContentPane
        LayoutProperties layoutProperties = mainContentPane:GetDefaultLayoutProperties()
        layoutProperties:SetVerticalLayoutMode(layoutProperties:FILL)
        layoutProperties:SetPercentageWidth(1)
        layoutProperties:SetTopPadding(5)

        FlowLayout layout
        mainContentPane:SetLayout(layout)
        mainContentPane:SetName("Main Content")

        CreateProjectsWindow()
        CreateCodeEditor()
        CreateOutputWindow()

        LayoutProperties inputOutputProperties = inputOutputPane:GetDefaultLayoutProperties()
        inputOutputProperties:SetHorizontalLayoutMode(inputOutputProperties:FILL)
        inputOutputProperties:SetVerticalLayoutMode(inputOutputProperties:FILL)
        FlowLayout inputOutputLayout
        inputOutputPane:SetLayout(inputOutputLayout)
        inputOutputPane:SetName("Input Output")

        mainContentPane:Add(projectPane)
        inputOutputPane:Add(codeTabs)
        inputOutputPane:Add(outputWindow)
        mainContentPane:Add(inputOutputPane)
    end

    action CreateCodeEditor
    end

    action CreateProjectsWindow()
        LayoutProperties scrollLayout = projectPane:GetDefaultLayoutProperties()
        scrollLayout:SetVerticalLayoutMode(scrollLayout:FILL)
        scrollLayout:SetHorizontalLayoutMode(scrollLayout:STANDARD)
        scrollLayout:SetPixelWidth(300)

        projectPane:SetBackgroundColor(resources:GetBackgroundColor())
        projectPane:SetName("Project Pane")
        projectPane:Add(projectTree)
    end

    private action RemoveHiddenFiles(Array<File> directory)
        integer i = 0
        repeat while i < directory:GetSize()
            if(directory:Get(i):IsHidden())
                directory:Remove(directory:Get(i))
            end
            i = i + 1
        end
    end

    action CreateOutputWindow()
        outputWindow:Setup()
    end

    action LoadUpdates
        File defaultUpdateFile
        defaultUpdateFile:SetPath("Configuration/Updates.json")
        updater:Load(defaultUpdateFile)

        Downloader download
        download:SetPath("https://quorumlanguage.com/studio/live/Configuration/Updates.json")
        boolean value = download:Exists()

        File downloadHere
        downloadHere:SetPath("Updates/Configuration/Updates.json")
        File mom = downloadHere:GetParentDirectory()
        if not mom:Exists()
            mom:CreateDirectories()
        end

        download:SetFile(downloadHere)
        download:Download()
        
        Updater newUpdate
        newUpdate:Load(downloadHere)
        updater:CheckForNewerVersion(newUpdate)
        if updater:HasUpdates()
            updater:DownloadModules()
        end
    end

    action CheckForUpdates
        //first ping the server and see if the files are there.
        
        //get the file --- for now let's get one from testing
        File new
        new:SetPath("Tests/UpdatesTests/UpdateNewVersion.json")

        Updater up
        up:Load(new)

        updater:CheckForNewerVersion(up)
    end

    number timer = 0.0
    action Update(number seconds)
        if splashScreenHide 
            splashScreen:Hide()
            splashScreenHide = false
            //The projects have to loaded to correctly open all the subtrees
            //so this is happening here
            projectTree:LoadExpandState(options:GetTreeState())
            projectTree:LoadSelection(options:GetTreeSelect())
            SetFocus(projectTree)
        end
    end
end
