package Libraries.Development.Environment.Studio
use Libraries.Game.Game
use Libraries.Interface.Controls.ScrollPane
use Libraries.Development.Environment.Projects.ProjectTree
use Libraries.Interface.Controls.TabPane
use Libraries.Interface.Controls.TextBox
use Libraries.Interface.Item2D
use Libraries.Game.Graphics.Color
use Libraries.Development.Environment.Projects.ProjectManager
use Libraries.Development.Environment.Studio.Updates.Updater
use Libraries.Development.Environment.Configuration.Options
use Libraries.Development.Environmen.Resources
use Libraries.Development.Environment.Studio.Behaviors.Behaviors
use Libraries.Game.Layer2D
use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Layouts.FillLayout
use Libraries.Interface.Controls.Tab
use Libraries.Game.Graphics.Texture
use Libraries.Game.GameStateManager
use Libraries.Game.Graphics.GraphicsManager
use Libraries.Game.DesktopConfiguration
use Libraries.Interface.Item
use Libraries.Interface.Events.FocusListener
use Libraries.Interface.Events.FocusEvent
use Libraries.Game.InputTable
use Libraries.Development.Environment.Studio.Interface.KeyMap
use Libraries.Containers.Iterator
use Libraries.Development.Environment.Studio.Behaviors.ScanLibraryBehavior
use Libraries.Development.Environment.Studio.Build.BuildManager
use Libraries.Concurrency.ThreadRunner


class QuorumStudio is Game, FocusListener
    constant number VERSION = 1.0
    constant text NAME = "Quorum Studio " + VERSION
    ScrollPane projectPane
    ProjectTree projectTree
    CodeEditorTabPane codeTabs
    OutputEditorTabPane outputWindow
    Item2D mainContentPane
    Color color
    
    //Color background
    ProjectManager manager
    Updater updater
    Toolbar toolbar
    Menu menu
    number tempXOffset = 0

    Options options
    Resources resources
    Behaviors behaviors
    Array<Item> focusList
    integer focus = -1

    Item currentFocus = undefined
    Item previousFocus = undefined

    action Start
        DesktopConfiguration config = GetDesktopConfiguration()
        config:title = NAME
        StartGame()
    end

    action GetCurrentFocus returns Item
        return currentFocus
    end

    action GetPreviousFocus returns Item
        return previousFocus
    end


    action GainedFocus(FocusEvent event)
        currentFocus = event:GetNewFocus()
        previousFocus = event:GetLastFocus()

        if currentFocus not= undefined
            output currentFocus:GetAccessibilityType() + ", " + currentFocus:GetName()
        end
    end

    action LostFocus(FocusEvent event)

    end

    action GetOutputPane returns OutputEditorTabPane
        return outputWindow
    end

    action GetProjectManager returns ProjectManager
        return manager
    end

    action GetProjectTree returns ProjectTree
        return projectTree
    end

    action GetTabPane returns CodeEditorTabPane
        return codeTabs
    end

    action GetFocus returns Item
        return focusList:Get(focus)
    end

    action NextFocus returns Item
        focus = focus + 1
        if focus >= focusList:GetSize()
            focus = 0
        end

        return focusList:Get(focus)
    end

    action PreviousFocus returns Item
        focus = focus - 1
        if focus < 0
            focus = focusList:GetSize() - 1
        end

        return focusList:Get(focus)
    end

    action GetFocusSelection returns integer
        return focus
    end

    action CreateGame
        options:SetMainApplication(me)
        GameStateManager manager
        GraphicsManager graphics = manager:GetGameGraphics()
        graphics:ClearScreenColor(101.0/255.0, 101.0/255.0, 101.0/255.0, 1.0)
        SetupResources()

        Layer2D layer = me:GetCurrentLayer2D()
        layer:SetAutomaticResizing(true)
        
        SetupInterface()
        SetScreenSize(1500, 1000)
        mainContentPane:Resize()

        Load()
        SetupFocus()
        
        //now that we're all setup, tell the library scanner to run
        ScanLibraryBehavior scanner = behaviors:GetScanLibraryBehavior()
        BuildManager builder = behaviors:GetBuildManager()
        ThreadRunner buildThreadRunner = behaviors:GetBuildThreadRunner()
        buildThreadRunner:Add(scanner)
    end

    action SetupFocus
        focusList:Add(menu)
        focusList:Add(toolbar)
        focusList:Add(projectTree)
        focusList:Add(codeTabs)
        focusList:Add(outputWindow)
        KeyMap keyMap = resources:GetKeyMap()
        
        InputTable table = GetDefaultInputTable()
        table:Add(keyMap:GetEscapeKey(), behaviors:GetDefaultEscapeBehavior())
        AddFocusListener(me)
    end

    action SetupResources
        manager:Add(projectTree)
        manager:Add(options)

        //load shared resources for all GUI components
        resources:Load()
        projectTree:SetResources(resources)
        projectTree:SetMainApplication(me)
        toolbar:SetResources(resources)
        menu:SetResources(resources)
        codeTabs:SetResources(resources)
        outputWindow:SetResources(resources)

        projectTree:SetProjectManager(manager)
        AddSelectionListener(projectTree)
        
        toolbar:SetBehaviors(behaviors)
        menu:SetBehaviors(behaviors)
        behaviors:SetMainApplication(me)
    end

    action SetupInterface
        menu:Setup()
        toolbar:SetDisplayOffset(-menu:GetHeight())
        toolbar:Setup()

        CreateMainContentPane()
        Add(mainContentPane)
        Add(toolbar)
        Add(menu)
    end

    action Load
        //load the user's settings
        options:Read()
        //options:Write()
        Array<text> projects = options:GetProjects()

        i = 0
        repeat while i < projects:GetSize()
            text value = projects:Get(i)
            File file
            file:SetAbsolutePath(value)
            manager:Open(file)
            i = i + 1
        end

        Iterator<File> iterator = options:GetFilesOpenOnStartup()
        repeat while iterator:HasNext()
            File file = iterator:Next()
            codeTabs:OpenNewTab(file)
        end
    end

    action Save
        options:Write()
    end

    action GetMenu returns Menu
        return menu
    end

    private action CreateMainContentPane
        Layout layout
        layout:SetPercentageX(0)
        layout:SetPercentageY(0)
        layout:SetPercentageHeight(1)
        layout:SetHeightOffset(-menu:GetHeight() - toolbar:GetHeight() - 5)
        layout:SetPercentageWidth(1)
        layout:SetOffsetX(5)

        mainContentPane:AddLayout(layout)

        CreateProjectsWindow()
        CreateCodeEditor()
        CreateOutputWindow()

        mainContentPane:Add(projectPane)
        mainContentPane:Add(codeTabs)
        mainContentPane:Add(outputWindow)
    end

    action CreateCodeEditor
        codeTabs:Setup()
    end

    action CreateProjectsWindow()
        projectTree:Setup()

        Layout scrollLayout
        scrollLayout:SetPercentageX(0)
        scrollLayout:SetPercentageY(0)
        scrollLayout:SetPercentageOriginY(0)
        scrollLayout:SetPercentageHeight(1)
        scrollLayout:SetWidthOffset(300)

        projectPane:Initialize(1, 1, resources:GetBackgroundColor())
        projectPane:SetRegionSize(300, 1000)
        projectPane:AddLayout(scrollLayout)
        projectPane:Add(projectTree)
    end

    private action RemoveHiddenFiles(Array<File> directory)
        integer i = 0
        repeat while i < directory:GetSize()
            if(directory:Get(i):IsHidden())
                directory:Remove(directory:Get(i))
            end
            i = i + 1
        end
    end

    action CreateOutputWindow()
        FillLayout fill
        fill:SetFillSide(fill:RIGHT)
        fill:SetPercentageY(0)
        fill:SetPercentageHeight(0.3)

        outputWindow:Setup()
        outputWindow:AddLayout(fill)
    end

    action CreateNavigationWindow()
//        Tree tree
//        navigator = tree
//        navigator:SetColor(background:Green())
//        navigator:SetDock("left")
//        navigator:SetDock("bottom")
//        navigator:DockToWindow(true)
//        navigator:SetWidthByPercent(projectTree:GetWidthPercentage() * 100)
//        navigator:SetHeightByPercent(100 - cast(integer, (projectTree:GetHeightPercentage() + menuBar:GetHeight() / GetScreenHeight()) * 100))
//        navigator:SetBorder(1)
//        Add(navigator)
//        AddClassMembers()
    end

    private action AddClassMembers()
//        TreeItem memberFunction
//        memberFunction:SetText("CreateGame()")
//        navigator:AddRootItem(memberFunction)
//        
//        TreeItem memberVariable
//        memberVariable:SetText("projectTree")
//        navigator:AddRootItem(memberVariable)
//        
//        navigator:UpdateTree()
    end

    action LoadUpdates
        File defaultUpdateFile
        defaultUpdateFile:SetPath("Configuration/Updates.json")
        updater:Load(defaultUpdateFile)

        Downloader download
        download:SetPath("https://quorumlanguage.com/studio/live/Configuration/Updates.json")
        boolean value = download:Exists()

        File downloadHere
        downloadHere:SetPath("Updates/Configuration/Updates.json")
        File mom = downloadHere:GetParentDirectory()
        if not mom:Exists()
            mom:CreateDirectories()
        end

        download:SetFile(downloadHere)
        download:Download()
        
        Updater newUpdate
        newUpdate:Load(downloadHere)
        updater:CheckForNewerVersion(newUpdate)
        if updater:HasUpdates()
            updater:DownloadModules()
        end
    end

    action CheckForUpdates
        //first ping the server and see if the files are there.
        
        //get the file --- for now let's get one from testing
        File new
        new:SetPath("Tests/UpdatesTests/UpdateNewVersion.json")

        Updater up
        up:Load(new)

        updater:CheckForNewerVersion(up)
    end
end
