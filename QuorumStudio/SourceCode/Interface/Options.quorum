package Libraries.Development.Environment.Configuration
use Libraries.System.File
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Containers.Array
use Libraries.Development.Environment.Projects.ProjectListener
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Development.Environment.Studio.CodeEditorTabPane
use Libraries.Development.Environment.Studio.Build.BuildManager
use Libraries.Language.Debug.Breakpoint

class Options is ProjectListener
    constant text OPTIONS_FILE = "Configuration/Options.json"
    constant text KEYMAP_FILE = "Configuration/KeyMap.json"
    constant text OPEN_PROJECTS = "Open Projects"
    constant text OPEN_FILES = "Open Files"
    constant text BREAKPOINTS = "Breakpoints"
    constant text BREAKPOINT = "Breakpoint"
    constant text FRAME_LIMITED = "FrameLimit"
    constant text FRAME_RATE = "FrameRate"
    constant text STARTUP_SOUNDS = "StartupSounds"

    HashTable<text, text> projects 
    Array<File> filesOpenAtBoot
    QuorumStudio studio = undefined
    BuildManager manager = undefined
    boolean isFrameLimited = false
    number frameRate = 100
    boolean startupSounds = true

    action IsFrameLimited returns boolean
        return isFrameLimited
    end

    action GetFrameRateLimit returns number
        return frameRate
    end

    action IsStartupSound returns boolean
        return startupSounds
    end

    action SetMainApplication(QuorumStudio studio)
        me:studio = studio
        manager = studio:GetBuildManager()
    end

    action GetMainApplication returns QuorumStudio
        return studio
    end

    action GetProjects returns Array<text>
        return projects:CopyToValueArray()
    end

    action GetFilesOpenOnStartup returns Iterator<File>
        return filesOpenAtBoot:GetIterator()
    end

    action GetKeyMapFile returns File
        File file
        file:SetPath(KEYMAP_FILE)
        return file
    end

    action OpenedProject(QuorumProject project)
        File file = project:GetPropertiesLocation()
        if file not= undefined
            projects:Add(file:GetAbsolutePath(), file:GetAbsolutePath())
        end
    end

    action ClosedProject(QuorumProject project)
        File file = project:GetPropertiesLocation()
        if file not= undefined
            projects:RemoveKey(file:GetAbsolutePath())
        end
    end
    
    action Read
        File file
        file:SetPath(OPTIONS_FILE)
        text value = file:Read()

        JavaScriptObjectNotation notation
        notation:Read(value)

        //get all the properties from JSON
        i = 0
        repeat while i < notation:GetSize()
            JavaScriptObjectNotation obj = notation:Get(i)
            ProcessKey(obj)
            i = i + 1
        end
    end

    private action JSONValueProcessor(text value) returns text
        text result = value
        i = 0
        result:Replace("\", "\\")

        return result
    end

    action Write
        File file
        file:SetPath(OPTIONS_FILE)
        JavaScriptObjectNotation notation
        notation:SetPrettyPrint(true)
        JavaScriptObjectNotation array
        array:SetArray()
        
        notation:Add(OPEN_PROJECTS, array)

        Iterator<text> openProjectIterator = projects:GetValueIterator()
        repeat while openProjectIterator:HasNext()
            text next = openProjectIterator:Next()
            JavaScriptObjectNotation item
            item:SetText(JSONValueProcessor(next))
            array:Add(item)
        end

        notation:Add(FRAME_LIMITED, IsFrameLimited())
        notation:Add(FRAME_RATE, frameRate)
        notation:Add(STARTUP_SOUNDS, startupSounds)

        //if Quorum Studio instance is not null, write any other behavior 
        //we are interested in storing

        JavaScriptObjectNotation openFiles
        openFiles:SetArray()

        notation:Add(OPEN_FILES, openFiles)
        CodeEditorTabPane code = studio:GetTabPane()
        Iterator<File> openFileIterator = code:GetOpenFiles()
        repeat while openFileIterator:HasNext()
            File next = openFileIterator:Next()
            if next not= undefined
                text path = JSONValueProcessor(next:GetAbsolutePath())
                JavaScriptObjectNotation item
                item:SetText(path)
                openFiles:Add(item)
            end
        end

        Iterator<Breakpoint> breakpoints = manager:GetBreakpointIterator()
        if breakpoints:HasNext()
            JavaScriptObjectNotation activeBreakpoints
            notation:Add(BREAKPOINTS, activeBreakpoints)

            repeat while breakpoints:HasNext()
                Breakpoint bp = breakpoints:Next()
                activeBreakpoints:Add(JSONValueProcessor(bp:GetFile():GetAbsolutePath()), bp:GetLine())
            end
        end

        text value = notation:ToText()
        //write to disk once this is fixed
        file:Write(value)
    end

    private action ProcessKey(JavaScriptObjectNotation object)
        text key = object:GetKey()
        text textMessage = "Could not load property " + key + ", as its value was not of type text."
        text booleanMessage = "Could not load property " + key + ", as its value was not of type boolean."
        if key = OPEN_PROJECTS
            if object:IsEmpty() or not object:IsArray()
                return now
            end

            i = 0
            repeat while i < object:GetSize()
                JavaScriptObjectNotation value = object:Get(i)
                if value:IsText()
                    text project = value:GetText()
                    File file
                    file:SetAbsolutePath(project)
                    if file:Exists()
                        projects:Add(project, project)
                    end
                end
                i = i + 1
            end
        elseif key = OPEN_FILES
            if object:IsEmpty() or not object:IsArray()
                return now
            end

            i = 0
            repeat while i < object:GetSize()
                JavaScriptObjectNotation value = object:Get(i)
                if value:IsText()
                    text path = value:GetText()
                    File file
                    file:SetAbsolutePath(path)
                    if file:Exists()
                        filesOpenAtBoot:Add(file)
                    end
                end
                i = i + 1
            end
        elseif key = FRAME_LIMITED
            if object:IsBoolean()
                boolean value = object:GetBoolean()
                me:isFrameLimited = value
            end
        elseif key = FRAME_RATE
            if object:IsNumber()
                number value = object:GetNumber()
                integer min = 20
                if value < min
                    me:frameRate = min
                else
                    me:frameRate = value
                end
            end
        elseif key = STARTUP_SOUNDS
            if object:IsBoolean()
                boolean value = object:GetBoolean()
                me:startupSounds = value
            end
        elseif key = BREAKPOINTS
            if object:IsEmpty()
                return now
            end

            i = 0
            repeat while i < object:GetSize()
                JavaScriptObjectNotation subobject = object:Get(i)
                text location = subobject:GetKey()
                integer line = subobject:GetInteger()

                File file
                file:SetAbsolutePath(location)
                if file:Exists()
                    manager:ToggleBreakpoint(file, line)
                end
                i = i + 1
            end
        end
    end
end