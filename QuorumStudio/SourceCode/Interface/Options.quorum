package Libraries.Development.Environment.Configuration
use Libraries.System.File
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Containers.Array
use Libraries.Development.Environment.Projects.ProjectListener
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Development.Environment.Studio.CodeEditorTabPane
use Libraries.Development.Environment.Studio.Build.BuildManager
use Libraries.Language.Debug.Breakpoint
use Libraries.System.Properties
use Libraries.Development.Environment.Projects.ProjectTree
use Libraries.Development.Environment.Projects.ProjectTreeItem
use Libraries.Game.GameStateManager
use Libraries.Game.DesktopApplication
use Libraries.Game.DesktopConfiguration

class Options is ProjectListener
    constant text OPTIONS_FILE = "Configuration/Options.json"
    constant text KEYMAP_FILE = "Configuration/KeyMap.json"
    constant text PROJECTS_LOCATION = "Projects Folder"
    constant text OPEN_PROJECTS = "Open Projects"
    constant text OPEN_FILES = "Open Files"
    constant text BREAKPOINTS = "Breakpoints"
    constant text BREAKPOINT = "Breakpoint"
    constant text FRAME_RATE = "Frame Rate"
    constant text FRAMES_PER_SECOND_COUNTER = "Frames Per Second Counter"
    constant text SCALE = "Scale"
    constant text WINDOW_WIDTH = "Width"
    constant text WINDOW_HEIGHT = "Height"
    constant text TREE_STATE = "Tree State"
    constant text TREE_SELECT = "Tree Select"

    File optionsLocation
    File keymapLocation
    File projectsLocation
    boolean placeConfigInAppDataOnWindows = true
    boolean placeConfigInApplicationSupportOnMac = true

    on create
        Properties prop
        text value = prop:GetEnvironmentVariable("APPDATA")
        text projLocation = ""

        //If we're on windows, we need to place our config files into app data
        //to avoid requiring admin access in the installed version
        if prop:IsWindows() and placeConfigInAppDataOnWindows
            File file
            file:SetWorkingDirectory(value)
            file:SetPath("Quorum Studio")
            if not file:Exists()
                file:CreateDirectory()
            end

            File newOptionsFile
            newOptionsFile:SetWorkingDirectory(file:GetAbsolutePath())
            newOptionsFile:SetPath("Options.json")
            optionsLocation = newOptionsFile

            File newKeyMapFile
            newKeyMapFile:SetWorkingDirectory(file:GetAbsolutePath())
            newKeyMapFile:SetPath("KeyMap.json")
            keymapLocation = newKeyMapFile

            projLocation = prop:GetEnvironmentVariable("USERPROFILE") + "\Documents"
        elseif prop:IsMac() and placeConfigInApplicationSupportOnMac
            ///Users/username/Library/Application Support
            text home = prop:GetProperty("user.home")
            File file
            file:SetWorkingDirectory(home)
            file:SetPath("Library/Application Support/Quorum Studio")
            if not file:Exists()
                file:CreateDirectory()
            end

            File newOptionsFile
            newOptionsFile:SetWorkingDirectory(file:GetAbsolutePath())
            newOptionsFile:SetPath("Options.json")
            optionsLocation = newOptionsFile

            File newKeyMapFile
            newKeyMapFile:SetWorkingDirectory(file:GetAbsolutePath())
            newKeyMapFile:SetPath("KeyMap.json")
            keymapLocation = newKeyMapFile

            projLocation = prop:GetEnvironmentVariable("HOME")
        else
            File file
            file:SetPath("Configuration")
            if not file:Exists()
                file:CreateDirectory()
            end

            projLocation = prop:GetEnvironmentVariable("HOME")

            optionsLocation:SetPath(OPTIONS_FILE)
            keymapLocation:SetPath(KEYMAP_FILE)
        end
        projectsLocation:SetWorkingDirectory(projLocation)
        projectsLocation:SetPath("Quorum Studio")
    end

    HashTable<text, text> projects 
    HashTable<text, text> treeState
    Array<File> filesOpenAtBoot
    QuorumStudio studio = undefined
    BuildManager manager = undefined
    number frameRate = 80
    boolean fpsCounter = false
    number scale = 2
    integer width = 2500
    integer height = 1500
    text treeSelect = ""

    action GetInterfaceScale returns number
        return scale
    end

    action SetInterfaceScale(number scale)
        me:scale = scale
    end
    
    action GetWidth returns integer
        return width
    end

    action GetHeight returns integer
        return height
    end

    action SetWidth(integer width)
        me:width = width
    end

    action SetHeight(integer height)
        me:height = height
    end

    action IsShowingFramesPerSecondCounter returns boolean
        return fpsCounter
    end

    action SetIsShowingFramesPerSecondCounter(boolean frames)
        fpsCounter = frames
    end

    action GetFrameRateLimit returns number
        return frameRate
    end

    action SetMainApplication(QuorumStudio studio)
        me:studio = studio
        manager = studio:GetBuildManager()
    end

    action GetMainApplication returns QuorumStudio
        return studio
    end

    action GetProjects returns Array<text>
        return projects:CopyToValueArray()
    end

    action GetFilesOpenOnStartup returns Iterator<File>
        return filesOpenAtBoot:GetIterator()
    end

    action GetTreeState returns HashTable<text, text>
        return treeState
    end

    action GetTreeSelect returns text
        return treeSelect
    end

    action GetKeyMapFile returns File
        return keymapLocation
    end

    action GetOptionsFile returns File
        return optionsLocation
    end

    action GetProjectsFolder returns File
        return projectsLocation
    end

    action OpenedProject(QuorumProject project)
        File file = project:GetPropertiesLocation()
        if file not= undefined
            projects:Add(file:GetAbsolutePath(), file:GetAbsolutePath())
        end
    end

    action ClosedProject(QuorumProject project)
        File file = project:GetPropertiesLocation()
        if file not= undefined
            projects:RemoveKey(file:GetAbsolutePath())
        end
    end
    
    action Read
        File file = GetOptionsFile()
        //it is just fine if the file isn't there. Bail and let the system generate it later
        if not file:Exists()
            return now
        end
        text value = file:Read()
        value = value:Replace("\\", "\")
        JavaScriptObjectNotation notation
        notation:Read(value)

        //get all the properties from JSON
        i = 0
        repeat while i < notation:GetSize()
            JavaScriptObjectNotation obj = notation:Get(i)
            ProcessKey(obj)
            i = i + 1
        end
    end

    private action JSONValueProcessor(text value) returns text
        text result = value
        i = 0
        result:Replace("\", "\\")

        return result
    end

    action Write
        File file = GetOptionsFile()
        JavaScriptObjectNotation notation
        notation:SetPrettyPrint(true)
        JavaScriptObjectNotation array
        array:SetArray()
        
        notation:Add(OPEN_PROJECTS, array)

        Iterator<text> openProjectIterator = projects:GetValueIterator()
        repeat while openProjectIterator:HasNext()
            text next = openProjectIterator:Next()
            JavaScriptObjectNotation item
            item:SetText(next)
            array:Add(item)
        end

        notation:Add(PROJECTS_LOCATION, projectsLocation:GetAbsolutePath())
        notation:Add(FRAME_RATE, frameRate)
        notation:Add(FRAMES_PER_SECOND_COUNTER, fpsCounter)
        notation:Add(SCALE, scale)
        notation:Add(WINDOW_WIDTH, width)
        notation:Add(WINDOW_HEIGHT, height)
        
        //if Quorum Studio instance is not null, write any other behavior 
        //we are interested in storing

        JavaScriptObjectNotation openFiles
        openFiles:SetArray()

        notation:Add(OPEN_FILES, openFiles)
        CodeEditorTabPane code = studio:GetTabPane()
        Iterator<File> openFileIterator = code:GetOpenFiles()
        repeat while openFileIterator:HasNext()
            File next = openFileIterator:Next()
            if next not= undefined
                text path = JSONValueProcessor(next:GetAbsolutePath())
                JavaScriptObjectNotation item
                item:SetText(path)
                openFiles:Add(item)
            end
        end

        Iterator<Breakpoint> breakpoints = manager:GetBreakpointIterator()
        if breakpoints:HasNext()
            JavaScriptObjectNotation activeBreakpoints
            notation:Add(BREAKPOINTS, activeBreakpoints)

            repeat while breakpoints:HasNext()
                Breakpoint bp = breakpoints:Next()
                activeBreakpoints:Add(JSONValueProcessor(bp:GetFile():GetAbsolutePath()), bp:GetLine())
            end
        end
           
        JavaScriptObjectNotation openTrees
        openTrees:SetArray()
        notation:Add(TREE_STATE, openTrees)
        ProjectTree projectTree = studio:GetProjectTree()
        Iterator<text> openItems = projectTree:GetExpandState():GetValueIterator()
        repeat while openItems:HasNext()
            text path = openItems:Next()
            path = JSONValueProcessor(path)
            JavaScriptObjectNotation item
            item:SetText(path)
            openTrees:Add(item)
        end

        ProjectTreeItem select = cast(ProjectTreeItem, projectTree:GetSelection():GetTreeItem())
        if select not= undefined
            notation:Add(TREE_SELECT, select:GetFile():GetAbsolutePath())
        end
        text value = notation:ToText()
        //write to disk once this is fixed
        //sanitize the input first
        value = value:Replace("\", "\\")
        file:Write(value)
    end

    private action ProcessKey(JavaScriptObjectNotation object)
        text key = object:GetKey()
        text textMessage = "Could not load property " + key + ", as its value was not of type text."
        text booleanMessage = "Could not load property " + key + ", as its value was not of type boolean."
        if key = OPEN_PROJECTS
            if object:IsEmpty() or not object:IsArray()
                return now
            end

            i = 0
            repeat while i < object:GetSize()
                JavaScriptObjectNotation value = object:Get(i)
                if value:IsText()
                    text project = value:GetText()
                    File file
                    file:SetAbsolutePath(project)
                    if file:Exists()
                        projects:Add(project, project)
                    end
                end
                i = i + 1
            end
        elseif key = OPEN_FILES
            if object:IsEmpty() or not object:IsArray()
                return now
            end

            i = 0
            repeat while i < object:GetSize()
                JavaScriptObjectNotation value = object:Get(i)
                if value:IsText()
                    text path = value:GetText()
                    File file
                    file:SetAbsolutePath(path)
                    if file:Exists()
                        filesOpenAtBoot:Add(file)
                    end
                end
                i = i + 1
            end
        elseif key = FRAMES_PER_SECOND_COUNTER
            if object:IsBoolean()
                boolean value = object:GetBoolean()
                me:fpsCounter = value
            end
        elseif key = FRAME_RATE
            if object:IsNumber()
                number value = object:GetNumber()
                integer min = 20
                if value < min
                    me:frameRate = min
                else
                    me:frameRate = value
                end

                GameStateManager manager
                DesktopConfiguration configuration = manager:GetGame():GetDesktopConfiguration()
                configuration:targetFramesPerSecond = cast(integer, me:frameRate)
            end
        elseif key = SCALE
            if object:IsNumber()
                number value = object:GetNumber()
                number min = 0.1
                number max = 500
                if value < min
                    me:scale = min
                elseif value > max
                    me:scale = max
                else
                    me:scale = value
                end
            end
        elseif key = WINDOW_WIDTH
            if object:IsInteger()
                integer value = object:GetInteger()
                integer min = 100
                if value < min
                    me:width = min
                else
                    me:width = value
                end
            end
        elseif key = WINDOW_HEIGHT
            if object:IsInteger()
                integer value = object:GetInteger()
                integer min = 100
                if value < min
                    me:height = min
                else
                    me:height = value
                end
            end
        elseif key = BREAKPOINTS
            if object:IsEmpty()
                return now
            end

            i = 0
            repeat while i < object:GetSize()
                JavaScriptObjectNotation subobject = object:Get(i)
                text location = subobject:GetKey()
                integer line = subobject:GetInteger()

                File file
                file:SetAbsolutePath(location)
                if file:Exists()
                    manager:ToggleBreakpoint(file, line)
                end
                i = i + 1
            end
        elseif key = TREE_STATE
            if object:IsEmpty() or not object:IsArray()
                return now
            end
            i = 0
            repeat while i < object:GetSize()
                JavaScriptObjectNotation value = object:Get(i)
                if value:IsText()
                    text item = value:GetText()
                    treeState:Add(item, item)
                end
                i = i + 1
            end

        elseif key = TREE_SELECT
            if object:IsText()
                me:treeSelect = object:GetText()
            end

        elseif key = PROJECTS_LOCATION
            if object:IsText()
                me:projectsLocation:SetAbsolutePath(object:GetText())
            end
        end
    end
end