package Libraries.Development.Environment.Studio.Interface.VisualEditor

use Libraries.Game.Graphics.Model
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Material
use Libraries.Game.Graphics.ColorAttribute
use Libraries.Compute.Matrix4

class NewAudio3DPreview is NewItemPreview3D, EditorAudio3D
/*
    text source = ""

    number maxVolumeDistance = 1
    number rolloffRate = 1
    
    number volume = 1
    number pitch = 1
    
    boolean playOnLoad = false
    boolean looping = false
    boolean doppler = true
*/
    action Load(VisualSceneController controller, Audio3DBlueprint schematic)
        SetController(controller)
        SetItemBlueprint(schematic)

        SetName(schematic:GetName() + controller:GetNextNamePostfix(schematic:GetName()))
        SetDescription(schematic:GetDescription())

        LoadBox(0.5, 0.5, 0.5, schematic:GetModelTexture())

        Color color
        color:SetColor(1, 1, 1, 0.75)
    
        // We need to add a diffuse color attribute to the model so that the textured box also supports color.
        Material material = GetMaterials():Get(0)
        ColorAttribute attribute
        attribute:SetAttribute(attribute:GetDiffuseValue(), color)
        material:Add(attribute)

        source = schematic:GetSource()
        maxVolumeDistance = schematic:GetMaxVolumeDistance()
        rolloffRate = schematic:GetRolloffRate()
        volume = schematic:GetVolume()
        pitch = schematic:GetPitch()
        playOnLoad = schematic:GetPlayOnLoad()
        looping = schematic:GetLooping()
        doppler = schematic:GetDoppler()

        EditorCursor cursor = controller:GetCursor()
        if cursor is EditorCursor3D
            EditorCursor3D cursor3D = cast(EditorCursor3D, cursor)
            SetPosition(cursor3D:GetX(), cursor3D:GetY(), cursor:GetZ())
        end
    end

    action ConvertToModel returns Model
        EditorAudio3D audio
        audio:LoadPlaceholderBox()

        audio:SetName(GetName())
        audio:SetDescription(GetDescription())

        audio:SetSource(GetSource())
        audio:SetMaximumVolumeDistance(GetMaximumVolumeDistance())
        audio:SetRolloffRate(GetRolloffRate())
        audio:SetVolume(GetVolume())
        audio:SetPitch(GetPitch())
        audio:SetPlayOnLoad(GetPlayOnLoad())
        audio:SetLooping(GetLooping())
        audio:SetDoppler(GetDoppler())

        audio:SetPosition(GetPosition())

        return audio
    end
/*
    action GetSource returns text
        return source
    end

    action SetSource(text source)
        me:source = source
    end

    action GetMaxVolumeDistance returns number
        return maxVolumeDistance
    end

    action SetMaxVolumeDistance(number maxVolumeDistance)
        me:maxVolumeDistance = maxVolumeDistance
    end

    action SetRolloffRate(number rolloffRate)
        me:rolloffRate = rolloffRate
    end

    action GetRolloffRate returns number
        return rolloffRate
    end

    action GetVolume returns number
        return volume
    end

    action SetVolume(number volume)
        me:volume = volume
    end

    action GetPitch returns number
        return pitch
    end

    action SetPitch(number pitch)
        me:pitch = pitch
    end

    action GetPlayOnLoad returns boolean
        return playOnLoad
    end

    action SetPlayOnLoad(boolean playOnLoad)
        me:playOnLoad = playOnLoad
    end

    action GetLooping returns boolean
        return looping
    end

    action SetLooping(boolean looping)
        me:looping = looping
    end

    action GetDoppler returns boolean
        return doppler
    end

    action SetDoppler(boolean doppler)
        me:doppler = doppler
    end
*/
end