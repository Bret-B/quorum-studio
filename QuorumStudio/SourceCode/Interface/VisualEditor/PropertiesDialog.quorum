package Libraries.Development.Environment.Studio.Interface.VisualEditor

use Libraries.Interface.Events.SelectionListener
use Libraries.Interface.Events.TextChangeListener
use Libraries.Interface.Controls.Dialog
use Libraries.Interface.Controls.Control
use Libraries.Containers.Array
use Libraries.Interface.Views.LabelBoxView
use Libraries.Game.Graphics.Color
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Layouts.LayoutProperties

class PropertiesDialog is Dialog, SelectionListener, TextChangeListener

    boolean initialized = false
    VisualSceneController controller = undefined

    on create
        SetInputGroup("PropertiesDialog")

        SetPixelWidth(300)
        SetVerticalLayoutMode(parent:Libraries.Interface.Controls.Control:FIT_CONTENTS)
    end

    action Initialize(VisualSceneController controller)
        if initialized
            return now
        end

        initialized = true

        // Used to set focus order at the end of this action.
        Array<Control> focusArray

        me:controller = controller
        controller:AddSelectionListener(me)

        LabelBoxView view
        Color color
        view:SetBorderThickness(1)
        view:SetBorderStyle(view:ALL - view:TOP)
        view:Initialize(color:CustomColor(0.9, 0.9, 0.9, 1), color:Black())
        
        Control panel
        FlowLayout propertiesLayout
        panel:SetLayout(propertiesLayout)
        panel:SetPercentageWidth(1.0)
        panel:SetVerticalLayoutMode(panel:FIT_CONTENTS)
        panel:SetBorderColor(color:Black())
        panel:SetBorderThickness(1)
        panel:SetView2D(view)

        // Generate the contents of the panel and the tab-path.
        // Implemented on a per-dialog basis.
        CreateInterface(panel, focusArray)
     
        Add(panel)

        // Set up focus targets.
        focusArray:Get(0):SetPreviousFocus(focusArray:Get(focusArray:GetSize() - 1))
        focusArray:Get(0):SetNextFocus(focusArray:Get(1))

        integer i = 1
        repeat while i < focusArray:GetSize()
            Control control = focusArray:Get(i)
            control:SetPreviousFocus(focusArray:Get(i - 1))
            control:SetNextFocus(focusArray:Get((i + 1) mod focusArray:GetSize()))
            i = i + 1
        end   
    end

    /*
    This action should be used to place controls on the provided panel to make up the
    UI of the dialog. The panel is already set with a FlowLayout and a view. Each 
    item that is keyboard navigable should also be added to the focus array to create
    the ordered tab-through path.
    */
    private blueprint action CreateInterface(Control panel, Array<Control> focusArray)

    action GetSceneController returns VisualSceneController
        return controller
    end

    action Show
        if controller not= undefined
            LayoutProperties properties = GetDefaultLayoutProperties()
            properties:SetPercentageX(0)
            properties:SetPercentageY(0)
            properties:SetPercentageOriginX(1)
            //properties:SetPercentageOriginY(1)
            properties:SetPixelX(controller:GetGlobalX() + controller:GetWidth() - 5)
//            properties:SetPixelY(controller:GetGlobalY() + controller:GetHeight())
            properties:SetPixelY(controller:GetGlobalY())

            /*
            // Alternate approach, meant to top-align the box, but currently bugged for some reason.

            LayoutProperties properties = GetDefaultLayoutProperties()
            properties:SetPercentageX(0)
            properties:SetPercentageY(0)
            properties:SetPercentageOriginX(1)
            properties:SetPercentageOriginY(1)
            properties:SetPixelX(controller:GetGlobalX() + controller:GetWidth() - 5)
            properties:SetPixelY(controller:GetGlobalY() + controller:GetHeight())
            //properties:SetPixelY(controller:GetGlobalY())
            */
        end
        parent:Dialog:Show()
    end

    /*
    Moves the focus to one of the fields in the properties dialog. By default
    this is the name field (the first field in the panel), but it could also be
    changed to a different field, possibly context sensitive.
    */
    blueprint action FocusField
end