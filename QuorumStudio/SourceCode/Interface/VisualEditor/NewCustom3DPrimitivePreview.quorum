package Libraries.Development.Environment.Studio.Interface.VisualEditor

use Libraries.System.File
use Libraries.Game.Graphics.Color
use Libraries.Game.Scenes.SceneProperties
use Libraries.Game.Graphics.Material
use Libraries.Game.Graphics.ColorAttribute
use Libraries.Game.Graphics.BlendingAttribute
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Interface.Controls.Scenes.Items.EditorCursor

class NewCustom3DPrimitivePreview is NewItemPreview3D

    File asset = undefined

    action Load(SceneEditor controller, Custom3DPrimitiveBlueprint schematic, File asset)
        SetController(controller)
        SetItemBlueprint(schematic)

        me:asset = asset

        Color color = schematic:GetColor():Copy()
        color:SetAlpha(color:GetAlpha() * 0.75)
        integer modelType = schematic:GetModelType()
        SceneProperties properties

        text name = asset:GetFileName()
        text extension = asset:GetFileExtension()
        // Remove the period and extension from the name
        if extension:GetSize() > 0
            name = name:GetSubtext(0, name:GetSize() - (extension:GetSize() + 1))
        end

        if modelType = properties:BOX
            LoadBox(schematic:GetWidth(), schematic:GetHeight(), schematic:GetDepth(), asset)
            name = name + " Box"
        elseif modelType = properties:SPHERE
            LoadSphere(schematic:GetWidth(), schematic:GetHeight(), schematic:GetDepth(), asset)
            name = name + " Sphere"
        elseif modelType = properties:CYLINDER
            LoadCylinder(schematic:GetWidth(), schematic:GetHeight(), schematic:GetDepth(), asset)
            name = name + " Cylinder"
        end

        SetName(name + controller:GetNextNamePostfix(schematic:GetName()))
        SetDescription(schematic:GetDescription())

        // We need to add a diffuse color attribute to the model so that the textured box also supports color,
        // and a blending attribute so that the preview supports transparency.
        Material material = GetMaterials():Get(0)
        SetColor(color)
        BlendingAttribute blend
        blend:opacity = color:GetAlpha()
        material:Add(blend)

        SetScale(schematic:GetScaleX(), schematic:GetScaleY(), schematic:GetScaleZ())
        SetRotation(schematic:GetYaw(), schematic:GetPitch(), schematic:GetRoll())

        if schematic:IsPhysicsEnabled()
            SetEditorPhysicsEnabled(true)
            if schematic:GetResponsiveness() >= 0
                SetEditorResponsiveness(schematic:GetResponsiveness())
            end
        end

        EditorCursor cursor = controller:GetCursor()
        if cursor is EditorCursor3D
            EditorCursor3D cursor3D = cast(EditorCursor3D, cursor)
            SetPosition(cursor3D:GetX(), cursor3D:GetY(), cursor:GetZ())
        end
    end

    action ConvertToModel returns Model
        Custom3DPrimitiveBlueprint schematic = cast(Custom3DPrimitiveBlueprint, GetItemBlueprint())

        EditorModel model
        model:SetName(GetName())
        
        Color color = GetColor():Copy()
        color:SetAlpha(1.0)
        integer modelType = schematic:GetModelType()
        SceneProperties properties

        if modelType = properties:BOX
            model:LoadBox(schematic:GetWidth(), schematic:GetHeight(), schematic:GetDepth(), asset)
        elseif modelType = properties:SPHERE
            model:LoadSphere(schematic:GetWidth(), schematic:GetHeight(), schematic:GetDepth(), asset)
        elseif modelType = properties:CYLINDER
            model:LoadCylinder(schematic:GetWidth(), schematic:GetHeight(), schematic:GetDepth(), asset)
        end

        // We need to add a diffuse color attribute to the model so that the textured box also supports color.
        model:SetColor(color)

        //add a property with its color for now
        JavaScriptObjectNotation jsonColor
        jsonColor:SetKey("Color")
        jsonColor:SetArray()
        jsonColor:Add(color:GetRed())
        jsonColor:Add(color:GetGreen())
        jsonColor:Add(color:GetBlue())
        jsonColor:Add(color:GetAlpha())
        model:SetProperty(jsonColor:GetKey(), jsonColor)

        JavaScriptObjectNotation jsonType
        jsonType:SetKey("Type")

        model:SetPosition(GetPosition())
        model:SetScale(GetScaleX(), GetScaleY(), GetScaleZ())
        model:SetYawPitchRoll(GetYaw(), GetPitch(), GetRoll())
        model:SetShape(GetShape())

        return model
    end

end