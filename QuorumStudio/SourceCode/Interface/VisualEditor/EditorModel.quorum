package Libraries.Development.Environment.Studio.Interface.VisualEditor

use Libraries.Game.Graphics.Model
use Libraries.Game.Graphics.Color
use Libraries.Containers.Array
use Libraries.Game.Graphics.Material
use Libraries.Game.Graphics.ColorAttribute
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Interface.Events.FocusEvent
use Libraries.Compute.Vector3
use Libraries.Game.Scenes.SceneProperties

class EditorModel is Model

    number scaleX = 1
    number scaleY = 1
    number scaleZ = 1
    number yaw = 0
    number pitch = 0
    number roll = 0

    action SetDiffuseColor(Color color)
        integer counter = 0
        Array<Material> materials = GetMaterials()
        repeat materials:GetSize() times
            Material material = materials:Get(counter)
            ColorAttribute attribute
            if material:HasAttribute(attribute:GetDiffuseValue())
                attribute = cast(ColorAttribute, material:GetAttribute(attribute:GetDiffuseValue()))
                attribute:SetAttribute(attribute:GetDiffuseValue(), color)
            end
            counter = counter + 1
        end

        JavaScriptObjectNotation colorJson
        colorJson:SetKey("Color")
        colorJson:SetArray()
        colorJson:Add(color:GetRed())
        colorJson:Add(color:GetGreen())
        colorJson:Add(color:GetBlue())
        colorJson:Add(color:GetAlpha())
        SetProperty("Color", colorJson)
    end

    action GetDiffuseColor returns Color
        if HasProperty("Color")
            Color color
            JavaScriptObjectNotation colorJson = GetProperty("Color")
            color:SetColor(colorJson:Get(0):GetNumber(), colorJson:Get(1):GetNumber(), colorJson:Get(2):GetNumber(), colorJson:Get(3):GetNumber())
            return color
        else
            integer counter = 0
            Array<Material> materials = GetMaterials()
            repeat materials:GetSize() times
                Material material = materials:Get(counter)
                ColorAttribute attribute
                if material:HasAttribute(attribute:GetDiffuseValue())
                    attribute = cast(ColorAttribute, material:GetAttribute(attribute:GetDiffuseValue()))
                    SetDiffuseColor(attribute:color)
                    return attribute:color
                end
                counter = counter + 1
            end
            return undefined
        end
    end

    action Scale(Vector3 vector)
//        number yaw = me:yaw
//        number pitch = me:pitch
//        number roll = me:roll
//        SetRotation(0, 0, 0)

        scaleX = scaleX * vector:GetX()
        scaleY = scaleY * vector:GetY()
        scaleZ = scaleZ * vector:GetZ()
        parent:Model:Scale(vector)

//        SetRotation(yaw, pitch, roll)
    end

    action SetScaleX(number scale)
//        number yaw = me:yaw
//        number pitch = me:pitch
//        number roll = me:roll
//        SetRotation(0, 0, 0)

        number modify = (1.0 /  scaleX) * scale
        scaleX = scale
        parent:Model:Scale(modify, 1, 1)

//        SetRotation(yaw, pitch, roll)
    end

    action SetScaleY(number scale)
//        number yaw = me:yaw
//        number pitch = me:pitch
//        number roll = me:roll
//        SetRotation(0, 0, 0)

        number modify = (1.0 /  scaleY) * scale
        scaleY = scale
        parent:Model:Scale(1, modify, 1)

//        SetRotation(yaw, pitch, roll)
    end

    action SetScaleZ(number scale)
//        number yaw = me:yaw
//        number pitch = me:pitch
//        number roll = me:roll
//        SetRotation(0, 0, 0)

        number modify = (1.0 /  scaleZ) * scale
        scaleZ = scale
        parent:Model:Scale(1, 1, modify)

//        SetRotation(yaw, pitch, roll)
    end

    action SetScale(number x, number y, number z)
//        number yaw = me:yaw
//        number pitch = me:pitch
//        number roll = me:roll
//        SetRotation(0, 0, 0)

        number modifyX = (1.0 /  scaleX) * x
        scaleX = x
        number modifyY = (1.0 /  scaleY) * y
        scaleY = y
        number modifyZ = (1.0 /  scaleZ) * z
        scaleZ = z

        parent:Model:Scale(modifyX, modifyY, modifyZ)

//        SetRotation(yaw, pitch, roll)
    end

    action SetRotation(Vector3 rotation)
        SetRotation(rotation:GetX(), rotation:GetY(), rotation:GetZ())
    end

    action SetRotation(number newYaw, number newPitch, number newRoll)
        number scaleX = me:scaleX
        number scaleY = me:scaleY
        number scaleZ = me:scaleZ

        SetScale(1, 1, 1)

        if roll not= 0
            Rotate(0, 0, 1, -roll)
        end
        if pitch not= 0
            Rotate(1, 0, 0, -pitch)
        end
        if yaw not= 0
            Rotate(0, 1, 0, -yaw)
        end

        yaw = newYaw
        pitch = newPitch
        roll = newRoll

        if yaw not= 0
            Rotate(0, 1, 0, yaw)
        end
        if pitch not= 0
            Rotate(1, 0, 0, pitch)
        end
        if roll not= 0
            Rotate(0, 0, 1, roll)
        end

        SetScale(scaleX, scaleY, scaleZ)
    end

    action GetYaw returns number
        return yaw
    end

    action GetPitch returns number
        return pitch
    end

    action GetRoll returns number
        return roll
    end

    action ResetScale
        Vector3 vector
        vector:Set(1.0 / scaleX, 1.0 / scaleY, 1.0 / scaleZ)
        Scale(vector)
    end

    action GetScale returns Vector3
        Vector3 vector
        vector:Set(scaleX, scaleY, scaleZ)
        return vector
    end

    action GetScaleX returns number
        return scaleX
    end

    action GetScaleY returns number
        return scaleY
    end

    action GetScaleZ returns number
        return scaleZ
    end

end