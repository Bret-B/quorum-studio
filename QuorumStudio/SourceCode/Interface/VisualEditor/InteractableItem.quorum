package Libraries.Development.Environment.Studio.Interface.VisualEditor

use Libraries.Game.Graphics.Model
use Libraries.Game.Graphics.Color
use Libraries.Containers.Array
use Libraries.Game.Graphics.Material
use Libraries.Game.Graphics.ColorAttribute
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Interface.Events.FocusEvent
use Libraries.Compute.Vector3

class InteractableItem is Model
    
    VisualEditorResources resources
    VisualSceneController controller = undefined

    number scaleX = 1
    number scaleY = 1
    number scaleZ = 1

    on create
        SetProperty(resources:EDITOR_TAG, undefined)
        SetFocusable(true)
        SetAccessibilityCode(parent:Item:CUSTOM)
    end

    action SetController(VisualSceneController controller)
        me:controller = controller
    end

    action GetController returns VisualSceneController
        return controller
    end

    action GetResources returns VisualEditorResources
        return resources
    end

    action GetAccessibleParent returns Item
        return GetController()
    end

    action GainedFocus(FocusEvent event)
        if controller not= undefined
            controller:SetSelection(me)
        end
    end

    action GainedSelection
        // Do nothing. Classes inheriting from this may do something, though.
    end

    action LostSelection
        // Do nothing. Classes inheriting from this may do something, though.
    end

    action NotifyAccessibility(text message)
        controller:NotifyAccessibility(me, message)
    end

    action SetDiffuseColor(Color color)
        integer counter = 0
        Array<Material> materials = GetMaterials()
        repeat materials:GetSize() times
            Material material = materials:Get(counter)
            ColorAttribute attribute
            if material:HasAttribute(attribute:GetDiffuseValue())
                attribute = cast(ColorAttribute, material:GetAttribute(attribute:GetDiffuseValue()))
                attribute:SetAttribute(attribute:GetDiffuseValue(), color)
            end
            counter = counter + 1
        end

        JavaScriptObjectNotation colorJson
        colorJson:SetKey("Color")
        colorJson:SetArray()
        colorJson:Add(color:GetRed())
        colorJson:Add(color:GetGreen())
        colorJson:Add(color:GetBlue())
        colorJson:Add(color:GetAlpha())
        SetProperty("Color", colorJson)
    end

    action Scale(Vector3 vector)
        scaleX = scaleX * vector:GetX()
        scaleY = scaleY * vector:GetY()
        scaleZ = scaleZ * vector:GetZ()
        parent:Model:Scale(vector)
    end

    action ResetScale
        Vector3 vector
        vector:Set(1.0 / scaleX, 1.0 / scaleY, 1.0 / scaleZ)
        Scale(vector)
    end

    action GetScale returns Vector3
        Vector3 vector
        vector:Set(scaleX, scaleY, scaleZ)
        return vector
    end
end