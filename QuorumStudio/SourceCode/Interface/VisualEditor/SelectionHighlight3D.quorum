package Libraries.Development.Environment.Studio.Interface.VisualEditor

use Libraries.Game.Scenes.SceneProperties
use Libraries.Interface.Item3D
use Libraries.Interface.Events.FocusEvent
use Libraries.Game.Graphics.Color
use Libraries.Compute.Vector3
use Libraries.Game.BoundingBox
use Libraries.Data.Formats.JavaScriptObjectNotation

class SelectionHighlight3D is InteractableItem3D, SelectionHighlight
    
    EditorModel item = undefined

    on create
        SetInputGroup("SelectionHighlight3D")
    end

    action GetAccessibleParent returns Item
        return parent:InteractableItem:GetAccessibleParent()
    end

    action Load(EditorModel item, VisualSceneController controller)
        Color color = undefined
        VisualEditorResources resources = GetResources()

        if IsFocused()
            color = resources:SELECTION_HIGHLIGHT_SELECTED_COLOR
        else
            color = resources:SELECTION_HIGHLIGHT_UNSELECTED_COLOR
        end

        number padding = resources:SELECTION_HIGHLIGHT_PADDING_3D

        SceneProperties properties

        if item:HasProperty(properties:SCALE)
            JavaScriptObjectNotation json = item:GetProperty(properties:SCALE)
            parent:EditorModel:scaleX = json:Get(0):GetNumber()
            parent:EditorModel:scaleY = json:Get(1):GetNumber()
            parent:EditorModel:scaleZ = json:Get(2):GetNumber()
        end

        number scaleX = parent:EditorModel:scaleX
        number scaleY = parent:EditorModel:scaleY
        number scaleZ = parent:EditorModel:scaleZ

        boolean loadedShape = false
        if item is Model
            Model model = cast(Model, item)
            integer type = model:GetModelType()
            if type = properties:BOX
                LoadBox(item:GetWidth() * scaleX + padding, item:GetHeight() * scaleY + padding, item:GetDepth() * scaleZ + padding, color)
                loadedShape = true
            elseif type = properties:SPHERE
                LoadSphere(item:GetWidth() * scaleX + padding, item:GetHeight() * scaleY + padding, item:GetDepth() * scaleZ + padding, color)
                loadedShape = true
            elseif type = properties:CYLINDER
                LoadCylinder(item:GetWidth() * scaleX + padding, item:GetHeight() * scaleY + padding, item:GetDepth() * scaleZ + padding, color)
                loadedShape = true
            elseif type = properties:PLANE
                LoadBox(item:GetWidth() * scaleX + padding, padding, item:GetDepth() * scaleZ + padding, color)
                loadedShape = true
            end
        end

        if loadedShape = false
            LoadBox(item:GetWidth() * scaleX + padding, item:GetHeight() * scaleY + padding, item:GetDepth() * scaleZ + padding, color)
        end

        if item:HasProperty(properties:ROTATION)
            JavaScriptObjectNotation json = item:GetProperty(properties:ROTATION)
            number yaw = json:Get(0):GetNumber()
            number pitch = json:Get(1):GetNumber()
            number roll = json:Get(2):GetNumber()

            Rotate(0, 1, 0, yaw)
            Rotate(1, 0, 0, pitch)
            Rotate(0, 0, 1, roll)

            parent:EditorModel:yaw = yaw
            parent:EditorModel:pitch = pitch
            parent:EditorModel:roll = roll
        end

        SetPosition(item:GetGlobalPosition())

        me:item = item
        SetController(controller)
    end

    action GetItem returns Item
        return item
    end

    action GainedSelection
        parent:EditorModel:SetDiffuseColor(GetResources():SELECTION_HIGHLIGHT_SELECTED_COLOR)
    end

    action LostSelection
        parent:EditorModel:SetDiffuseColor(GetResources():SELECTION_HIGHLIGHT_UNSELECTED_COLOR)
    end

    action GetDiffuseColor returns Color
        if item not= undefined
            return item:GetDiffuseColor()
        else
            return undefined
        end
    end

    action SetDiffuseColor(Color color)
        if item not= undefined
            item:SetDiffuseColor(color)
        end
    end

    action Scale(Vector3 vector)
        parent:Model:Scale(vector)
        if item not= undefined
            item:Scale(vector)
            UpdateScaleProperty()
        end
    end

    action Scale(number x, number y, number z)
        parent:Model:Scale(x, y, z)
        if item not= undefined
            item:Scale(x, y, z)
            UpdateScaleProperty()
        end
    end

    action SetScaleX(number scale)
        number modify = (1.0 /  GetScaleX()) * scale
        parent:InteractableItem3D:SetScaleX(scale)
        if item not= undefined
            item:Scale(modify, 1, 1)
            UpdateScaleProperty()
        end
    end

    action SetScaleY(number scale)
        number modify = (1.0 /  GetScaleY()) * scale
        parent:InteractableItem3D:SetScaleY(scale)
        if item not= undefined
            item:Scale(1, modify, 1)
            UpdateScaleProperty()
        end
    end

    action SetScaleZ(number scale)
        number modify = (1.0 /  GetScaleZ()) * scale
        parent:InteractableItem3D:SetScaleZ(scale)
        if item not= undefined
            item:Scale(1, 1, modify)
            UpdateScaleProperty()
        end
    end

    private action UpdateScaleProperty
        SceneProperties properties
        JavaScriptObjectNotation json = undefined
        if item:HasProperty(properties:SCALE)
            json = item:GetProperty(properties:SCALE)
        else
            JavaScriptObjectNotation newJson
            json = newJson
            json:SetArray()
            json:Add(1.0)
            json:Add(1.0)
            json:Add(1.0)
            item:SetProperty(properties:SCALE, json)
        end

        JavaScriptObjectNotation temp = json:Get(0)
        temp:SetNumber(GetScaleX())
        temp = json:Get(1)
        temp:SetNumber(GetScaleY())
        temp = json:Get(2)
        temp:SetNumber(GetScaleZ())
    end

    action SetRotation(number newYaw, number newPitch, number newRoll)
        number yaw = parent:EditorModel:yaw
        number pitch = parent:EditorModel:pitch
        number roll = parent:EditorModel:roll

        if item not= undefined
            if roll not= 0
                item:Rotate(0, 0, 1, -roll)
            end
            if pitch not= 0
                item:Rotate(1, 0, 0, -pitch)
            end
            if yaw not= 0
                item:Rotate(0, 1, 0, -yaw)
            end
    
            if newYaw not= 0
                item:Rotate(0, 1, 0, newYaw)
            end
            if newPitch not= 0
                item:Rotate(1, 0, 0, newPitch)
            end
            if newRoll not= 0
                item:Rotate(0, 0, 1, newRoll)
            end

            SceneProperties properties
            JavaScriptObjectNotation json = undefined
            if item:HasProperty(properties:ROTATION)
                json = item:GetProperty(properties:ROTATION)
            else
                JavaScriptObjectNotation newJson
                json = newJson
                json:SetArray()
                json:Add(0.0)
                json:Add(0.0)
                json:Add(0.0)
                item:SetProperty(properties:ROTATION, json)
            end
    
            JavaScriptObjectNotation temp = json:Get(0)
            temp:SetNumber(newYaw)
            temp = json:Get(1)
            temp:SetNumber(newPitch)
            temp = json:Get(2)
            temp:SetNumber(newRoll)
        end

        parent:InteractableItem3D:SetRotation(newYaw, newPitch, newRoll)
    end

    action MoveX(number x)
        parent:Model:MoveX(x)
        if item not= undefined
            item:MoveX(x)
        end
    end

    action MoveY(number y)
        parent:Model:MoveY(y)
        if item not= undefined
            item:MoveY(y)
        end
    end

    action MoveZ(number z)
        parent:Model:MoveZ(z)
        if item not= undefined
            item:MoveZ(z)
        end
    end

    action Move(number x, number y, number z)
        parent:Model:Move(x, y, z)
        if item not= undefined
            item:Move(x, y, z)
        end
    end

    action Move(Vector3 vector)
        parent:Model:Move(vector)
        if item not= undefined
            item:Move(vector)
        end
    end
end