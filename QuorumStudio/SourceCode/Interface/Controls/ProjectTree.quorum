package Libraries.Development.Environment.Projects
use Libraries.Interface.Controls.Tree
use Libraries.Interface.Selections.Selection
use Libraries.Interface.Events.SelectionListener
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.Containers.Iterator
use Libraries.Interface.Selections.TreeSelection
use Libraries.Containers.Array
use Libraries.Interface.Controls.TreeItem
use Libraries.Development.Environment.Resources
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Concurrency.ThreadRunner
use Libraries.Development.Environment.Studio.Behaviors.ProjectLoadBehavior
use Libraries.Development.Environment.Studio.Behaviors.ThreadedBehavior
use Libraries.Interface.Events.FocusEvent
use Libraries.Containers.HashTable
use Libraries.Interface.Events.TreeChangeListener
use Libraries.Interface.Events.TreeChangeEvent

class ProjectTree is Tree, SelectionListener, ProjectListener, TreeChangeListener
    ProjectManager manager = undefined
    Resources resources = undefined
    QuorumStudio studio = undefined
    HashTable<text, text> opened
    on create
        SetName("Projects")
        AddTreeChangeListener(me)
    end

    action OnFocus
    end

    action SetMainApplication(QuorumStudio studio)
        me:studio = studio
    end

    action GetMainApplication returns QuorumStudio
        return studio
    end

    action GetResources returns Resources
        return resources
    end

    action SetResources(Resources resources)
        me:resources = resources
    end

    action SetProjectManager(ProjectManager manager)
        me:manager = manager
    end

    action GetProjectManager returns ProjectManager
        return manager
    end

    action GetExpandState returns HashTable<text, text>
        return opened
    end

    action LoadSelection(text path)
        //tree is expected to have relevant treeItems already open
        if path not= ""
            Iterator<TreeItem> items = GetTreeItems()
            repeat while items:HasNext()
                ProjectTreeItem curr = cast(ProjectTreeItem, items:Next())
                if path = curr:GetFile():GetAbsolutePath()
                    Select(curr:GetTreePath())
                    return now
                end
                if curr:IsOpen()
                    if LoadSelection(path, curr)
                        return now
                    end
                end
            end
        end
    end

    //helper recursive search for selection
    private action LoadSelection(text path, ProjectTreeItem item) returns boolean
        Iterator<TreeItem> items = item:GetTreeItems()
        repeat while items:HasNext()
            ProjectTreeItem curr = cast(ProjectTreeItem, items:Next())
            if path = curr:GetFile():GetAbsolutePath()
                Select(curr:GetTreePath())
                return true
            end
            if curr:IsOpen()
                return LoadSelection(path, curr)
            end
        end
        return false
    end

    //pass in hash table of all treeitems that were open
    action LoadExpandState(HashTable<text, text> states)
        if states:IsEmpty()
            return now
        end
        integer counter = 0
        Iterator<TreeItem> items = GetTreeItems()
        ProjectTreeItem curr
        repeat while items:HasNext()
            curr = cast(ProjectTreeItem, items:Next())
            if states:HasKey(curr:GetFile():GetAbsolutePath())
                curr:Open()
                if curr:IsSubtree()
                    OpenExpandState(states, curr)
                end
            end
            counter = counter + 1
        end
    end

    //recursive helper function that goes deeper into the project tree
    private action OpenExpandState(HashTable<text, text> states, ProjectTreeItem parentItem)
        Iterator<TreeItem> value = parentItem:GetTreeItems()
        integer counter = 0
        repeat while value:HasNext()
            ProjectTreeItem curr = cast(ProjectTreeItem, value:Next())
            if states:HasKey(curr:GetFile():GetAbsolutePath())
                curr:Open()
                if curr:IsSubtree()
                    OpenExpandState(states, curr)
                end
            end
            counter = counter + 1
        end
    end

    action OpenedTree(TreeChangeEvent event)
        ProjectTreeItem item = cast(ProjectTreeItem, event:GetTreeItem())
        opened:Add(item:GetFile():GetAbsolutePath(), item:GetFile():GetAbsolutePath())
    end

    action ClosedTree(TreeChangeEvent event)
        ProjectTreeItem item = cast(ProjectTreeItem, event:GetTreeItem())
        opened:RemoveKey(item:GetFile():GetAbsolutePath())
    end

    action SelectionChanged(Selection selection)
    end

     action OpenedProject(QuorumProject project)
        ThreadRunner runner
        ThreadedBehavior threadBehavior
        ProjectLoadBehavior behave
        behave:SetTree(me)
        behave:SetProject(project)
        behave:SetResources(resources)
        behave:SetMainApplication(studio)
        behave:SetThread(runner)
        AddBehavior(behave)
    end

    action ClosedProject(QuorumProject project)
        Iterator<TreeItem> iterator = GetTreeItems()
        repeat while iterator:HasNext() 
            TreeItem item = iterator:Next()
            ProjectTreeItem projectItem = cast(ProjectTreeItem, item)
            QuorumProject proj = projectItem:GetProject()
            if project:Equals(proj)
                Remove(item)
            end
        end
        Resize()
    end
end