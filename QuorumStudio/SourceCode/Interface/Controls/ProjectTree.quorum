package Libraries.Development.Environment.Projects
use Libraries.Interface.Controls.Tree
use Libraries.Interface.Selections.Selection
use Libraries.Interface.Events.SelectionListener
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.Containers.Iterator
use Libraries.Interface.Selections.TreeSelection
use Libraries.Containers.Array
use Libraries.Interface.Controls.TreeItem
use Libraries.Development.Environment.Resources
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Concurrency.ThreadRunner
use Libraries.Development.Environment.Studio.Behaviors.ProjectLoadBehavior
use Libraries.Development.Environment.Studio.Behaviors.ThreadedBehavior
use Libraries.Interface.Events.FocusEvent

class ProjectTree is Tree, SelectionListener, ProjectListener
    ProjectManager manager = undefined
    Resources resources = undefined
    QuorumStudio studio = undefined
    
    on create
        SetName("Projects")
    end

    action SetMainApplication(QuorumStudio studio)
        me:studio = studio
    end

    action GetMainApplication returns QuorumStudio
        return studio
    end

    action GetResources returns Resources
        return resources
    end

    action SetResources(Resources resources)
        me:resources = resources
    end

    action SetProjectManager(ProjectManager manager)
        me:manager = manager
    end

    action GetProjectManager returns ProjectManager
        return manager
    end

    action SelectionChanged(Selection selection)
    end

     action OpenedProject(QuorumProject project)
        ThreadRunner runner
        ThreadedBehavior threadBehavior
        ProjectLoadBehavior behave
        behave:SetTree(me)
        behave:SetProject(project)
        behave:SetResources(resources)
        behave:SetMainApplication(studio)
        behave:SetThread(runner)
        AddBehavior(behave)
    end

    action ClosedProject(QuorumProject project)
        Iterator<TreeItem> iterator = GetTreeItems()
        repeat while iterator:HasNext() 
            TreeItem item = iterator:Next()
            ProjectTreeItem projectItem = cast(ProjectTreeItem, item)
            QuorumProject proj = projectItem:GetProject()
            if project:Equals(proj)
                Remove(item)
            end
        end
        Resize()
    end
end