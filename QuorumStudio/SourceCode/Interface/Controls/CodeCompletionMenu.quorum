package Libraries.Development.Environment.Studio.Interface

use Libraries.Interface.Controls.PopupMenu
use Libraries.Development.Environment.Studio.Build.BuildManager
use Libraries.Language.Compile.CodeCompletionResult
use Libraries.Language.Compile.CodeCompletionItem
use Libraries.Containers.Iterator
use Libraries.Game.Graphics.Color
use Libraries.Containers.Array
use Libraries.Interface.Controls.MenuItem
use Libraries.Development.Environment.Studio.Behaviors.ExecuteCodeCompletionBehavior
use Libraries.Development.Environment.Studio.Behaviors.MenuItemComparison
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.Icon
use Libraries.Game.Graphics.Texture
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Controls.MenuRoot
use Libraries.Interface.Controls.Control
use Libraries.Interface.Pools.MenuItemPool
use Libraries.Interface.Views.ControlView
use Libraries.Game.GameStateManager
use Libraries.Interface.Options.InterfaceOptions
use Libraries.Development.Environment.Configuration.OptionsConstants
use Libraries.Game.Graphics.ColorGroup
use Libraries.Game.Graphics.Font
use Libraries.System.File
use Libraries.Game.Graphics.Glyph
use Libraries.Game.Graphics.TextureRegion
use Libraries.Interface.Controls.Blocks.CodeEditor

class CodeCompletionMenu is PopupMenu

    CodeTextBox textBox = undefined //raw text
    CodeEditor editor = undefined //block editor
    BuildManager builder = undefined
    
    Icon primitiveIcon
    Icon actionIcon
    Icon actionPrivateIcon
    Icon fieldIcon
    Icon fieldPrivateIcon
    Icon packageIcon
    Icon variableIcon
    Icon parentIcon
    Icon classIcon
    integer resultSize = 0
    boolean isParsing = false

    Array<MenuItem> primitives
    Array<MenuItem> other
    Array<MenuItem> packages
    Array<MenuItem> classes
    Array<MenuItem> locals
    Array<MenuItem> fields
    Array<MenuItem> parentFields
    Array<MenuItem> actions
    Array<MenuItem> emptyMenu
    MenuItem emptyItem

    Font fontAwesome
    MenuItemPool itemPool

    // Used to alternate the colors of MenuItems in the code completion window.
    boolean useFirstColor = true

    on create
        SetInputGroup("CodeCompletionMenuRoot")
        SetScrollable(true)
        File file
        file:SetPath("Resources/Fonts/Font Awesome 6 Free-Solid-900.otf")
        fontAwesome:LoadFont(file)
        fontAwesome:SetSize(40)
    end

    action LoadGraphics(LayoutProperties properties)
        parent:PopupMenu:LoadGraphics(properties)

        //If loaded from here, MenuItems override their colors in the parent's load graphics.
        //Is that a bug? Feels like it
    end

    action GetTextBox returns CodeTextBox
        return textBox
    end

    action SetTextBox(CodeTextBox textBox)
        me:textBox = textBox
    end

    /* This is an explicit request by the user to initiate code completion.
    */
    action Generate(BuildManager builder)
        me:builder = builder

        Filter(undefined)

        if IsEmpty() = false
            integer size = GetSize()

            //If there's only one item and it's in the empty menu, the user probably just popped up
            //an empty window, which isn't terribly useful. This still appears to fill properly to one
            //item if filled later, but correctly ignores it if it's empty on initial setup.
            //Common example: You type a period at the end of a sentence in a comment, which would
            //otherwise pop-up code completion.
            if size = 1 //check if it's the empty menu and ignore it if it is
                if emptyMenu:GetSize() = 1
                    return now
                end
            end
            if textBox not= undefined
                number x = textBox:GetCaretGlobalX()
                number y = textBox:GetCaretGlobalY()
                OpenAt(x, y)
            elseif editor not= undefined
                number x = editor:GetCaretGlobalX()
                number y = editor:GetCaretGlobalY()
                OpenAt(x, y)
            end
        end
    end

    

    action Empty
        repeat while parent:PopupMenu:panel:IsEmpty() = false
            MenuItem item = parent:PopupMenu:panel:GetFromEnd()
            itemPool:Recycle(item)
            Remove(item)
        end

        primitives:Empty()
        other:Empty()
        packages:Empty()
        classes:Empty()
        locals:Empty()
        fields:Empty()
        parentFields:Empty()
        actions:Empty()
        emptyMenu:Empty()
    end

    private action GetGlyphTexture(integer unicode) returns TextureRegion
        text value = ""
        value = value:GetUnicodeValue(unicode)
        
        Glyph glyph = fontAwesome:GetGlyph(value)
        return glyph:texture
    end

    boolean loadedOnce = false
    action Filter(BehaviorEvent event)
        if not loadedOnce
            primitiveIcon:Load(GetGlyphTexture(62930))
            fieldIcon:Load(GetGlyphTexture(62163))
            fieldPrivateIcon:Load(GetGlyphTexture(61766))
            actionIcon:Load(GetGlyphTexture(61729))
            actionPrivateIcon:Load(GetGlyphTexture(61475))
            variableIcon:Load(GetGlyphTexture(61453))
            parentIcon:Load(GetGlyphTexture(61827))
            classIcon:Load(GetGlyphTexture(63087))
            packageIcon:Load(GetGlyphTexture(62566))
            loadedOnce = true
        end
        Regenerate()
    end

    private action Regenerate
        CodeCompletionResult result = builder:RequestCodeCompletion()
        
        //the system is telling us we're between parses. Just ignore this request
        if result = undefined
            isParsing = true
            return now
        elseif not result:IsValidCodeCompletion()
            isParsing = true
            return now
        else //seems like a valid request
            isParsing = false
        end
        
        Iterator<CodeCompletionItem> iterator = result:GetIterator()
        Empty()
        resultSize = 0
        if not iterator:HasNext()
            return now
        end

        useFirstColor = true
        
        GameStateManager manager
        InterfaceOptions io = manager:GetInterfaceOptions()
        OptionsConstants const

        repeat while iterator:HasNext()
            CodeCompletionItem code = iterator:Next()
            if (code:displayText:StartsWith(result:filter)) or (((not code:displayText:IsEmpty()) and result:filter:IsEmpty()))
                MenuItem item = itemPool:GetNextMenuItem()
                resultSize = resultSize + 1
                item:SetName(code:displayText)
                item:SetShortcut(code:rightDisplayText)
                item:SetDescription(code:documentationText)

                ExecuteCodeCompletionBehavior behave
                behave:SetMenu(me)
                behave:SetTextBox(textBox)
                behave:SetCodeEditor(editor)
                behave:SetCodeCompletionItem(code)
                behave:SetCodeCompletionResult(result)
                item:SetBehavior(behave)

                if code:GetType() = code:LOCAL_VARIABLE
                    item:SetIcon(variableIcon)
                    item:SetIconColor(io:GetColorProperty(const:CODE_COMPLETION_VARIABLE_ICON_COLOR))
                    locals:Add(item)
                elseif code:GetType() = code:PARAMETER
                    item:SetIcon(variableIcon)
                    item:SetIconColor(io:GetColorProperty(const:CODE_COMPLETION_VARIABLE_ICON_COLOR))
                    locals:Add(item)
                elseif code:GetType() = code:PRIVATE_FIELD_VARIABLE
                    item:SetIcon(fieldPrivateIcon)
                    item:SetIconColor(io:GetColorProperty(const:CODE_COMPLETION_PRIVATE_ACTION_ICON_COLOR))
                    fields:Add(item)
                elseif code:GetType() = code:PUBLIC_FIELD_VARIABLE
                    item:SetIcon(fieldIcon)
                    item:SetIconColor(io:GetColorProperty(const:CODE_COMPLETION_FIELD_ICON_COLOR))
                    fields:Add(item)
                elseif code:GetType() = code:PRIVATE_ACTION
                    item:SetIcon(actionPrivateIcon)
                    item:SetIconColor(io:GetColorProperty(const:CODE_COMPLETION_PRIVATE_ACTION_ICON_COLOR))
                    actions:Add(item)
                elseif code:GetType() = code:PUBLIC_ACTION
                    item:SetIcon(actionIcon)
                    item:SetIconColor(io:GetColorProperty(const:CODE_COMPLETION_ACTION_ICON_COLOR))
                    actions:Add(item)
                elseif code:GetType() = code:PRIVATE_SYSTEM_ACTION
                    item:SetIcon(actionPrivateIcon)
                    item:SetIconColor(io:GetColorProperty(const:CODE_COMPLETION_PRIVATE_ACTION_ICON_COLOR))
                    actions:Add(item)
                elseif code:GetType() = code:PUBLIC_SYSTEM_ACTION
                    item:SetIcon(actionIcon)
                    item:SetIconColor(io:GetColorProperty(const:CODE_COMPLETION_ACTION_ICON_COLOR))
                    actions:Add(item)
                elseif code:GetType() = code:PUBLIC_BLUEPRINT_ACTION
                    item:SetIcon(actionIcon)
                    item:SetIconColor(io:GetColorProperty(const:CODE_COMPLETION_ACTION_ICON_COLOR))
                    actions:Add(item)
                elseif code:GetType() = code:CLASS
                    item:SetIcon(classIcon)
                    item:SetIconColor(io:GetColorProperty(const:CODE_COMPLETION_CLASS_ICON_COLOR))
                    classes:Add(item)
                elseif code:GetType() = code:PRIMITIVE
                    item:SetIcon(primitiveIcon)
                    item:SetIconColor(io:GetColorProperty(const:CODE_COMPLETION_PRIMITIVE_ICON_COLOR))
                    primitives:Add(item)
                elseif code:GetType() = code:CONTROL_STRUCTURE
                    item:SetIcon(primitiveIcon)
                    item:SetIconColor(io:GetColorProperty(const:CODE_COMPLETION_PRIMITIVE_ICON_COLOR))
                    primitives:Add(item)
                elseif code:GetType() = code:PACKAGE
                    item:SetIcon(packageIcon)
                    item:SetIconColor(io:GetColorProperty(const:CODE_COMPLETION_PACKAGE_ICON_COLOR))
                    packages:Add(item)
                elseif code:GetType() = code:PARENT_FIELD_PRIVATE
                    item:SetIcon(parentIcon)
                    item:SetIconColor(io:GetColorProperty(const:CODE_COMPLETION_PARENT_ICON_COLOR))
                    parentFields:Add(item)
                elseif code:GetType() = code:PARENT_FIELD_PUBLIC
                    item:SetIcon(parentIcon)
                    item:SetIconColor(io:GetColorProperty(const:CODE_COMPLETION_PARENT_ICON_COLOR))
                    parentFields:Add(item)
                end

                LayoutProperties prop = item:GetDefaultLayoutProperties()
                prop:SetRenderingFlag(false)
            end
        end

        MenuItemComparison compare
        AddToResult(locals, compare)
        AddToResult(fields, compare)
        AddToResult(actions, compare)
        AddToResult(primitives, compare)
        AddToResult(parentFields, compare)
        AddToResult(packages, compare)
        AddToResult(classes, compare)
        AddToResult(other, compare)

        if IsEmpty() = false and GetSelection():IsEmpty() = true
            // Moving the selection down forces the menu to select the first
            // item if the selection was empty.
            MoveSelectionDown()
        elseif IsEmpty() //if the selection is empty, then we have filtered everything out. Add a placeholder
            MenuItem emptyItem = itemPool:GetNextMenuItem()
            emptyItem:SetName("No Code Completion Available")
            emptyItem:SetShortcut("")
            emptyItem:SetDescription("There is currently no known valid options in the code completion.")
            //emptyItem:SetLabelText("No Code Completion Available")
            emptyItem:SetIcon(actionPrivateIcon)
            emptyItem:SetIconColor(io:GetColorProperty(const:CODE_COMPLETION_PRIVATE_ACTION_ICON_COLOR))
            emptyMenu:Add(emptyItem)
            AddToResult(emptyMenu, compare)
            resultSize = resultSize + 1
        end
    end

    private action AddToResult(Array<MenuItem> items, MenuItemComparison compare)
        GameStateManager manager
        InterfaceOptions io = manager:GetInterfaceOptions()
        OptionsConstants const
        
        ColorGroup primary = io:GetColorProperty(const:CODE_COMPLETION_PRIMARY_COLOR)
        ColorGroup secondary = io:GetColorProperty(const:CODE_COMPLETION_SECONDARY_COLOR)
        items:Sort(compare)
        i = 0
        repeat while i < items:GetSize()
            MenuItem item = items:Get(i)
            Add(item)

            if useFirstColor
                item:SetBackgroundColor(primary)
            else
                item:SetBackgroundColor(secondary)
            end

            useFirstColor = not useFirstColor

            i = i + 1
        end
    end

    action IsCompletionItemsEmpty returns boolean
        return resultSize = 0
    end

    action Close
        parent:PopupMenu:Close()
    end

    action GetBuilder returns BuildManager
        return builder
    end

    action IsParsing returns boolean
        return isParsing
    end

    action SetIsParsing(boolean isParsing)
        me:isParsing = isParsing
    end

    action GetCodeEditor returns CodeEditor
        return editor
    end

    action SetCodeEditor(CodeEditor editor)
        me:editor = editor
    end

end