package Libraries.Development.Environment.Studio.Interface

use Libraries.Interface.Controls.PopupMenu
use Libraries.Development.Environment.Studio.Build.BuildManager
use Libraries.Language.Compile.CodeCompletionResult
use Libraries.Language.Compile.CodeCompletionItem
use Libraries.Containers.Iterator
use Libraries.Game.Graphics.Color
use Libraries.Containers.Array
use Libraries.Interface.Controls.MenuItem
use Libraries.Development.Environment.Studio.Behaviors.ExecuteCodeCompletionBehavior
use Libraries.Development.Environment.Studio.Behaviors.MenuItemComparison
use Libraries.Interface.Events.BehaviorEvent
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.Icon
use Libraries.Game.Graphics.Texture
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Controls.MenuRoot
use Libraries.Interface.Controls.Control
use Libraries.Interface.Pools.MenuItemPool
use Libraries.Interface.Views.ControlView

class CodeCompletionMenu is PopupMenu

    CodeTextBox textBox = undefined
    BuildManager builder = undefined
    Color primaryColor
    Color secondaryColor
    
    Icon primitiveIcon
    Icon actionIcon
    Icon actionPrivateIcon
    Icon fieldIcon
    Icon defaultIcon
    Icon packageIcon
    Icon variableIcon
    Icon parentIcon
    Icon classIcon
    integer resultSize = 0
    boolean isParsing = false

    Array<MenuItem> primitives
    Array<MenuItem> other
    Array<MenuItem> packages
    Array<MenuItem> classes
    Array<MenuItem> locals
    Array<MenuItem> fields
    Array<MenuItem> parentFields
    Array<MenuItem> actions

    MenuItemPool itemPool

    // Used to alternate the colors of MenuItems in the code completion window.
    boolean useFirstColor = true

    on create
        SetInputGroup("CodeCompletionMenuRoot")
        SetScrollable(true)
        primaryColor:SetColor(1.0, 1.0, 1.0, 1.0)
        secondaryColor:SetColor(250.0/255.0, 250.0/255.0, 250.0/255.0, 1)

        Color border = primaryColor:CustomColor(156.0/255.0, 156.0/255.0, 156.0/255.0, 1)
        SetBorderColor(border)
        SetBorderThickness(2)
        // 15 is the integer constant value of the "ALL" border style in LayoutProperties
        GetDefaultLayoutProperties():SetBorderStyle(15)
    end

    action LoadGraphics(LayoutProperties properties)
        parent:PopupMenu:LoadGraphics(properties)

        //If loaded from here, MenuItems override their colors in the parent's load graphics.
        //Is that a bug? Feels like it
    end

    action GetTextBox returns CodeTextBox
        return textBox
    end

    action SetTextBox(CodeTextBox textBox)
        me:textBox = textBox
    end

    /* This is an explicit request by the user to initiate code completion.
    */
    action Generate(BuildManager builder)
        me:builder = builder

        Filter(undefined)

        number x = textBox:GetCaretGlobalX()
        number y = textBox:GetCaretGlobalY()
        OpenAt(x, y)
    end

    

    action Empty
        repeat while parent:PopupMenu:panel:IsEmpty() = false
            MenuItem item = parent:PopupMenu:panel:GetFromEnd()
            itemPool:Recycle(item)
            Remove(item)
        end

        primitives:Empty()
        other:Empty()
        packages:Empty()
        classes:Empty()
        locals:Empty()
        fields:Empty()
        parentFields:Empty()
        actions:Empty()
    end

    boolean loadedOnce = false
    action Filter(BehaviorEvent event)
        if not loadedOnce
            integer size = 25
            Color red = primaryColor:Red()
            Color blue = primaryColor:Blue()
            Color green = primaryColor:Green()
            Color black = primaryColor:Black()
            Color orange = primaryColor:Orange()
            Color olive = primaryColor:Olive()
            Color magenta = primaryColor:Magenta()
            Color grey = primaryColor:LightGray()
            primitiveIcon:LoadFilledCircle(size, orange)
            fieldIcon:LoadFilledRectangle(size, size, green)
            actionIcon:LoadFilledTriangle(0,0,size/2, size, size, 0, olive)
            actionPrivateIcon:LoadFilledTriangle(0,size,size/2, 0, size, size, magenta)
            defaultIcon:LoadFilledCircle(size, black)
            variableIcon:LoadFilledRectangle(size, size, grey)
            parentIcon:LoadFilledCircle(size, red)
            classIcon:LoadFilledRectangle(size, size, black)
            packageIcon:LoadFilledRectangle(size, size, orange)
            loadedOnce = true
        end
        Regenerate()
        if event = undefined //explicit user request, have to redo

        else 

        end
        
    end

    private action Regenerate
        CodeCompletionResult result = builder:RequestCodeCompletion()
        //the system is telling us we're between parses. Just ignore this request
        if not result:IsValidCodeCompletion()
            isParsing = true
            return now
        else //seems like a valid request
            isParsing = false
        end
        
        Iterator<CodeCompletionItem> iterator = result:GetIterator()
        Empty()
        resultSize = 0
        if not iterator:HasNext()
            return now
        end

        useFirstColor = true
        
        repeat while iterator:HasNext()
            CodeCompletionItem code = iterator:Next()
            if (code:displayText:StartsWith(result:filter)) or ((not code:displayText:IsEmpty()) and result:filter:IsEmpty())
                MenuItem item = itemPool:GetNextMenuItem()
                resultSize = resultSize + 1
                item:SetName(code:displayText)
                item:SetShortcut(code:rightDisplayText)
                item:SetDescription(code:documentationText)

                ExecuteCodeCompletionBehavior behave
                behave:SetMenu(me)
                behave:SetTextBox(textBox)
                behave:SetCodeCompletionItem(code)
                behave:SetCodeCompletionResult(result)
                item:SetBehavior(behave)

                if code:GetType() = code:LOCAL_VARIABLE
                    item:SetIcon(variableIcon)
                    item:SetIconColor(variableIcon:GetColor())
                    locals:Add(item)
                elseif code:GetType() = code:PARAMETER
                    item:SetIcon(variableIcon)
                    item:SetIconColor(variableIcon:GetColor())
                    locals:Add(item)
                elseif code:GetType() = code:PRIVATE_FIELD_VARIABLE
                    item:SetIcon(fieldIcon)
                    item:SetIconColor(fieldIcon:GetColor())
                    fields:Add(item)
                elseif code:GetType() = code:PUBLIC_FIELD_VARIABLE
                    item:SetIcon(fieldIcon)
                    item:SetIconColor(fieldIcon:GetColor())
                    fields:Add(item)
                elseif code:GetType() = code:PRIVATE_ACTION
                    item:SetIcon(actionIcon)
                    item:SetIconColor(actionIcon:GetColor())
                    actions:Add(item)
                elseif code:GetType() = code:PUBLIC_ACTION
                    item:SetIcon(actionIcon)
                    item:SetIconColor(actionIcon:GetColor())
                    actions:Add(item)
                elseif code:GetType() = code:PRIVATE_SYSTEM_ACTION
                    item:SetIcon(actionIcon)
                    item:SetIconColor(actionIcon:GetColor())
                    actions:Add(item)
                elseif code:GetType() = code:PUBLIC_SYSTEM_ACTION
                    item:SetIcon(actionIcon)
                    item:SetIconColor(actionIcon:GetColor())
                    actions:Add(item)
                elseif code:GetType() = code:PUBLIC_BLUEPRINT_ACTION
                    item:SetIcon(actionIcon)
                    item:SetIconColor(actionIcon:GetColor())
                    actions:Add(item)
                elseif code:GetType() = code:CLASS
                    item:SetIcon(classIcon)
                    item:SetIconColor(classIcon:GetColor())
                    classes:Add(item)
                elseif code:GetType() = code:PRIMITIVE
                    item:SetIcon(primitiveIcon)
                    item:SetIconColor(primitiveIcon:GetColor())
                    primitives:Add(item)
                elseif code:GetType() = code:CONTROL_STRUCTURE
                    item:SetIcon(primitiveIcon)
                    item:SetIconColor(primitiveIcon:GetColor())
                    primitives:Add(item)
                elseif code:GetType() = code:PACKAGE
                    item:SetIcon(packageIcon)
                    item:SetIconColor(packageIcon:GetColor())
                    packages:Add(item)
                elseif code:GetType() = code:PARENT_FIELD_PRIVATE
                    item:SetIcon(parentIcon)
                    item:SetIconColor(parentIcon:GetColor())
                    parentFields:Add(item)
                elseif code:GetType() = code:PARENT_FIELD_PUBLIC
                    item:SetIcon(parentIcon)
                    item:SetIconColor(parentIcon:GetColor())
                    parentFields:Add(item)
                end

                LayoutProperties prop = item:GetDefaultLayoutProperties()
                prop:SetRenderingFlag(false)
            end
        end

        MenuItemComparison compare
        AddToResult(locals, compare)
        AddToResult(primitives, compare)
        AddToResult(fields, compare)
        AddToResult(packages, compare)
        AddToResult(actions, compare)
        AddToResult(parentFields, compare)
        AddToResult(classes, compare)
        AddToResult(other, compare)

        if IsEmpty() = false and GetSelection():IsEmpty() = true
            // Moving the selection down forces the menu to select the first
            // item if the selection was empty.
            MoveSelectionDown()
        end
    end

    private action AddToResult(Array<MenuItem> items, MenuItemComparison compare)
        items:Sort(compare)
        i = 0
        repeat while i < items:GetSize()
            MenuItem item = items:Get(i)
            Add(item)

            if useFirstColor
                item:SetBackgroundColor(primaryColor)
            else
                item:SetBackgroundColor(secondaryColor)
            end

            useFirstColor = not useFirstColor

            i = i + 1
        end
    end

    action IsCompletionItemsEmpty returns boolean
        return resultSize = 0
    end

    action Close
        parent:PopupMenu:Close()
    end

    action GetBuilder returns BuildManager
        return builder
    end

    action IsParsing returns boolean
        return isParsing
    end

    action SetIsParsing(boolean isParsing)
        me:isParsing = isParsing
    end

end