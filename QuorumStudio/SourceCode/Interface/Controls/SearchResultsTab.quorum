package Libraries.Development.Environment.Studio.Interface

use Libraries.Interface.Controls.Tab

use Libraries.Interface.Controls.Tab
use Libraries.Development.Environment.Studio.Build.BuildManager
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Controls.Tree
use Libraries.Development.Environment.Resources
use Libraries.Development.Environment.Studio.Behaviors.Behaviors
use Libraries.Language.Debug.Debugger
use Libraries.Language.Debug.VariablesModel
use Libraries.Containers.Array
use Libraries.Language.Debug.Variable
use Libraries.Interface.Controls.TreeItem
use Libraries.Interface.Events.TreeChangeListener
use Libraries.Interface.Events.TreeChangeEvent
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Controls.Icon
use Libraries.Interface.Controls.Spreadsheet
use Libraries.Interface.Controls.Column
use Libraries.Interface.Controls.Cell
use Libraries.Language.Compile.CompilerError
use Libraries.Development.Environment.Studio.Behaviors.FindInProjectBehavior
use Libraries.Interface.Controls.ScrollPane
use Libraries.System.File
use Libraries.Containers.HashTable
use Libraries.Containers.Support.Pair
use Libraries.Containers.MultipleLineText
use Libraries.Containers.Iterator
use Libraries.Containers.Support.HashNode
use Libraries.Interface.Events.SelectionListener
use Libraries.Interface.Events.SelectionEvent
use Libraries.Interface.Selections.TreeSelection
use Libraries.Game.GameStateManager
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Development.Environment.Studio.CodeEditorTabPane
use Libraries.Development.Environment.Studio.Behaviors.OpenFindInProjectFileBehavior
use Libraries.Interface.Controls.SearchTreeItem

class SearchResultsTab is Tab
    Behaviors behaviors = undefined
    Tree searchResultsTree
    TreeItem searchResultsRoot
    BreakpointScrollPane pane
    HashTable<File, Array<Pair<integer>>> fileIndices
    HashTable<TreeItem, File> fileNames
    HashTable<TreeItem, Pair<integer>> treeItemIndices
    
    Button previousResult
    Button nextResult

    OpenFindInProjectFileBehavior openFileBehavior

    on create 
        openFileBehavior:SetSearchResultsTab(me)
    end

    action Setup     
        LayoutProperties properties = searchResultsTree:GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:STANDARD)
        properties:SetPercentageWidth(1.0)
        searchResultsTree:SetBottomPadding(50)
        pane:Add(searchResultsTree)
        pane:Resize()

        SetName("Search Results")
        SetRelatedItem(GetPane())
        DisplayCloseButton(true)
        SetFocusTarget(searchResultsTree)
    end

    action SetBehaviors(Behaviors behaviors)
        me:behaviors = behaviors
    end

    action GetBehaviors returns Behaviors
        return behaviors
    end

    action SetResources(Resources resources) 
        
    end

    action GetPane returns BreakpointScrollPane
        return pane
    end

    private action SetupSearchTree
        Iterator<File> it = fileIndices:GetKeyIterator()
        repeat while it:HasNext()
            File file = it:Next()  
            SearchTreeItem fileItem
            fileNames:Add(fileItem, file)
            fileItem:SetBehavior(openFileBehavior)
            //fileItem:SetIcon(fileIcon)
            fileItem:SetName(file:GetFileName())
            Array<Pair<integer>> temp = fileIndices:GetValue(file)
            text textValue = file:Read()
            text carriageReturn = textValue:GetCarriageReturn()
            text lineFeed = textValue:GetLineFeed()
            MultipleLineText value
            text lineSeparator = value:GetLineSeparator()

            /* Reusing the code from SanitizeLines in the TextBox class to swap the line separator to the current OS's
            line separator style. The textValue is then rewritten to the file so that the line numbers and indices will 
            match when highlighting the instances in the CodeTextBox */
            //Windows style separators
            if lineSeparator = (carriageReturn + lineFeed)
                integer readIndex = 0
                integer index = textValue:IndexOf(lineFeed, readIndex)
                repeat while index >= 0
                    if index > 0 and textValue:GetCharacter(index - 1) = carriageReturn
                        readIndex = index + 1
                    else
                        if index = 0
                            textValue = carriageReturn + textValue
                        else
                            text preText = textValue:GetSubtext(0, index) + carriageReturn
                            text postText = textValue:GetSubtext(index)
                            textValue = preText + postText
                        end
                    end
                    readIndex = index + 2

                    if readIndex >= textValue:GetSize()
                        index = -1
                    else
                        index = textValue:IndexOf(lineFeed, readIndex)
                    end
                end



            //UNIX style separators
            elseif lineSeparator = lineFeed
                textValue = textValue:Replace(carriageReturn + lineFeed, lineFeed)
            end

            value:Initialize(textValue)


            integer j = 0
            repeat while j < temp:GetSize()
                SearchTreeItem indexItem
                //indexItem:SetIcon(indexIcon)
                indexItem:SetBehavior(openFileBehavior)
                treeItemIndices:Add(indexItem, temp:Get(j))
                integer index = temp:Get(j):GetFirstValue()
                integer size = temp:Get(j):GetSecondValue() - index
                integer lineIndex = value:LineIndexFromCharacterIndex(index)
                MultipleLineText line = value:GetLine(lineIndex)
                text lineText = line:GetText()
                integer indexInLine = index - value:CharacterIndexFromLineIndex(lineIndex)
//NEXT STEP: Add color and Bold to the tree item text when textStyles are available for TreeItems
                indexItem:SetName((lineIndex + 1) + ": " + lineText:Trim() + "     [column " + indexInLine + "]")
                fileItem:Add(cast(TreeItem, indexItem))
                j = j + 1
            end
            AddFileTreeItem(fileItem)
        end
    end

    action InitializeSearchResultsTree(TreeItem item)
        searchResultsRoot = item
        searchResultsTree:Add(searchResultsRoot)
        searchResultsTree:Resize()
    end

    action AddFileTreeItem(TreeItem item)
        searchResultsRoot:Add(item)
        searchResultsTree:Resize()
    end

    action SetSearchResults(HashTable<File, Array<Pair<integer>>> fileIndices)
        me:fileIndices = fileIndices
        SetupSearchTree()   
        searchResultsTree:Resize()
    end

    action ClearSearchResults
        searchResultsTree:Empty()
        fileNames:Empty()
        treeItemIndices:Empty()
    end

    action OpenTreeItemFile(TreeItem item)
        GameStateManager gameManager
        QuorumStudio studio = cast(QuorumStudio, gameManager:GetGame())
        CodeEditorTabPane tabPane = studio:GetTabPane()
        
        boolean setFirstSelection = true    
        File file = undefined
        TreeItem parentTreeItem = item:GetParentTreeItem()
        if parentTreeItem not= undefined
            if parentTreeItem:Equals(searchResultsRoot)
                //this is the file name tree item
                setFirstSelection = true
                file = fileNames:GetValue(item)
            else
               file = fileNames:GetValue(parentTreeItem)
               setFirstSelection = false
            end
            if file not= undefined
                Array<Pair<integer>> indices = fileIndices:GetValue(file)
                EditorTab tab = tabPane:OpenNewTab(file)
                CodeTextBox textBox = tab:GetTextBox()
                tabPane:Select(tab)
                MultipleLineText value = textBox:GetMultipleLineText()

                /* If the File Name TreeItem was activated, then we will select 
                the first instance of the find word in the file, else a line number
                TreeItem was activated and we will select the instance associated
                with that line number in the file. */
                integer startIndex = 0
                integer endIndex = 0
                if(setFirstSelection)
                    startIndex = indices:Get(0):GetFirstValue()
                    endIndex = indices:Get(0):GetSecondValue()
                else
                    Pair<integer> index = treeItemIndices:GetValue(item)
                    startIndex = index:GetFirstValue()
                    endIndex = index:GetSecondValue()
                end
                MultipleLineText lineText = value:GetLine(startIndex)
                textBox:SetCaretPosition(endIndex)
                textBox:GoToLine(textBox:GetLineIndexOfCharacter(endIndex))
                textBox:Select(startIndex, endIndex, true)
            end
        end
    end
end