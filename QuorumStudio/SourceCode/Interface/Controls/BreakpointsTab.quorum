package Libraries.Development.Environment.Studio.Interface

use Libraries.Interface.Controls.Tab
use Libraries.Interface.Controls.Tree
use Libraries.Game.Graphics.Color
use Libraries.Development.Environment.Resources
use Libraries.Development.Environment.Studio.Behaviors.Behaviors
use Libraries.Development.Environment.Studio.Build.BuildManager
use Libraries.Language.Debug.Debugger
use Libraries.Interface.Controls.TreeItem
use Libraries.Interface.Layouts.Layout
use Libraries.Language.Debug.BreakpointListener
use Libraries.Language.Debug.BreakpointEvent
use Libraries.Language.Debug.Breakpoint
use Libraries.System.File
use Libraries.Containers.Iterator
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Layouts.ManualLayout

class BreakpointsTab is Tab, BreakpointListener
    BreakpointScrollPane pane
    Resources resources = undefined
    Behaviors behaviors = undefined
    BuildManager manager = undefined
    Debugger debugger = undefined
    Tree breakpointTree

    action GetBehaviors returns Behaviors
        return behaviors
    end

    action SetBehaviors(Behaviors behaviors)
        me:behaviors = behaviors
        manager = behaviors:GetBuildManager()
        debugger = manager:GetDebugger()

        manager:Add(me)
    end

    action GetResources returns Resources
        return resources
    end

    action SetResources(Resources resources)
        me:resources = resources
    end

    action GetPane returns BreakpointScrollPane
        return pane
    end

    action ToggledBreakpoint(BreakpointEvent event)
        Breakpoint point = event:GetBreakpoint()
        File file = point:GetFile()
        integer line = point:GetLine()

        if event:IsAdded()
            boolean found = false
            Iterator<TreeItem> items = breakpointTree:GetTreeItems()
            repeat while items:HasNext() and not found
                TreeItem item = items:Next()
                if item:GetName() = file:GetFileName()
                    found = true
                    TreeItem newOne
                    newOne:SetName("" + line)
                    newOne:SetIcon(resources:GetBreakpoint())
                    item:Add(newOne)
                end
            end

            if not found
                TreeItem top
                top:SetName("" + file:GetFileName())
                top:SetIcon(resources:GetBreakpoint())
                
                TreeItem newOne
                newOne:SetName("" + line)
                newOne:SetIcon(resources:GetBreakpoint())
                top:Add(newOne)

                breakpointTree:Add(top)
            end
            breakpointTree:Resize()
        else 
            boolean found = false
            Iterator<TreeItem> items = breakpointTree:GetTreeItems()
            repeat while items:HasNext() and not found
                TreeItem item = items:Next()
                if item:GetName() = file:GetFileName()
                    found = true
                    if item:GetSize() = 1
                        breakpointTree:Remove(item)
                        found = true
                    else 
                        Iterator<TreeItem> lines = item:GetTreeItems()
                        repeat while lines:HasNext()
                            TreeItem l = lines:Next()
                            if l:GetName() = "" + line
                                item:Remove(l)
                                found = true
                            end
                        end
                    end
                end
            end
        end
    end

    action Setup
        LayoutProperties treeProperties = GetDefaultLayoutProperties()
        treeProperties:SetPercentageOriginY(1)
        treeProperties:SetPercentageY(1)
        
        ManualLayout layout
        pane:SetLayout(layout)

        pane:SetBackgroundColor(resources:GetBackgroundColor())
        pane:Add(breakpointTree)
        pane:Resize()

        SetName("Breakpoints")
        SetRelatedItem(GetPane())
        DisplayCloseButton(true)
    end
end