package Libraries.Development.Environment.Studio
use Libraries.Interface.Controls.TabPane
use Libraries.Interface.Layouts.FillLayout
use Libraries.Containers.Array
use Libraries.Interface.Controls.Tab
use Libraries.Interface.Controls.TextBox
use Libraries.Interface.Layouts.Layout
use Libraries.System.File
use Libraries.Game.Graphics.Texture
use Libraries.Language.Errors.FileNotFoundError
use Libraries.Language.Errors.InputOutputError
use Libraries.Game.Graphics.Color
use Libraries.Containers.HashTable
use Libraries.Development.Environment.Resources
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.TextureWrap
use Libraries.Game.Graphics.TextureRegion
use Libraries.Containers.Iterator
use Libraries.Development.Environment.Studio.Interface.EditorTab
use Libraries.Game.InputTable
use Libraries.Game.InputSet
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Behaviors.Controls.TabPaneForwardTabBehavior
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Selections.TabPaneSelection
use Libraries.Interface.Events.TabChangeListener
use Libraries.Interface.Events.TabChangeEvent

class CodeEditorTabPane is TabPane, TabChangeListener
    KeyboardEvent keys
    Color color
    HashTable<text, File> openFiles
    HashTable<text, Tab> openTabs
    Resources resources = undefined
    File queuedFileOpen = undefined
    integer queuedLine = 0

    action ClosedTab(TabChangeEvent event)
        if event:GetTab() is EditorTab
            EditorTab tab = cast(EditorTab, event:GetTab())
            File file = tab:GetFile()
            if file not= undefined
                text path = file:GetAbsolutePath()
                openFiles:RemoveKey(path)
                openTabs:RemoveKey(path)
            end
        end
    end

    action GainedFocus(FocusEvent event)
        TabPaneSelection selection = GetSelection()
        Tab tab = selection:GetTab()
        if tab not= undefined and tab is EditorTab
            EditorTab t = cast(EditorTab, tab)
            TextBox box = t:GetTextBox()
            if box not= undefined
                box:Focus()
            end
        end
    end
    
    action GetOpenFiles returns Iterator<File> 
        return openFiles:GetValueIterator()
    end

    action GetResources returns Resources
        return resources
    end

    action SetResources(Resources resources)
        me:resources = resources
    end

    action GetOpenFileIterator returns Iterator<File>
        return openFiles:GetValueIterator()
    end

    action Setup
        FillLayout fill
        fill:SetFillSide(fill:RIGHT)
        fill:SetPercentageY(1)
        fill:SetPercentageOriginY(1)
        fill:SetPercentageHeight(0.7)
        fill:SetOffsetX(3)
        fill:SetWidthOffset(-3)

        SetName("Code Tabs")
        Array<Tab> array
        
        Initialize(200, 200, array)
        AddLayout(fill)
        AddTabChangeListener(me)
    end

    /*
        This action opens a new tab if one is not open. If one is already open, 
        then it returns the one already there.
    */
    action OpenNewTab(File file) returns EditorTab
        text contents = ""

        check
            contents = file:Read()
        detect error is FileNotFoundError
            // File wasn't found, handle the error gracefully.
            // Output is for testing purposes only.
            output "Couldn't find file: " + file:GetAbsolutePath()
            return now
        detect error is InputOutputError
            // File couldn't be read for some reason.
            // Output is for testing purposes only.
            output "Couldn't read file: " + file:GetAbsolutePath()
            error:OutputStackTrace()
            return now
        end

        Layout textBoxLayout
        textBoxLayout:SetPercentageX(0)
        textBoxLayout:SetPercentageY(0)
        textBoxLayout:SetPercentageWidth(1)
        textBoxLayout:SetPercentageHeight(1)

        TextBox textBox        
        textBox:Initialize(400, 400, color:CustomColor(1, 1, 1, 1), contents)
        //Experimental section on setting a textured background.
//        Drawable bg = textBox:GetBackground()
//        Texture texture
//        texture:LoadFromFile("Resources/Graphics/Interface/Paper.png")
//
//        TextureWrap horizontalWrap
//        TextureWrap verticalWrap
//        horizontalWrap:ConstructTextureWrap(horizontalWrap:REPEAT)
//        verticalWrap:ConstructTextureWrap(verticalWrap:REPEAT)
//
//        texture:SetWrap(horizontalWrap, verticalWrap)
//
//        TextureRegion region
//        region:LoadTextureRegion(texture, 0, 0, texture:GetWidth() * 3, texture:GetHeight() * 3)
//        bg:Load(region)

        textBox:AddLayout(textBoxLayout)    

        // For testing purposes, just put in a placeholder icon.
        // Long-term, this should instead check the file extension and load an
        // appropriate image (e.g., Quorum icon for a .quorum file).
        Texture icon = resources:GetQuorumFile()

        EditorTab returnedTab = undefined
        boolean value = openFiles:HasKey(file:GetAbsolutePath())
        if value //it's already open
            Tab tab = openTabs:GetValue(file:GetAbsolutePath())
            //now we have to give that tab the focus
            tab:ReleasedMouse()
            tab:Focus()
            returnedTab = cast(EditorTab, tab)
        else 
            EditorTab tab
            tab:Initialize(file:GetPath(), textBox, icon, true)
            tab:SetFile(file)
            tab:Setup()
            openFiles:Add(file:GetAbsolutePath(), file)
            openTabs:Add(file:GetAbsolutePath(), tab)
            Add(cast(Tab,tab))
            tab:ReleasedMouse()
            tab:Focus()
            returnedTab = tab
        end

        Resize()
        return returnedTab
    end

    /*
    
    */
    action QueueTabOpen(File file, integer line)
        queuedFileOpen = file
        queuedLine = line
    end

    action Update(number seconds)
        if queuedFileOpen not= undefined
            EditorTab tab = OpenNewTab(queuedFileOpen)
            TextBox box = tab:GetTextBox()
            if box not= undefined
                box:SetCaretPosition(queuedLine, 0)
                box:GoToLine(queuedLine)
                box:Focus()
            end
            queuedFileOpen = undefined
        end
    end
end