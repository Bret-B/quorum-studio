package Libraries.Development.Environment.Studio
use Libraries.Interface.Controls.TabPane
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Containers.Array
use Libraries.Interface.Controls.Tab
use Libraries.Interface.Controls.TextBox
use Libraries.Interface.Layouts.Layout
use Libraries.System.File
use Libraries.Game.Graphics.Texture
use Libraries.Language.Errors.FileNotFoundError
use Libraries.Language.Errors.InputOutputError
use Libraries.Game.Graphics.Color
use Libraries.Containers.HashTable
use Libraries.Development.Environment.Resources
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.TextureWrap
use Libraries.Game.Graphics.TextureRegion
use Libraries.Containers.Iterator
use Libraries.Development.Environment.Studio.Interface.EditorTab
use Libraries.Game.InputTable
use Libraries.Game.InputSet
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Behaviors.Controls.TabPaneForwardTabBehavior
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Selections.TabPaneSelection
use Libraries.Interface.Events.TabChangeListener
use Libraries.Interface.Events.TabChangeEvent
use Libraries.Interface.Controls.Icon
use Libraries.Development.Environment.Studio.Behaviors.Behaviors
use Libraries.Development.Environment.Studio.Interface.KeyMap
use Libraries.Development.Environment.Studio.Interface.CodeTextBox
use Libraries.Game.GameStateManager
use Libraries.Game.Game
use Libraries.Development.Environment.Projects.ProjectManager
use Libraries.Development.Environment.Projects.Quorum.QuorumProject

class CodeEditorTabPane is TabPane, TabChangeListener
    KeyboardEvent keys
    Color color
    HashTable<text, File> openFiles
    HashTable<text, Tab> openTabs
    Resources resources = undefined
    KeyMap keyMap = undefined
    Behaviors behaviors = undefined
    File queuedFileOpen = undefined
    integer queuedLine = 0

    on create
        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetHorizontalLayoutMode(properties:FILL)
        properties:SetVerticalLayoutMode(properties:STANDARD)
        properties:SetPercentageHeight(0.7)
        properties:SetLeftPadding(3)
        properties:SetRightPadding(3)

        SetName("Code Tabs")
        AddTabChangeListener(me)
    end

    action ClosedTab(TabChangeEvent event)
        if event:GetTab() is EditorTab
            EditorTab tab = cast(EditorTab, event:GetTab())
            File file = tab:GetFile()
            if file not= undefined
                text path = file:GetAbsolutePath()
                openFiles:RemoveKey(path)
                openTabs:RemoveKey(path)
            end
        end
    end

    action GainedFocus(FocusEvent event)
        TabPaneSelection selection = GetSelection()
        Tab tab = selection:GetTab()
        if tab not= undefined and tab is EditorTab
            EditorTab t = cast(EditorTab, tab)
            TextBox box = t:GetTextBox()
            if box not= undefined
                box:Focus()
            end
        end
    end
    
    action GetOpenFiles returns Iterator<File> 
        return openFiles:GetValueIterator()
    end

    action GetResources returns Resources
        return resources
    end

    action SetResources(Resources resources)
        me:resources = resources
        me:keyMap = resources:GetKeyMap()
    end

    action GetBehaviors returns Behaviors
        return behaviors
    end

    action SetBehaviors(Behaviors behaviors)
        me:behaviors = behaviors
    end

    action GetOpenFileIterator returns Iterator<File>
        return openFiles:GetValueIterator()
    end

    action UpdateEditorBadging
        GameStateManager manager
        Game game = manager:GetGame()
        QuorumStudio studio = cast(QuorumStudio, game)

        Iterator<Tab> tabs = openTabs:GetValueIterator()
        repeat while tabs:HasNext()
            Tab tab = tabs:Next()
            if tab is EditorTab
                EditorTab edit = cast(EditorTab, tab)
                File value = edit:GetFile()

                boolean isMain = false
                ProjectManager projects = studio:GetProjectManager()
                Iterator<QuorumProject> iterator = projects:GetIterator()
                repeat while iterator:HasNext()
                    QuorumProject project = iterator:Next()
                    if project:IsMainFile(value)
                        isMain = true
                    end
                end

                Icon icon = undefined
                if isMain
                    icon = resources:GetMainFile()
                else
                    icon = resources:GetQuorumFile()
                end 

                tab:SetIcon(icon)
            end
        end
    end
    /*
        This action opens a new tab if one is not open. If one is already open, 
        then it returns the one already there.
    */
    action OpenNewTab(File file) returns EditorTab
        text contents = ""

        check
            contents = file:Read()
        detect error is FileNotFoundError
            // File wasn't found, handle the error gracefully.
            // Output is for testing purposes only.
            output "Couldn't find file: " + file:GetAbsolutePath()
            return now
        detect error is InputOutputError
            // File couldn't be read for some reason.
            // Output is for testing purposes only.
            output "Couldn't read file: " + file:GetAbsolutePath()
            error:OutputStackTrace()
            return now
        end

        CodeTextBox textBox
        LayoutProperties boxProperties = textBox:GetDefaultLayoutProperties()
        boxProperties:SetPercentageWidth(1)
        boxProperties:SetPercentageHeight(1)
        boxProperties:SetPercentageX(0)
        boxProperties:SetPercentageY(0)
        boxProperties:SetHorizontalLayoutMode(boxProperties:STANDARD)
        boxProperties:SetVerticalLayoutMode(boxProperties:STANDARD)
        textBox:SetBackgroundColor(color:White())
        textBox:SetText(contents)
        textBox:SetName("Code Edit Text Box")

        GameStateManager manager
        Game game = manager:GetGame()
        QuorumStudio studio = cast(QuorumStudio, game)
        InputTable table = game:GetInputTable(textBox:CODE_BOX_INPUT_GROUP)
        if table = undefined
            table = textBox:CopyAndActivateInputTable(textBox:CODE_BOX_INPUT_GROUP)
            textBox:SetInputGroup(textBox:CODE_BOX_INPUT_GROUP)

            table:Add(keyMap:GetCodeCompletionKey(), behaviors:GetCodeCompletionBehavior())
            table:Add(keyMap:GetCommentLinesKey(), behaviors:GetCommentLinesBehavior())
            //table:Add(keyMap:GetSmartNavigateUpKey(), behaviors:GetEditorSmartNavigationUp())
            //table:Add(keyMap:GetSmartNavigateDownKey(), behaviors:GetEditorSmartNavigationDown())
            //table:Add(keyMap:GetSmartNavigateLeftKey(), behaviors:GetEditorSmartNavigationLeft())
            //table:Add(keyMap:GetSmartNavigateRightKey(), behaviors:GetEditorSmartNavigationRight())
        else 
            textBox:SetInputGroup(textBox:CODE_BOX_INPUT_GROUP)
        end
        
        boolean isMain = false
        ProjectManager projects = studio:GetProjectManager()
        Iterator<QuorumProject> iterator = projects:GetIterator()
        repeat while iterator:HasNext()
            QuorumProject project = iterator:Next()
            if project:IsMainFile(file)
                isMain = true
            end
        end
        Icon icon = undefined

        if isMain
            icon = resources:GetMainFile()
        else
            icon = resources:GetQuorumFile()
        end 

        EditorTab returnedTab = undefined
        boolean value = openFiles:HasKey(file:GetAbsolutePath())
        if value //it's already open
            Tab tab = openTabs:GetValue(file:GetAbsolutePath())
            //now we have to give that tab the focus
            tab:ReleasedMouse()
            tab:Focus()
            returnedTab = cast(EditorTab, tab)
        else
            EditorTab tab
            tab:SetName(file:GetPath())
            tab:SetRelatedItem(textBox)
            tab:SetIcon(icon)
            tab:DisplayCloseButton(true)
            tab:SetFile(file)
            number scale = GetInterfaceScale()
            tab:SetInterfaceScale(scale)
            tab:Setup()
            openFiles:Add(file:GetAbsolutePath(), file)
            openTabs:Add(file:GetAbsolutePath(), tab)
            Add(cast(Tab,tab))
            tab:ReleasedMouse()
            tab:Focus()
            returnedTab = tab
        end

        Resize()
        return returnedTab
    end

    /*
    
    */
    action QueueTabOpen(File file, integer line)
        queuedFileOpen = file
        queuedLine = line
    end

    action Update(number seconds)
        if queuedFileOpen not= undefined
            EditorTab tab = OpenNewTab(queuedFileOpen)
            TextBox box = tab:GetTextBox()
            if box not= undefined
                box:SetCaretPositionToLine(queuedLine)
                box:GoToLine(queuedLine)
                box:Focus()
            end
            queuedFileOpen = undefined
        end
    end

    action SaveDirtyTabs
        Iterator<File> iterator = GetOpenFileIterator()
        repeat while iterator:HasNext()
            File file = iterator:Next()
            Tab tab = openTabs:GetValue(file:GetAbsolutePath())
            if tab is EditorTab
                EditorTab et = cast(EditorTab, tab)
                if et:IsDirty()
                    et:Save()
                end
            end
        end
    end
end