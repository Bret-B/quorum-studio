package Libraries.Development.Environment.Studio.Interface

use Libraries.Interface.Controls.Tab
use Libraries.System.File
use Libraries.Interface.Events.TextChangeListener
use Libraries.Interface.Controls.TextBox
use Libraries.Interface.Events.TextChangeEvent
use Libraries.Game.GameStateManager
use Libraries.Interface.Controls.PopupMenu
use Libraries.Interface.Behaviors.Controls.TabCloseBehavior
use Libraries.Interface.Controls.MenuItem
use Libraries.Interface.Behaviors.Controls.CloseAllEditorTabsBehavior
use Libraries.Interface.Behaviors.Controls.CloseAllOtherEditorTabsBehavior
use Libraries.Interface.Controls.Blocks.CodeEditor
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Interface.Controls.Blocks.BlockPalette
use Libraries.Development.Environment.Studio.BlockSelectionListener

class EditorTab is Tab, TextChangeListener
    boolean dirty = false
    File file = undefined
    number timeSinceDirty = 1
    boolean parseDirty = true
    BlockSelectionListener blockSuggestionListener

    action GetFile returns File
        return file
    end

    action SetFile(File file)
        me:file = file
    end

    action Setup
        Item2D item = GetRelatedItem()
        if item not= undefined and item is TextBox
            CodeTextBox box = cast(CodeTextBox, item)
            box:AddTextChangeListener(me)
            number scale = GetInterfaceScale()
            box:SetInterfaceScale(scale)
            box:SetEditorTab(me)
        elseif item not= undefined and item is CodeEditor
            CodeEditor editor = cast(CodeEditor, item)
            editor:AddTextChangeListener(me)
            number scale = GetInterfaceScale()
            editor:SetInterfaceScale(scale)
            editor:SetFile(GetFile())
        end
        
    end

    action TextChanged(TextChangeEvent event)
        dirty = true
        me:parseDirty = dirty
        timeSinceDirty = 0
    end

    action IsDirty returns boolean
        return dirty
    end

    action SetIsDirty(boolean dirty)
        me:dirty = dirty
        timeSinceDirty = 0
        me:parseDirty = dirty
    end

    action IsParseDirty returns boolean
        return parseDirty
    end

    action SetIsParseDirty(boolean dirty)
        me:parseDirty = dirty
    end

    action GetTimeSinceDirty returns number
        return timeSinceDirty
    end

    action Save
        if file not= undefined
            CodeTextBox box = GetTextBox()
            // if there is no textbox it might be a block editor
            text value = ""
            if box not= undefined
                value = box:GetText()
            else
                CodeEditor blocks = GetBlockEditor()
                if blocks = undefined
                    return now
                end
                value = blocks:GetCode():GetText()
            end
            file:Write(value)
            if dirty
                SetIsDirty(false)
                SetIsParseDirty(true)
            end
        end
    end

    action GetTextBox returns CodeTextBox
        Item2D item = GetRelatedItem()
        if item not= undefined and item is TextBox
            CodeTextBox box = cast(CodeTextBox, item)
            return box
        end
        return undefined
    end

    action GetBlockEditor returns CodeEditor
        Item2D item = GetRelatedItem()
        if item not= undefined and item is CodeEditor
            CodeEditor box = cast(CodeEditor, item)
            return box
        end
        return undefined
    end

    action OnClose
        CodeTextBox box = GetTextBox()
        if box not= undefined
            box:Dispose()
        end

        parent:Tab:OnClose()
    end

action OnToggleOn
        parent:Tab:OnToggleOn()
        GameStateManager manager
        QuorumStudio studio = cast(QuorumStudio, manager:GetGame())
        BlockPalette palette = studio:GetBlockPalette()
        palette:SetEditor(GetBlockEditor())
        if GetBlockEditor() not= undefined
            GetBlockEditor():RemoveSelectionListener(blockSuggestionListener)
            GetBlockEditor():AddSelectionListener(blockSuggestionListener)
        end
    end

    action OnToggleOff
        parent:Tab:OnToggleOff()
        
GameStateManager manager

        QuorumStudio studio = cast(QuorumStudio, manager:GetGame())
        BlockPalette palette = studio:GetBlockPalette()
//        palette:SetEditor(undefined)
    end
    action Focus
        GameStateManager manager
        manager:GetGame():SetFocus(GetTextBox())
    end

    action Update(number seconds)
        timeSinceDirty = timeSinceDirty + seconds
    end

   action GetPopupMenu returns PopupMenu
        if parent:Control:contextMenu not= undefined
            return parent:Control:contextMenu
        end

        PopupMenu tabContextMenu
        TabCloseBehavior tabCloseBehavior
        MenuItem closeTabMenuItem
        tabCloseBehavior:SetTab(me)
        closeTabMenuItem:SetName("Close")
        closeTabMenuItem:SetBehavior(tabCloseBehavior)
        tabContextMenu:Add(closeTabMenuItem)

        CloseAllEditorTabsBehavior closeAllTabsBehavior
        MenuItem closeAllTabsMenuItem
        closeAllTabsBehavior:SetEditorTab(me)
        closeAllTabsMenuItem:SetName("Close All")
        closeAllTabsMenuItem:SetBehavior(closeAllTabsBehavior)
        tabContextMenu:Add(closeAllTabsMenuItem)

        CloseAllOtherEditorTabsBehavior closeAllOtherTabsBehavior
        MenuItem closeAllOtherTabsMenuItem
        closeAllOtherTabsBehavior:SetTab(me)
        closeAllOtherTabsMenuItem:SetName("Close Other")
        closeAllOtherTabsMenuItem:SetBehavior(closeAllOtherTabsBehavior)
        tabContextMenu:Add(closeAllOtherTabsMenuItem)

        return tabContextMenu
    end

end