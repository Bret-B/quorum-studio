package Libraries.Development.Environment.Studio.Interface

use Libraries.Containers.Array
use Libraries.Game.Graphics.Label
use Libraries.Game.Graphics.Font
use Libraries.Interface.Layouts.LayoutProperties
use Libraries.Interface.Controls.Gutter
use Libraries.Interface.Controls.TextBox
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Glyph
use Libraries.Development.Versioning.Git
use Libraries.System.File
use Libraries.Development.Versioning.StatusResult
use Libraries.Development.Versioning.DiffResult
use Libraries.Containers.HashTable
use Libraries.Development.Versioning.DiffEdit
use Libraries.Development.Versioning.GitConstants
use Libraries.Language.Compile.Hints.Hint
use Libraries.Interface.Controls.ScrollableLineControl
use Libraries.Game.Graphics.ColorGroup

class StatusLineGutter is Gutter
    Color color
    on create
        LayoutProperties properties = GetDefaultLayoutProperties()
        properties:SetLeftPadding(12)
        properties:SetRightPadding(8)
        properties:SetBorderThickness(0)
    end

    Array<Drawable> drawables
    
    Color hintColor = color:CustomColor(246/255.0, 217/255.0, 87/255.0,1)
    Color gitModifiedColor = color:CustomColor(160/255.0, 200/255.0, 255/255.0,1)
    Color gitAddedColor = color:CustomColor(150/255.0, 255/255.0, 150/255.0,1)
    Color gitRemovedColor = color:CustomColor(255/255.0, 160/255.0, 180/255.0,1)
    Color yellow = color:Yellow()

    GitConstants gitConstants
    DiffResult result = undefined
    HashTable<integer, Hint> hintLocations = undefined

    action GetGutterThickness returns number
        ScrollableLineControl control = GetControl()

        integer fontSize = control:GetFontSize()
        Font font = control:GetFont()
        LayoutProperties properties = GetCurrentLayoutProperties()
        if properties = undefined
            properties = GetDefaultLayoutProperties()
        end

        integer glyphsRequired = 2
        /*
        We assume the space required for the "0" glyph is a good predictor of
        the space used for each glyph in the font. For monospaced fonts this
        will be accurate and the choice of glyph is arbitrary. For other fonts,
        this is only an approximation, which may require some extra space via
        padding in order to look correct.
        */
        number rightPadding = properties:GetRightPadding()
        number leftPadding = properties:GetLeftPadding()
        Glyph glyph = font:GetGlyph("0")
        return glyph:horizontalAdvance * 1.5 + properties:GetLeftPadding() + rightPadding
    end

    action GetBackgroundColor returns ColorGroup
        // The StatusLineGutter attempts to use the parent control's background color, if it's available.

        LayoutProperties properties = GetDefaultLayoutProperties()
        if properties:HasColorPropertyOverride("backgroundColor")
            return properties:GetBackgroundColor()
        end

        Control control = GetControl()
        if control not= undefined
            return control:GetBackgroundColor()
        end

        return parent:Control:GetBackgroundColor()
    end

    action UpdateVisuals(integer startLine)
        Empty()
        
        ScrollableLineControl control = GetControl()
        integer fontSize = control:GetFontSize()
        Font font = control:GetFont()
        LayoutProperties properties = GetCurrentLayoutProperties()
        if properties = undefined
            properties = GetDefaultLayoutProperties()
        end

        text linesInText = "" + control:GetLineCount()
        integer glyphsRequired = 2
        /*
        We assume the space required for the "0" glyph is a good predictor of
        the space used for each glyph in the font. For monospaced fonts this
        will be accurate and the choice of glyph is arbitrary. For other fonts,
        this is only an approximation, which may require some extra space via
        padding in order to look correct.
        */
        Drawable firstLabel = GetDrawable(0)
        number rightPadding = properties:GetRightPadding()
        number leftPadding = properties:GetLeftPadding()
        Glyph glyph = font:GetGlyph("0")
        number width = glyph:horizontalAdvance * 1.5 + properties:GetLeftPadding() + rightPadding
        integer descent = font:GetMaximumDescent()
        
        integer totalLines = control:GetLineCount()
        boolean last = false

        integer counter = 0
        number y = control:GetHeight()
        repeat while counter + startLine < totalLines and last = false
            if y < 0
                last = true
            end

            number lineHeight = control:GetLineHeight(counter + startLine)

            Drawable drawable = GetDrawable(counter)
            integer myWidth = cast(integer, width - rightPadding - leftPadding)
            integer myHeight = cast(integer, lineHeight - 2)
            drawable:SetSize(myWidth, myHeight)
            
            drawable:SetPosition(width - drawable:GetWidth() - rightPadding, y + descent + 1)

            boolean hasDiffSpot = false
            if result not= undefined
                Array<DiffEdit> edits = result:GetEdits()
                if edits:GetSize() > counter + startLine
                    DiffEdit edit = edits:Get(counter + startLine)
                    integer type = edit:GetEditType()
                    if type = gitConstants:EDIT_INSERT
                        drawable:SetColor(gitAddedColor)
                        Add(drawable)
                        hasDiffSpot = true
                    elseif type = gitConstants:EDIT_CHANGE
                        drawable:SetColor(gitModifiedColor)
                        Add(drawable)
                        hasDiffSpot = true
                    
                    elseif type = gitConstants:EDIT_EQUAL and edit:HasDeletion()
                        drawable:SetColor(gitRemovedColor)
                        Add(drawable)
                        hasDiffSpot = true
                    end
                end
            end

            if not hasDiffSpot and hintLocations not= undefined //if there's no diff spot, add a hint normally
                Hint hint = hintLocations:GetValue(counter + startLine + 1)
                if hint not= undefined
                    drawable:SetColor(yellow)
                    Add(drawable)
                end
            end
            y = y - lineHeight
            counter = counter + 1
        end

    end
 
    private action GetDrawable(integer index) returns Drawable
        if drawables:GetSize() <= index or drawables:Get(index) = undefined
            Drawable drawable
            
            color = color:White()
            drawable:LoadFilledRectangle(1,1, color)
            drawables:Add(index, drawable)
            return drawable
        else
            return drawables:Get(index)
        end
    end
    action GetDiffResult returns DiffResult
        return result
    end

    action SetDiffResult(DiffResult result)
        me:result = result
    end
    action GetHintLocations returns HashTable<integer, Hint>
        return hintLocations
    end

    action SetHintLocations(HashTable<integer, Hint> hintLocations)
        me:hintLocations = hintLocations
    end

end