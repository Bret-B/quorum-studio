package Libraries.Development.Environment.Studio
use Libraries.Development.Environmen.Resources
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Color
use Libraries.Game.InputTable
use Libraries.Game.GameStateManager
use Libraries.Development.Environment.Studio.Behaviors.Behaviors
use Libraries.Containers.Array
use Libraries.Interface.Controls.MenuItem
use Libraries.Interface.Controls.MenuBar
use Libraries.Development.Environment.Studio.Behaviors.MenuHotkeyBehavior
use Libraries.Game.InputSet
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Development.Environment.Studio.Interface.KeyMap
use Libraries.Interface.Selections.MenuSelection
use Libraries.Development.Environment.Studio.Behaviors.DefaultMenuOpenBehavior

class Menu is MenuBar
    KeyboardEvent keys
    MenuItem fileMenu
    MenuItem editMenu
    MenuItem viewMenu
    MenuItem runMenu
    MenuItem windowsMenu
    MenuItem helpMenu

    // openProject is declared here so it can be reused in SetupMenuHotkeys().
    //MenuItem openProject


    MenuItem defaultMenuItem = undefined
    Resources resources = undefined
    KeyMap keyMap = undefined
    Gradient gradient
    Color color
    number height = 0
    Behaviors behaviors = undefined

    on create
        gradient:Set(color:LightGray(), color:LightGray(), color:White(), color:White())
    end

    action SetBehaviors(Behaviors behaviors)
        me:behaviors = behaviors
    end

    action SetToDefaultSelection
        Array<MenuItem> items
        items:Add(fileMenu)
        items:Add(defaultMenuItem)
        Select(items)
    end

    action SetDefaultPopupShortcut
        GameStateManager manager
        InputTable table = manager:GetGame():GetDefaultInputTable()
        table:Add(keyMap:GetDefaultMenuPopup1(), behaviors:GetDefaultMenuOpenBehavior())
        table:Add(keyMap:GetDefaultMenuPopup2(), behaviors:GetDefaultMenuOpenBehavior())
    end

    action GetBehaviors returns Behaviors
        return behaviors
    end

    action SetDisplayOffset(number value)
        height = value
    end

    action GetDisplayOffset returns number
        return height
    end

    action GetResources returns Resources
        return resources
    end

    action SetResources(Resources resources)
        me:resources = resources
        me:keyMap = resources:GetKeyMap()
    end

    action Setup
        SetupFileMenu()
        SetupEditMenu()
        SetupViewMenu()
        SetupRunMenu()
        SetupWindowsMenu()
        SetupHelpMenu()

        Array<MenuItem> menuItems
        menuItems:Add(fileMenu)
        menuItems:Add(editMenu)
        menuItems:Add(viewMenu)
        menuItems:Add(runMenu)
        menuItems:Add(windowsMenu)
        menuItems:Add(helpMenu)
        Initialize(menuItems)
        SetDefaultPopupShortcut()
    end

    //Adding the mouse listeners will give unintended results for now
    private action SetupFileMenu
        Array<MenuItem> fileItems
        
        MenuItem newProject
        defaultMenuItem = newProject
        newProject:Initialize("New Project")
        // Set a behavior to indicate what the menu item does when activated.
        //newProject:SetBehavior(undefined)
        fileItems:Add(newProject)
        
        // The openProject is instead declared as a field so it can be used
        // later in SetupMenuHotkeys().
        MenuItem openProject
        openProject:Initialize("Open Project")
        // Set a behavior to indicate what the menu item does when activated.
        openProject:SetBehavior(behaviors:GetOpenProjectBehavior())
        fileItems:Add(openProject)

        MenuItem closeProject
        closeProject:Initialize("Close Project")
        // Set a behavior to indicate what the menu item does when activated.
        closeProject:SetBehavior(behaviors:GetCloseProjectBehavior())
        fileItems:Add(closeProject)

        MenuItem newFile
        newFile:Initialize("New File")
        // Set a behavior to indicate what the menu item does when activated.
        //newFile:SetBehavior(undefined)
        fileItems:Add(newFile)

        MenuItem openFile
        openFile:Initialize("Open File")
        // Set a behavior to indicate what the menu item does when activated.
        //openFile:SetBehavior(undefined)
        fileItems:Add(openFile)

        MenuItem save
        save:Initialize("Save")
        save:SetBehavior(behaviors:GetSaveBehavior())
        save:SetShortcut(keyMap:GetSaveKey())
        fileItems:Add(save)

        MenuItem saveAs
        saveAs:Initialize("Save As...")
        // Set a behavior to indicate what the menu item does when activated.
        //saveAs:SetBehavior(undefined)
        fileItems:Add(saveAs)

        MenuItem saveAll
        saveAll:Initialize("Save All")
        // Set a behavior to indicate what the menu item does when activated.
        //saveAll:SetBehavior(undefined)
        fileItems:Add(saveAll)

        MenuItem exit
        exit:Initialize("Exit")
        // Set a behavior to indicate what the menu item does when activated.
        exit:SetBehavior(undefined)
        save:SetShortcut(keyMap:GetExitKey())
        fileItems:Add(exit)

        fileMenu:Initialize("File", fileItems)
    end

    private action SetupEditMenu
        Array<MenuItem> editItems

        MenuItem undo
        undo:Initialize("Undo")
        // Set a behavior to indicate what the menu item does when activated.
        //undo:SetBehavior(undefined)
        editItems:Add(undo)

        MenuItem redo
        redo:Initialize("Redo")
        // Set a behavior to indicate what the menu item does when activated.
        //redo:SetBehavior(undefined)
        editItems:Add(redo)

        MenuItem cut
        cut:Initialize("Cut")
        // Set a behavior to indicate what the menu item does when activated.
        //cut:SetBehavior(undefined)
        editItems:Add(cut)

        MenuItem copy
        copy:Initialize("Copy")
        // Set a behavior to indicate what the menu item does when activated.
        //copy:SetBehavior(undefined)
        editItems:Add(copy)

        MenuItem paste
        paste:Initialize("Paste")
        // Set a behavior to indicate what the menu item does when activated.
        //paste:SetBehavior(undefined)
        editItems:Add(paste)

        MenuItem delete
        delete:Initialize("Delete")
        // Set a behavior to indicate what the menu item does when activated.
        //delete:SetBehavior(undefined)
        editItems:Add(delete)

        MenuItem selectAll
        selectAll:Initialize("Select All")
        // Set a behavior to indicate what the menu item does when activated.
        //selectAll:SetBehavior(undefined)
        editItems:Add(selectAll)

        MenuItem goToLine
        goToLine:Initialize("Go to Line")
        // Set a behavior to indicate what the menu item does when activated.
        //goToLine:SetBehavior(undefined)
        editItems:Add(goToLine)

        MenuItem findSelection
        findSelection:Initialize("Find Selection")
        // Set a behavior to indicate what the menu item does when activated.
        //findSelection:SetBehavior(undefined)
        editItems:Add(findSelection)

        MenuItem findNext
        findNext:Initialize("Find Next")
        // Set a behavior to indicate what the menu item does when activated.
        //findNext:SetBehavior(undefined)
        editItems:Add(findNext)

        MenuItem findPrevious
        findPrevious:Initialize("Find Previous")
        // Set a behavior to indicate what the menu item does when activated.
        //findPrevious:SetBehavior(undefined)
        editItems:Add(findPrevious)

        MenuItem find
        find:Initialize("Find")
        // Set a behavior to indicate what the menu item does when activated.
        //find:SetBehavior(undefined)
        editItems:Add(find)

        MenuItem replace
        replace:Initialize("Replace")
        // Set a behavior to indicate what the menu item does when activated.
        //replace:SetBehavior(undefined)
        editItems:Add(replace)

        MenuItem projectProperties
        projectProperties:Initialize("Edit Project Properties")
        // Set a behavior to indicate what the menu item does when activated.
        //projectProperties:SetBehavior(undefined)
        editItems:Add(projectProperties)

        editMenu:Initialize("Edit", editItems)
    end

    private action SetupViewMenu
        Array<MenuItem> viewItems

        MenuItem errorLog
        errorLog:Initialize("Quorum Studio Error Log")
        // Set a behavior to indicate what the menu item does when activated.
        //errorLog:SetBehavior(undefined)
        viewItems:Add(errorLog)

        MenuItem lineNumbers
        lineNumbers:Initialize("Show Line Numbers")
        // Set a behavior to indicate what the menu item does when activated.
        //lineNumbers:SetBehavior(undefined)
        viewItems:Add(lineNumbers)

        MenuItem blocksMode
        blocksMode:Initialize("Enable Blocks Mode")
        // Set a behavior to indicate what the menu item does when activated.
        //blocksMode:SetBehavior(undefined)
        viewItems:Add(blocksMode)

        MenuItem splitMode
        splitMode:Initialize("Enable Split Mode")
        // Set a behavior to indicate what the menu item does when activated.
        //splitMode:SetBehavior(undefined)
        viewItems:Add(splitMode)

        viewMenu:Initialize("View", viewItems)
    end

    private action SetupRunMenu
        Array<MenuItem> runItems

        MenuItem build
        build:Initialize("Build")
        // Set a behavior to indicate what the menu item does when activated.
        build:SetBehavior(behaviors:GetBuildProjectBehavior())
        runItems:Add(build)

        MenuItem cleanAndBuild
        cleanAndBuild:Initialize("Clean and Build")
        // Set a behavior to indicate what the menu item does when activated.
        //cleanAndBuild:SetBehavior(undefined)
        runItems:Add(cleanAndBuild)

        MenuItem run
        run:Initialize("Run")
        // Set a behavior to indicate what the menu item does when activated.
        //run:SetBehavior(undefined)
        runItems:Add(run)

        MenuItem debug
        debug:Initialize("Debug")
        // Set a behavior to indicate what the menu item does when activated.
        //debug:SetBehavior(undefined)
        runItems:Add(debug)

        MenuItem stopDebug
        stopDebug:Initialize("Stop Debugging")
        // Set a behavior to indicate what the menu item does when activated.
        //stopDebug:SetBehavior(undefined)
        runItems:Add(stopDebug)

        MenuItem stepOver
        stepOver:Initialize("Step Over")
        // Set a behavior to indicate what the menu item does when activated.
        //stepOver:SetBehavior(undefined)
        runItems:Add(stepOver)

        MenuItem stepInto
        stepInto:Initialize("Step Into")
        // Set a behavior to indicate what the menu item does when activated.
        //stepInto:SetBehavior(undefined)
        runItems:Add(stepInto)

        MenuItem stepOut
        stepOut:Initialize("Step Out")
        // Set a behavior to indicate what the menu item does when activated.
        //stepOut:SetBehavior(undefined)
        runItems:Add(stepOut)

        MenuItem runToCursor
        runToCursor:Initialize("Run to Cursor")
        // Set a behavior to indicate what the menu item does when activated.
        //runToCursor:SetBehavior(undefined)
        runItems:Add(runToCursor)

        runMenu:Initialize("Run", runItems)
    end

    private action SetupWindowsMenu
        Array<MenuItem> windowsItems

        MenuItem focusNextWindow
        focusNextWindow:Initialize("Focus Next Window")
        focusNextWindow:SetBehavior(behaviors:GetFocusNextWindowBehavior())
        focusNextWindow:SetShortcut(keyMap:GetFocusNextWindowKey())
        windowsItems:Add(focusNextWindow)

        MenuItem focusPreviousWindow
        focusPreviousWindow:Initialize("Focus Previous Window")
        focusPreviousWindow:SetBehavior(behaviors:GetFocusPreviousWindowBehavior())
        focusPreviousWindow:SetShortcut(keyMap:GetFocusPreviousWindowKey())
        windowsItems:Add(focusPreviousWindow)


        MenuItem projects
        projects:Initialize("Projects")
        projects:SetBehavior(behaviors:GetFocusProjectsBehavior())
        projects:SetShortcut(keyMap:GetFocusToProjectsKey())
        windowsItems:Add(projects)

        MenuItem editor
        editor:Initialize("Editor")
        editor:SetBehavior(behaviors:GetFocusEditorBehavior())
        editor:SetShortcut(keyMap:GetFocusToEditorKey())
        windowsItems:Add(editor)

        MenuItem outputTab
        outputTab:Initialize("Output")
        outputTab:SetBehavior(behaviors:GetFocusOutputBehavior())
        outputTab:SetShortcut(keyMap:GetFocusToOutputeKey())
        windowsItems:Add(outputTab)

        MenuItem errors
        errors:Initialize("Errors")
        errors:SetBehavior(behaviors:GetFocusErrorsBehavior())
        errors:SetShortcut(keyMap:GetFocusToErrorsKey())
        windowsItems:Add(errors)

        MenuItem variables
        variables:Initialize("Variables")
        variables:SetBehavior(behaviors:GetFocusVariablesBehavior())
        variables:SetShortcut(keyMap:GetFocusToVariablesKey())
        windowsItems:Add(variables)

        MenuItem breakpoints
        breakpoints:Initialize("Breakpoints")
        breakpoints:SetBehavior(behaviors:GetFocusBreakpointsBehavior())
        breakpoints:SetShortcut(keyMap:GetFocusToBreakpointsKey())
        windowsItems:Add(breakpoints)

        MenuItem callStack
        callStack:Initialize("Call Stack")
        callStack:SetBehavior(behaviors:GetFocusCallStackBehavior())
        callStack:SetShortcut(keyMap:GetFocusToCallStackKey())
        windowsItems:Add(callStack)

        windowsMenu:Initialize("Windows", windowsItems)
    end

    private action SetupHelpMenu
        Array<MenuItem> helpItems

        MenuItem about
        about:Initialize("About")
        // Set a behavior to indicate what the menu item does when activated.
        //about:SetBehavior(undefined)
        helpItems:Add(about)

        MenuItem findHelp
        findHelp:Initialize("Find Help Online")
        // Set a behavior to indicate what the menu item does when activated.
        //findHelp:SetBehavior(undefined)
        helpItems:Add(findHelp)

        MenuItem checkForUpdates
        checkForUpdates:Initialize("Check for Updates")
        // Set a behavior to indicate what the menu item does when activated.
        //checkForUpdates:SetBehavior(undefined)
        helpItems:Add(checkForUpdates)

        helpMenu:Initialize("Help", helpItems)
    end

    action Focus
        GameStateManager manager
        //get my selection
        MenuSelection selection = GetSelection()
        if selection:IsEmpty()
            Array<MenuItem> items
            items:Add(defaultMenuItem)
            Select(items)
            //selection:Set(items)
            fileMenu:Open()
            manager:GetGame():SetFocus(me)
        else 
            Array<MenuItem> array = selection:GetPath()
            MenuItem item = array:Get(array:GetSize() - 1)
            manager:GetGame():SetFocus(me)
        end
    end
end