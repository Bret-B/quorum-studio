package Libraries.Development.Environment.Studio
use Libraries.Development.Environment.Resources
use Libraries.Game.Graphics.Gradient
use Libraries.Game.Graphics.Color
use Libraries.Game.InputTable
use Libraries.Game.GameStateManager
use Libraries.Development.Environment.Studio.Behaviors.Behaviors
use Libraries.Containers.Array
use Libraries.Interface.Controls.MenuItem
use Libraries.Interface.Controls.MenuBar
use Libraries.Development.Environment.Studio.Behaviors.MenuHotkeyBehavior
use Libraries.Game.InputSet
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Development.Environment.Studio.Interface.KeyMap
use Libraries.Interface.Selections.MenuSelection
use Libraries.Development.Environment.Studio.Behaviors.DefaultMenuOpenBehavior
use Libraries.Interface.Events.FocusEvent
use Libraries.Interface.Layouts.LayoutProperties

class Menu is MenuBar
    KeyboardEvent keys
    MenuItem fileMenu
    MenuItem editMenu
    MenuItem viewMenu
    MenuItem runMenu
    MenuItem windowsMenu
    MenuItem helpMenu

    MenuItem defaultMenuItem = undefined
    Resources resources = undefined
    KeyMap keyMap = undefined
    Gradient gradient
    Color color
    number height = 0
    Behaviors behaviors = undefined

    on create
        gradient:Set(color:LightGray(), color:LightGray(), color:White(), color:White())
        SetName("Menu")
    end

    action GetBehaviors returns Behaviors
        return behaviors
    end

    action SetBehaviors(Behaviors behaviors)
        me:behaviors = behaviors
    end

    action SetToDefaultSelection
        Array<MenuItem> items
        items:Add(fileMenu)
        Select(items)
    end

    action GainedFocus(FocusEvent event)
        GameStateManager manager
        //get my selection
        MenuSelection selection = GetSelection()
        if selection:IsEmpty()
            Array<MenuItem> items
            items:Add(fileMenu)
            items:Add(defaultMenuItem)
            Select(items)
            //selection:Set(items)
            fileMenu:Open()
            manager:GetGame():SetFocus(me)
        else 
            Array<MenuItem> array = selection:GetPath()
            MenuItem item = array:Get(array:GetSize() - 1)
            manager:GetGame():SetFocus(me)
        end
    end

    action LostFocus(FocusEvent event)
        Deselect()
    end

    action SetDefaultPopupShortcut
        GameStateManager manager
        InputTable table = manager:GetGame():GetDefaultInputTable()
        table:Add(keyMap:GetDefaultMenuPopup1(), behaviors:GetDefaultMenuOpenBehavior())
        table:Add(keyMap:GetDefaultMenuPopup2(), behaviors:GetDefaultMenuOpenBehavior())
    end

    action SetDisplayOffset(number value)
        height = value
    end

    action GetDisplayOffset returns number
        return height
    end

    action GetResources returns Resources
        return resources
    end

    action SetResources(Resources resources)
        me:resources = resources
        me:keyMap = resources:GetKeyMap()
    end

    action Setup
        SetupFileMenu()
        SetupEditMenu()
        //SetupViewMenu()
        SetupRunMenu()
        SetupWindowsMenu()
        SetupHelpMenu()

        Array<MenuItem> menuItems
        menuItems:Add(fileMenu)
        menuItems:Add(editMenu)
        //menuItems:Add(viewMenu)
        menuItems:Add(runMenu)
        menuItems:Add(windowsMenu)
        menuItems:Add(helpMenu)
        Add(menuItems)
        SetDefaultPopupShortcut()
    end

    //Adding the mouse listeners will give unintended results for now
    private action SetupFileMenu
        Array<MenuItem> fileItems
        
        MenuItem newProject
        defaultMenuItem = newProject
        newProject:SetName("New Project")
        // Set a behavior to indicate what the menu item does when activated.
        newProject:SetBehavior(behaviors:GetOpenNewProjectBehavior())
        fileItems:Add(newProject)
        
        // The openProject is instead declared as a field so it can be used
        // later in SetupMenuHotkeys().
        MenuItem openProject
        openProject:SetName("Open Project")
        // Set a behavior to indicate what the menu item does when activated.
        openProject:SetBehavior(behaviors:GetOpenProjectBehavior())
        fileItems:Add(openProject)

        MenuItem closeProject
        closeProject:SetName("Close Project")
        // Set a behavior to indicate what the menu item does when activated.
        closeProject:SetBehavior(behaviors:GetCloseProjectBehavior())
        fileItems:Add(closeProject)

        MenuItem newFile
        newFile:SetName("New File")
        // Set a behavior to indicate what the menu item does when activated.
        newFile:SetBehavior(behaviors:GetOpenNewFileBehavior())
        fileItems:Add(newFile)
        
        MenuItem openFile
        openFile:SetName("Open File")
        // Set a behavior to indicate what the menu item does when activated.
        //openFile:SetBehavior(undefined)
        fileItems:Add(openFile)

        MenuItem save
        save:SetName("Save")
        save:SetBehavior(behaviors:GetSaveBehavior())
        save:SetShortcut(keyMap:GetSaveKey())
        fileItems:Add(save)

        MenuItem saveAs
        saveAs:SetName("Save As...")
        // Set a behavior to indicate what the menu item does when activated.
        //saveAs:SetBehavior(undefined)
        fileItems:Add(saveAs)

        MenuItem saveAll
        saveAll:SetName("Save All")
        // Set a behavior to indicate what the menu item does when activated.
        saveAll:SetBehavior(behaviors:GetSaveAllBehavior())
        fileItems:Add(saveAll)

        MenuItem exit
        exit:SetName("Exit")
        // Set a behavior to indicate what the menu item does when activated.
        exit:SetBehavior(behaviors:GetExitBehavior())
        exit:SetShortcut(keyMap:GetExitKey())
        fileItems:Add(exit)

        fileMenu:SetName("File")
        fileMenu:Add(fileItems)
    end

    private action SetupEditMenu
        Array<MenuItem> editItems

        MenuItem undo
        undo:SetName("Undo")
        // Set a behavior to indicate what the menu item does when activated.
        //undo:SetBehavior(undefined)
        editItems:Add(undo)

        MenuItem redo
        redo:SetName("Redo")
        // Set a behavior to indicate what the menu item does when activated.
        //redo:SetBehavior(undefined)
        editItems:Add(redo)

        MenuItem cut
        cut:SetName("Cut")
        // Set a behavior to indicate what the menu item does when activated.
        //cut:SetBehavior(undefined)
        editItems:Add(cut)

        MenuItem copy
        copy:SetName("Copy")
        // Set a behavior to indicate what the menu item does when activated.
        //copy:SetBehavior(undefined)
        editItems:Add(copy)

        MenuItem paste
        paste:SetName("Paste")
        // Set a behavior to indicate what the menu item does when activated.
        //paste:SetBehavior(undefined)
        editItems:Add(paste)

        MenuItem delete
        delete:SetName("Delete")
        // Set a behavior to indicate what the menu item does when activated.
        //delete:SetBehavior(undefined)
        editItems:Add(delete)

        MenuItem selectAll
        selectAll:SetName("Select All")
        // Set a behavior to indicate what the menu item does when activated.
        //selectAll:SetBehavior(undefined)
        editItems:Add(selectAll)

        MenuItem goToLine
        goToLine:SetName("Go to Line")
        // Set a behavior to indicate what the menu item does when activated.
        //goToLine:SetBehavior(undefined)
        editItems:Add(goToLine)

        MenuItem findSelection
        findSelection:SetName("Find Selection")
        // Set a behavior to indicate what the menu item does when activated.
        //findSelection:SetBehavior(undefined)
        editItems:Add(findSelection)

        MenuItem findNext
        findNext:SetName("Find Next")
        // Set a behavior to indicate what the menu item does when activated.
        //findNext:SetBehavior(undefined)
        editItems:Add(findNext)

        MenuItem findPrevious
        findPrevious:SetName("Find Previous")
        // Set a behavior to indicate what the menu item does when activated.
        //findPrevious:SetBehavior(undefined)
        editItems:Add(findPrevious)

        MenuItem find
        find:SetName("Find")
        // Set a behavior to indicate what the menu item does when activated.
        //find:SetBehavior(undefined)
        editItems:Add(find)

        MenuItem replace
        replace:SetName("Replace")
        // Set a behavior to indicate what the menu item does when activated.
        //replace:SetBehavior(undefined)
        editItems:Add(replace)

        MenuItem projectProperties
        projectProperties:SetName("Edit Project Properties")
        // Set a behavior to indicate what the menu item does when activated.
        projectProperties:SetBehavior(behaviors:GetOpenProjectPropertiesBehavior())
        editItems:Add(projectProperties)

        editMenu:SetName("Edit")
        editMenu:Add(editItems)
    end

    private action SetupViewMenu
        Array<MenuItem> viewItems

        MenuItem errorLog
        errorLog:SetName("Quorum Studio Error Log")
        // Set a behavior to indicate what the menu item does when activated.
        //errorLog:SetBehavior(undefined)
        viewItems:Add(errorLog)

        MenuItem lineNumbers
        lineNumbers:SetName("Show Line Numbers")
        // Set a behavior to indicate what the menu item does when activated.
        //lineNumbers:SetBehavior(undefined)
        viewItems:Add(lineNumbers)

        MenuItem blocksMode
        blocksMode:SetName("Enable Blocks Mode")
        // Set a behavior to indicate what the menu item does when activated.
        //blocksMode:SetBehavior(undefined)
        viewItems:Add(blocksMode)

        MenuItem splitMode
        splitMode:SetName("Enable Split Mode")
        // Set a behavior to indicate what the menu item does when activated.
        //splitMode:SetBehavior(undefined)
        viewItems:Add(splitMode)

        viewMenu:SetName("View")
        viewMenu:Add(viewItems)
    end

    private action SetupRunMenu
        Array<MenuItem> runItems

        MenuItem build
        build:SetName("Build")
        build:SetShortcut(keyMap:GetBuildKey())
        build:SetBehavior(behaviors:GetThreadedBuildProjectBehavior())
        runItems:Add(build)

        MenuItem clean
        clean:SetName("Clean")
        clean:SetShortcut(keyMap:GetCleanKey())
        clean:SetBehavior(behaviors:GetThreadedCleanProjectBehavior())
        runItems:Add(clean)

        MenuItem cleanAndBuild
        cleanAndBuild:SetName("Clean and Build")
        cleanAndBuild:SetShortcut(keyMap:GetCleanBuildKey())
        cleanAndBuild:SetBehavior(behaviors:GetThreadedCleanBuildProjectBehavior())
        runItems:Add(cleanAndBuild)

        MenuItem run
        run:SetName("Run")
        run:SetShortcut(keyMap:GetRunKey())
        run:SetBehavior(behaviors:GetThreadedRunProjectBehavior())
        runItems:Add(run)

        MenuItem debug
        debug:SetName("Debug")
        debug:SetShortcut(keyMap:GetDebugKey())
        debug:SetBehavior(behaviors:GetThreadedDebugProjectBehavior())
        runItems:Add(debug)

        MenuItem stopDebug
        stopDebug:SetName("Stop")
        stopDebug:SetShortcut(keyMap:GetStopKey())
        stopDebug:SetBehavior(behaviors:GetThreadedStopBehavior())
        runItems:Add(stopDebug)

        MenuItem pauseDebug
        pauseDebug:SetName("Pause")
        pauseDebug:SetShortcut(keyMap:GetStopKey())
        pauseDebug:SetBehavior(behaviors:GetThreadedPauseBehavior())
        runItems:Add(pauseDebug)

        MenuItem continueDebug
        continueDebug:SetName("Continue")
        continueDebug:SetShortcut(keyMap:GetStopKey())
        continueDebug:SetBehavior(behaviors:GetThreadedContinueBehavior())
        runItems:Add(continueDebug)

        MenuItem stepOver
        stepOver:SetName("Step Over")
        stepOver:SetShortcut(keyMap:GetStepOverKey())
        stepOver:SetBehavior(behaviors:GetThreadedStepOverBehavior())
        runItems:Add(stepOver)

        MenuItem stepInto
        stepInto:SetName("Step Into")
        stepInto:SetShortcut(keyMap:GetStepIntoKey())
        stepInto:SetBehavior(behaviors:GetThreadedStepIntoBehavior())
        runItems:Add(stepInto)

        MenuItem stepOut
        stepOut:SetName("Step Out")
        stepOut:SetShortcut(keyMap:GetStepOutKey())
        stepOut:SetBehavior(behaviors:GetThreadedStepOutBehavior())
        runItems:Add(stepOut)

        MenuItem runToCursor
        runToCursor:SetName("Run to Cursor")
        runToCursor:SetShortcut(keyMap:GetRunToCursorKey())
        runToCursor:SetBehavior(behaviors:GetThreadedRunToCursorBehavior())
        runItems:Add(runToCursor)

        MenuItem toggleBreakpoint
        toggleBreakpoint:SetName("Toggle Breakpoint")
        toggleBreakpoint:SetShortcut(keyMap:GetToggleBreakpointKey())
        toggleBreakpoint:SetBehavior(behaviors:GetToggleBreakpointBehavior())
        runItems:Add(toggleBreakpoint)

        runMenu:SetName("Run")
        runMenu:Add(runItems)
    end

    private action SetupWindowsMenu
        Array<MenuItem> windowsItems

        MenuItem focusNextWindow
        focusNextWindow:SetName("Focus Next Window")
        focusNextWindow:SetBehavior(behaviors:GetFocusNextWindowBehavior())
        focusNextWindow:SetShortcut(keyMap:GetFocusNextWindowKey())
        windowsItems:Add(focusNextWindow)

        MenuItem focusPreviousWindow
        focusPreviousWindow:SetName("Focus Previous Window")
        focusPreviousWindow:SetBehavior(behaviors:GetFocusPreviousWindowBehavior())
        focusPreviousWindow:SetShortcut(keyMap:GetFocusPreviousWindowKey())
        windowsItems:Add(focusPreviousWindow)


        MenuItem projects
        projects:SetName("Projects")
        projects:SetBehavior(behaviors:GetFocusProjectsBehavior())
        projects:SetShortcut(keyMap:GetFocusToProjectsKey())
        windowsItems:Add(projects)

        MenuItem editor
        editor:SetName("Editor")
        editor:SetBehavior(behaviors:GetFocusEditorBehavior())
        editor:SetShortcut(keyMap:GetFocusToEditorKey())
        windowsItems:Add(editor)

        MenuItem outputTab
        outputTab:SetName("Output")
        outputTab:SetBehavior(behaviors:GetFocusOutputBehavior())
        outputTab:SetShortcut(keyMap:GetFocusToOutputKey())
        windowsItems:Add(outputTab)

        MenuItem errors
        errors:SetName("Errors")
        errors:SetBehavior(behaviors:GetFocusErrorsBehavior())
        errors:SetShortcut(keyMap:GetFocusToErrorsKey())
        windowsItems:Add(errors)

        MenuItem variables
        variables:SetName("Variables")
        variables:SetBehavior(behaviors:GetFocusVariablesBehavior())
        variables:SetShortcut(keyMap:GetFocusToVariablesKey())
        windowsItems:Add(variables)

        MenuItem breakpoints
        breakpoints:SetName("Breakpoints")
        breakpoints:SetBehavior(behaviors:GetFocusBreakpointsBehavior())
        breakpoints:SetShortcut(keyMap:GetFocusToBreakpointsKey())
        windowsItems:Add(breakpoints)

        MenuItem callStack
        callStack:SetName("Call Stack")
        callStack:SetBehavior(behaviors:GetFocusCallStackBehavior())
        callStack:SetShortcut(keyMap:GetFocusToCallStackKey())
        windowsItems:Add(callStack)

        windowsMenu:SetName("Windows")
        windowsMenu:Add(windowsItems)
    end

    private action SetupHelpMenu
        Array<MenuItem> helpItems

        MenuItem about
        about:SetName("About")
        // Set a behavior to indicate what the menu item does when activated.
        //about:SetBehavior(undefined)
        helpItems:Add(about)

        MenuItem findHelp
        findHelp:SetName("Find Help Online")
        // Set a behavior to indicate what the menu item does when activated.
        //findHelp:SetBehavior(undefined)
        helpItems:Add(findHelp)

        MenuItem checkForUpdates
        checkForUpdates:SetName("Check for Updates")
        // Set a behavior to indicate what the menu item does when activated.
        //checkForUpdates:SetBehavior(undefined)
        helpItems:Add(checkForUpdates)

        helpMenu:SetName("Help")
        helpMenu:Add(helpItems)
    end
end