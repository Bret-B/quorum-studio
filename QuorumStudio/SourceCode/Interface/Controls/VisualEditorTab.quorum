package Libraries.Development.Environment.Studio.Interface

use Libraries.Interface.Controls.Tab
use Libraries.System.File
use Libraries.Containers.Array
use Libraries.Game.Graphics.Model
use Libraries.Game.Layer3D
use Libraries.Game.GameStateManager
use Libraries.Game.Game
use Libraries.Game.Scenes.Scene
use Libraries.Game.Graphics.AmbientLight
use Libraries.Game.Graphics.DirectionalLight
use Libraries.Game.Graphics.PointLight
use Libraries.Development.Environment.Studio.Interface.VisualEditor.VisualSceneController
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Game.Graphics.Skybox
use Libraries.System.Properties
use Libraries.Development.Environment.Studio.Interface.VisualEditor.Item3DPropertiesDialog
use Libraries.Game.Scenes.DefaultSceneManager
use Libraries.Game.Layer
use Libraries.Game.Scenes.SceneProperties
use Libraries.Game.Layer2D
use Libraries.Development.Environment.Studio.Interface.VisualEditor.VisualEditorResources
use Libraries.Interface.Item3D
use Libraries.Development.Environment.Studio.QuorumStudio
use Libraries.Development.Environment.Studio.Interface.VisualEditor.SceneTree
use Libraries.Game.Graphics.Camera
use Libraries.Development.Environment.Studio.Interface.VisualEditor.EditorLayer2D
use Libraries.Containers.Number32BitArray
use Libraries.Development.Environment.Studio.Interface.VisualEditor.EditorLayer3D
use Libraries.Development.Environment.Studio.Interface.VisualEditor.EditorLayer
use Libraries.Development.Environment.Studio.Interface.VisualEditor.Item2DPropertiesDialog
use Libraries.Development.Environment.Studio.Interface.VisualEditor.ScenePalette
use Libraries.Development.Environment.Studio.Interface.VisualEditor.Camera2DPropertiesDialog

class VisualEditorTab is Tab, DefaultSceneManager

    File file = undefined
    File projectLocation = undefined
    VisualSceneController controller = undefined
    GameStateManager manager

    Item2DPropertiesDialog item2dPropertiesDialog
    Item3DPropertiesDialog item3dPropertiesDialog
    Camera2DPropertiesDialog camera2dPropertiesDialog

    action GetFile returns File
        return file
    end

    action SetFile(File file)
        me:file = file
    end

    action GetProjectLocation returns File
        return projectLocation
    end

    action SetProjectLocation(File file)
        me:projectLocation = file
    end

    action Load
        Scene scene
        scene:Load(file)

        VisualSceneController controller
        me:controller = controller
        controller:SetName(file:GetPath())
        SetRelatedItem(controller)
        SetFocusTarget(controller)

        Load(scene)

        item3dPropertiesDialog:Initialize(controller)
        item2dPropertiesDialog:Initialize(controller)
        camera2dPropertiesDialog:Initialize(controller)
    end

    /* 
    Overrides the action in DefaultSceneManager. Used to determine which layers
    should be used to match the layers described in the Scene.

    We always make new layers which are stored as part of the VisualSceneController.
    */
    private action SelectLayer(JavaScriptObjectNotation layerJson) returns Layer
        SceneProperties properties

        text name = layerJson:GetValue(properties:NAME)
        text classValue = layerJson:GetValue(properties:CLASS)
        EditorLayer current = undefined

        /*
        Currently we only accept the first 3D layer found. This will change
        when the VisualSceneController changes to work with the tree.
        */
        if classValue = "Layer3D"
            EditorLayer3D layer
            current = layer
        elseif classValue = "Layer2D"
            EditorLayer2D layer
            current = layer
        end

        current:SetName(name)
        controller:AddLayer(current)

        return current
    end

    /*
    This action can be used to override a portion of the default camera loading.
    */
    private action CustomLoadCameraProperty(Layer layer, Camera camera, text key, JavaScriptObjectNotation json) returns boolean
        SceneProperties properties
        if key = properties:SIZE
            if layer is EditorLayer2D
                EditorLayer2D layer2D = cast(EditorLayer2D, layer)
                Number32BitArray size = ConvertToNumber32BitArray(json:GetObject(key))
                layer2D:SetCameraPreviewSize(size:Get(0), size:Get(1))
                return true
            end
        end

        return false
    end

    private action CustomSaveCameraProperty(Layer layer, Camera camera, text key, JavaScriptObjectNotation json) returns boolean
        SceneProperties properties
        if key = properties:SIZE and layer is EditorLayer2D
            EditorLayer2D layer2D = cast(EditorLayer2D, layer)
            json:Add(properties:SIZE, NewJsonArray(layer2D:GetCameraPreviewWidth(), layer2D:GetCameraPreviewHeight()))
            return true
        end

        return false
    end

    action Save
        Array<EditorLayer> layers = GetSceneController():GetSceneLayers()
        Scene scene = Save(layers)
        scene:GetData():SetPrettyPrint(true)
        file:Write(scene:GetData():ToText())
    end

    // We override the particular save item calls to ignore items with the editor tag.
    private action SaveItem3D(Item3D item) returns JavaScriptObjectNotation
        VisualEditorResources resources

        if item:HasProperty(resources:EDITOR_TAG)
            return undefined
        end

        return parent:DefaultSceneManager:SaveItem3D(item)
    end

    private action SaveItem2D(Item2D item) returns JavaScriptObjectNotation
        VisualEditorResources resources

        if item:HasProperty(resources:EDITOR_TAG)
            return undefined
        end

        return parent:DefaultSceneManager:SaveItem2D(item)
    end

    private action CustomLoadProperty3D(Item3D item, text key, JavaScriptObjectNotation json) returns boolean
        SceneProperties properties
        if key = properties:PHYSICS_ENABLED
            JavaScriptObjectNotation newJson
            boolean value = json:GetBoolean(key)
            newJson:SetBoolean(value)
            item:SetProperty(properties:PHYSICS_ENABLED, newJson)
            return true
        elseif key = properties:RESPONSIVENESS
            check
                integer value = json:GetInteger(key)
                JavaScriptObjectNotation newJson
                newJson:SetInteger(value)
                item:SetProperty(properties:RESPONSIVENESS, newJson)
                return true
            detect e is Error
                // An error occurs if there was no RESPONSIVENESS value to get. In that case we return silently.
                return false
            end
        elseif key = properties:MASS or key = properties:FRICTION or key = properties:RESTITUTION
            check
                number value = json:GetNumber(key)
                JavaScriptObjectNotation newJson
                newJson:SetNumber(value)
                item:SetProperty(key, newJson)
                return true
            detect e is Error
                // An error occurs if there was no value to get. In that case we return silently.
                return false
            end
        end

        return false
    end

    private action CustomSaveProperty3D(Item3D item, text key, JavaScriptObjectNotation json) returns boolean
        SceneProperties properties
        if key = properties:PHYSICS_ENABLED
            if item:HasProperty(key)
                boolean value = item:GetProperty(key):GetBoolean()
                json:Add(key, value)
                return true
            end
        elseif key = properties:RESPONSIVENESS
            if item:HasProperty(key)
                integer value = item:GetProperty(key):GetInteger()
                json:Add(key, value)
                return true
            end
        elseif key = properties:MASS or key = properties:FRICTION or key = properties:RESTITUTION
            if item:HasProperty(key)
                number value = item:GetProperty(key):GetNumber()
                json:Add(key, value)
                return true
            end
        end
        return false
    end

    action OnToggleOn
        parent:Tab:OnToggleOn()
        ShowLayers()

        QuorumStudio studio = cast(QuorumStudio, manager:GetGame())
        SceneTree tree = studio:GetSceneTree()
        tree:SetSceneController(controller)
        ScenePalette palette = studio:GetScenePalette()
        palette:SetSceneController(controller)
    end

    action OnToggleOff
        HideLayers()
        parent:Tab:OnToggleOff()

        QuorumStudio studio = cast(QuorumStudio, manager:GetGame())
        SceneTree tree = studio:GetSceneTree()
        tree:SetSceneController(undefined)
        ScenePalette palette = studio:GetScenePalette()
        palette:SetSceneController(undefined)
    end

    action HideLayers
        Array<EditorLayer> layers = GetSceneController():GetSceneLayers()
        integer counter = 0
        repeat while counter < layers:GetSize()
            Layer layer = layers:Get(counter)
            Game game = manager:GetGame()
            game:RemoveLayer(layer)
            counter = counter + 1
        end

        item3dPropertiesDialog:Hide()
    end

    action ShowLayers
        Array<EditorLayer> layers = GetSceneController():GetSceneLayers()
        integer counter = 0
        repeat while counter < layers:GetSize()
            Layer layer = layers:Get(counter)
            Game game = manager:GetGame()
            game:AddLayer(layer)
            counter = counter + 1
        end

        item3dPropertiesDialog:Hide()
    end

    action OnClose
        HideLayers()
        // Do extra work to dispose of models, etc. here
    end

    action GetSceneController returns VisualSceneController
        Item2D value = GetRelatedItem()
        if value is VisualSceneController
            return cast(VisualSceneController, value)
        else
            return undefined
        end
    end
end
