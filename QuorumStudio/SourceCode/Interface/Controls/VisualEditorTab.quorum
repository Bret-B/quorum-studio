package Libraries.Development.Environment.Studio.Interface

use Libraries.Interface.Controls.Tab
use Libraries.System.File
use Libraries.Containers.Array
use Libraries.Game.Graphics.Model
use Libraries.Game.Layer3D
use Libraries.Game.GameStateManager
use Libraries.Game.Game
use Libraries.Game.Scenes.Scene
use Libraries.Game.Scenes.ModelSceneProperty
use Libraries.Game.Scenes.LightSceneProperty
use Libraries.Game.Graphics.AmbientLight
use Libraries.Game.Graphics.DirectionalLight
use Libraries.Game.Graphics.PointLight
use Libraries.Development.Environment.Studio.Interface.VisualEditor.VisualSceneController
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Game.Graphics.Skybox
use Libraries.System.Properties
use Libraries.Development.Environment.Studio.Interface.VisualEditor.PropertiesDialog
use Libraries.Game.Scenes.DefaultSceneManager
use Libraries.Game.Layer
use Libraries.Game.Scenes.SceneProperties
use Libraries.Game.Layer2D
use Libraries.Development.Environment.Studio.Interface.VisualEditor.VisualEditorResources
use Libraries.Interface.Item3D

class VisualEditorTab is Tab, DefaultSceneManager

    File file = undefined
    File projectLocation = undefined
    VisualSceneController controller = undefined
    GameStateManager manager

    PropertiesDialog propertiesDialog

    action GetFile returns File
        return file
    end

    action SetFile(File file)
        me:file = file
    end

    action GetProjectLocation returns File
        return projectLocation
    end

    action SetProjectLocation(File file)
        me:projectLocation = file
    end

    action Load
        Scene scene
        scene:Load(file)

        VisualSceneController controller
        me:controller = controller
        controller:SetName(file:GetPath())
        SetRelatedItem(controller)
        SetFocusTarget(controller)

        Load(scene)
        // The default Layer itself is added to the game when the tab is toggled on.

        propertiesDialog:Initialize(controller)
    end

    /* 
    Overrides the action in DefaultSceneManager. Used to determine which layers
    should be used to match the layers described in the Scene.

    We always make new layers which are stored as part of the VisualSceneController.
    */
    private action SelectLayer(JavaScriptObjectNotation layerJson) returns Layer
        SceneProperties properties

        text name = layerJson:GetValue(properties:NAME)
        text classValue = layerJson:GetValue(properties:CLASS)
        Layer current = undefined

        /*
        Currently we only accept the first 3D layer found. This will change
        when the VisualSceneController changes to work with the tree.
        */
        if classValue = "Layer3D"
            // This layer might need to become something else in the future.
            // It might be a custom class or have the editor tag in its name.
            Layer3D layer

            if controller:GetEditorLayer() = undefined
                controller:SetEditorLayer(layer)
            end

            current = layer
        elseif classValue = "Layer2D"
            Layer2D layer
            current = layer
        end

        current:SetName(name)

        return current
    end

    action Save
        Array<Layer> layers
        Layer3D layer = GetSceneController():GetEditorLayer()
        layers:Add(layer)
        Scene scene = Save(layers)
        scene:GetData():SetPrettyPrint(true)
        file:Write(scene:GetData():ToText())
    end

    // We override the particular save item calls to ignore items with the editor tag.
    private action SaveItem3D(Item3D item) returns JavaScriptObjectNotation
        VisualEditorResources resources

        if item:HasProperty(resources:EDITOR_TAG)
            return undefined
        end

        return parent:DefaultSceneManager:SaveItem3D(item)
    end

    private action SaveItem2D(Item2D item) returns JavaScriptObjectNotation
        VisualEditorResources resources

        if item:HasProperty(resources:EDITOR_TAG)
            return undefined
        end

        return parent:DefaultSceneManager:SaveItem2D(item)
    end

    action OnToggleOn
        parent:Tab:OnToggleOn()
        ShowLayer()
    end

    action OnToggleOff
        HideLayer()
        parent:Tab:OnToggleOff()
    end

    action HideLayer
        Layer3D layer = GetSceneController():GetEditorLayer()
        Game game = manager:GetGame()
        game:RemoveLayer(layer)

        propertiesDialog:Hide()
    end

    action ShowLayer
        Layer3D layer = GetSceneController():GetEditorLayer()
        Game game = manager:GetGame()
        game:AddLayer(layer)
    end

    action OnClose
        HideLayer()
        // Do extra work to dispose of models, etc. here
    end

    action GetSceneController returns VisualSceneController
        Item2D value = GetRelatedItem()
        if value is VisualSceneController
            return cast(VisualSceneController, value)
        else
            return undefined
        end
    end
end
