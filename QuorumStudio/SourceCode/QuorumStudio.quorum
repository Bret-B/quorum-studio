package Libraries.Development.Environment.Studio

use Libraries.Interface.Controls.MenuBar
use Libraries.Interface.Controls.MenuItem
use Libraries.Game.Graphics.Color
use Libraries.Development.Environment.Studio.Actions.ExitAction
use Libraries.Game.Game
use Libraries.Development.Environment.Projects.ProjectManager
use Libraries.Development.Environment.Studio.Updates.Updater
use Libraries.System.File
use Libraries.Interface.TextBox
use Libraries.Containers.Array
use Libraries.Game.Graphics.Gradient
use Libraries.Interface.Item2D
use Libraries.Interface.LabelBoxContent
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.ImageInterfaceContent
use Libraries.Interface.Button
use Libraries.Game.Layer2D
use Libraries.Interface.Toolbar
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Game.Behaviors.Behavior
use Libraries.Development.Environment.Projects.Project
use Libraries.Development.Environment.Studio.Behaviors.Build
use Libraries.Development.Environment.Studio.Behaviors.OpenProject
use Libraries.Interface.Controls.FileChooser
use Libraries.Development.Environment.Studio.Behaviors.OpenProjectBehavior
use Libraries.Interface.Controls.Tree
use Libraries.Interface.Controls.TreeItem
use Libraries.Game.Graphics.Texture
use Libraries.Interface.Controls.ScrollPane
use Libraries.Interface.Layouts.FillLayout
use Libraries.Interface.Controls.TabPane
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Controls.Tab
use Libraries.Language.Errors.FileNotFoundError
use Libraries.Language.Errors.InputOutputError
use Libraries.Development.Environment.Projects.ProjectListener
use Libraries.Development.Environment.Projects.Quorum.QuorumProject
use Libraries.Development.Environmen.Resources
use Libraries.Development.Environment.Projects.ProjectView

class QuorumStudio is Game, ProjectListener
    MenuBar menuBar
    MenuItem fileMenu
    MenuItem editMenu
    MenuItem viewMenu
    MenuItem runMenu
    MenuItem windowsMenu
    MenuItem helpMenu
    ScrollPane projectPane
    Tree projectTree
    TabPane codeTabs
    TextBox outputWindow

    Item2D mainContentPane

    Color color
    Gradient gradient

    Color background
    ProjectManager manager
    Updater updater
    Toolbar toolbar
    text TOOLBAR_RESOURCES = "Resources/Graphics/Toolbar/"
    number tempXOffset = 0
    Project selectedProject = undefined

    Resources resources
    //behaviors
    OpenProjectBehavior openProjectBehavior



    action Start
        StartGame()
    end

    action GetProjectManager returns ProjectManager
        return manager
    end

    action CreateGame
        manager:Add(me)
        resources:Load()
        gradient:Set(color:LightGray(), color:LightGray(), color:White(), color:White())
        Layer2D layer = me:GetCurrentLayer2D()
        layer:SetAutomaticResizing(true)

        Behavior behave
        openProjectBehavior:SetMainApplication(me)
        CreateMenuBar()
        CreateToolbar()
        CreateMainContentPane()
        Add(mainContentPane)
        Add(toolbar)
        Add(menuBar)

        mainContentPane:Resize()
    end

    action OpenedProject(QuorumProject project)
        ProjectView view = project:GetProjectView()
        view:SetResources(resources)
        TreeItem item = view:GetLogicalTree()

        projectTree:AddTreeItem(item)
        //treeItem:SetDoubleClickBehavior(Behavior)
        projectTree:Resize()
    end

    action ClosedProject(QuorumProject project)
    end

    action CreateToolbar
        
        LabelBoxContent content
        content:Initialize(gradient, color:Black(), "")
        content:SetBorderThickness(0)
        
        toolbar:SetVisualContent(content)

        FlowLayout toolbarLayout
        toolbarLayout:SetWrapping(true)
        // Width is the full width of the screen.
        toolbarLayout:SetPercentageWidth(1)
        // Height is fixed to 100 pixels.
        toolbarLayout:SetPercentageHeight(0)
        toolbarLayout:SetHeightOffset(24)
        toolbarLayout:SetFrontPadding(true)
        toolbarLayout:SetPadding(6)

        // Toolbar is placed at top of screen, minus 100 pixels.
        toolbarLayout:SetPercentageY(1)
        toolbarLayout:SetPercentageOriginY(1)
        toolbarLayout:SetOffsetY(-menuBar:GetHeight())

        toolbar:AddLayout(toolbarLayout)

        // Force the toolbar to resize to the new layout.
        toolbar:Resize()

        // Load some testing textures into buttons.
        integer counter = 0

        // Boundary of the last button.
        number endValue = 0
        Build build
        build:SetQuorumStudio(me)

        OpenProject open
        open:SetQuorumStudio(me)

        AddButtonToToolbar(TOOLBAR_RESOURCES + "NewProject.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "NewFile.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "OpenProject.png", open)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "SaveAll.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Undo.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Redo.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Build.png", build)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "CleanAndBuild.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Run.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Debug.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Stop.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Pause.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Continue.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "StepOver.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "StepInto.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "StepOut.png", undefined)
        toolbar:Resize()
    end

    private action AddButtonToToolbar(text image, Behavior behavior)

        ImageInterfaceContent buttonContent
        buttonContent:Load(image)
        
        Button button
        
        button:SetVisualContent(buttonContent)

        button:SetWidth(24)
        button:SetHeight(24)

        if behavior not= undefined
            button:SetBehavior(behavior)
        end
        toolbar:Add(button)
    end
    
    action GetSelectedProject returns Project
        return selectedProject
    end

    action GetMenuBar returns MenuBar
        return menuBar
    end

    action CreateMenuBar
        SetupFileMenu()
        SetupEditMenu()
        SetupViewMenu()
        SetupRunMenu()
        SetupWindowsMenu()
        SetupHelpMenu()

        Array<MenuItem> menuItems
        menuItems:Add(fileMenu)
        menuItems:Add(editMenu)
        menuItems:Add(viewMenu)
        menuItems:Add(runMenu)
        menuItems:Add(windowsMenu)
        menuItems:Add(helpMenu)
        menuBar:Initialize(menuItems)
    end

    //Adding the mouse listeners will give unintended results for now
    private action SetupFileMenu
        Array<MenuItem> fileItems

        MenuItem newProject
        newProject:Initialize("New Project")
        // Set a behavior to indicate what the menu item does when activated.
        //newProject:SetBehavior(undefined)
        fileItems:Add(newProject)
        
        MenuItem openProject
        openProject:Initialize("Open Project")
        // Set a behavior to indicate what the menu item does when activated.
        openProject:SetBehavior(openProjectBehavior)
        fileItems:Add(openProject)

        MenuItem closeProject
        closeProject:Initialize("Close Project")
        // Set a behavior to indicate what the menu item does when activated.
        //closeProject:SetBehavior(undefined)
        fileItems:Add(closeProject)

        MenuItem newFile
        newFile:Initialize("New File")
        // Set a behavior to indicate what the menu item does when activated.
        //newFile:SetBehavior(undefined)
        fileItems:Add(newFile)

        MenuItem openFile
        openFile:Initialize("Open File")
        // Set a behavior to indicate what the menu item does when activated.
        //openFile:SetBehavior(undefined)
        fileItems:Add(openFile)

        MenuItem save
        save:Initialize("Save")
        // Set a behavior to indicate what the menu item does when activated.
        //save:SetBehavior(undefined)
        fileItems:Add(save)

        MenuItem saveAs
        saveAs:Initialize("Save As...")
        // Set a behavior to indicate what the menu item does when activated.
        //saveAs:SetBehavior(undefined)
        fileItems:Add(saveAs)

        MenuItem saveAll
        saveAll:Initialize("Save All")
        // Set a behavior to indicate what the menu item does when activated.
        //saveAll:SetBehavior(undefined)
        fileItems:Add(saveAll)

        MenuItem exit
        exit:Initialize("Exit")
        // Set a behavior to indicate what the menu item does when activated.
        //exit:SetBehavior(undefined)
        fileItems:Add(exit)

        fileMenu:Initialize("File", fileItems)
    end

    private action SetupEditMenu
        Array<MenuItem> editItems

        MenuItem undo
        undo:Initialize("Undo")
        // Set a behavior to indicate what the menu item does when activated.
        //undo:SetBehavior(undefined)
        editItems:Add(undo)

        MenuItem redo
        redo:Initialize("Redo")
        // Set a behavior to indicate what the menu item does when activated.
        //redo:SetBehavior(undefined)
        editItems:Add(redo)

        MenuItem cut
        cut:Initialize("Cut")
        // Set a behavior to indicate what the menu item does when activated.
        //cut:SetBehavior(undefined)
        editItems:Add(cut)

        MenuItem copy
        copy:Initialize("Copy")
        // Set a behavior to indicate what the menu item does when activated.
        //copy:SetBehavior(undefined)
        editItems:Add(copy)

        MenuItem paste
        paste:Initialize("Paste")
        // Set a behavior to indicate what the menu item does when activated.
        //paste:SetBehavior(undefined)
        editItems:Add(paste)

        MenuItem delete
        delete:Initialize("Delete")
        // Set a behavior to indicate what the menu item does when activated.
        //delete:SetBehavior(undefined)
        editItems:Add(delete)

        MenuItem selectAll
        selectAll:Initialize("Select All")
        // Set a behavior to indicate what the menu item does when activated.
        //selectAll:SetBehavior(undefined)
        editItems:Add(selectAll)

        MenuItem goToLine
        goToLine:Initialize("Go to Line")
        // Set a behavior to indicate what the menu item does when activated.
        //goToLine:SetBehavior(undefined)
        editItems:Add(goToLine)

        MenuItem findSelection
        findSelection:Initialize("Find Selection")
        // Set a behavior to indicate what the menu item does when activated.
        //findSelection:SetBehavior(undefined)
        editItems:Add(findSelection)

        MenuItem findNext
        findNext:Initialize("Find Next")
        // Set a behavior to indicate what the menu item does when activated.
        //findNext:SetBehavior(undefined)
        editItems:Add(findNext)

        MenuItem findPrevious
        findPrevious:Initialize("Find Previous")
        // Set a behavior to indicate what the menu item does when activated.
        //findPrevious:SetBehavior(undefined)
        editItems:Add(findPrevious)

        MenuItem find
        find:Initialize("Find")
        // Set a behavior to indicate what the menu item does when activated.
        //find:SetBehavior(undefined)
        editItems:Add(find)

        MenuItem replace
        replace:Initialize("Replace")
        // Set a behavior to indicate what the menu item does when activated.
        //replace:SetBehavior(undefined)
        editItems:Add(replace)

        MenuItem projectProperties
        projectProperties:Initialize("Edit Project Properties")
        // Set a behavior to indicate what the menu item does when activated.
        //projectProperties:SetBehavior(undefined)
        editItems:Add(projectProperties)

        editMenu:Initialize("Edit", editItems)
    end

    private action SetupViewMenu
        Array<MenuItem> viewItems

        MenuItem errorLog
        errorLog:Initialize("Quorum Studio Error Log")
        // Set a behavior to indicate what the menu item does when activated.
        //errorLog:SetBehavior(undefined)
        viewItems:Add(errorLog)

        MenuItem lineNumbers
        lineNumbers:Initialize("Show Line Numbers")
        // Set a behavior to indicate what the menu item does when activated.
        //lineNumbers:SetBehavior(undefined)
        viewItems:Add(lineNumbers)

        MenuItem blocksMode
        blocksMode:Initialize("Enable Blocks Mode")
        // Set a behavior to indicate what the menu item does when activated.
        //blocksMode:SetBehavior(undefined)
        viewItems:Add(blocksMode)

        MenuItem splitMode
        splitMode:Initialize("Enable Split Mode")
        // Set a behavior to indicate what the menu item does when activated.
        //splitMode:SetBehavior(undefined)
        viewItems:Add(splitMode)

        viewMenu:Initialize("View", viewItems)
    end

    private action SetupRunMenu
        Array<MenuItem> runItems

        MenuItem build
        build:Initialize("Build")
        // Set a behavior to indicate what the menu item does when activated.
        //build:SetBehavior(undefined)
        runItems:Add(build)

        MenuItem cleanAndBuild
        cleanAndBuild:Initialize("Clean and Build")
        // Set a behavior to indicate what the menu item does when activated.
        //cleanAndBuild:SetBehavior(undefined)
        runItems:Add(cleanAndBuild)

        MenuItem run
        run:Initialize("Run")
        // Set a behavior to indicate what the menu item does when activated.
        //run:SetBehavior(undefined)
        runItems:Add(run)

        MenuItem debug
        debug:Initialize("Debug")
        // Set a behavior to indicate what the menu item does when activated.
        //debug:SetBehavior(undefined)
        runItems:Add(debug)

        MenuItem stopDebug
        stopDebug:Initialize("Stop Debugging")
        // Set a behavior to indicate what the menu item does when activated.
        //stopDebug:SetBehavior(undefined)
        runItems:Add(stopDebug)

        MenuItem stepOver
        stepOver:Initialize("Step Over")
        // Set a behavior to indicate what the menu item does when activated.
        //stepOver:SetBehavior(undefined)
        runItems:Add(stepOver)

        MenuItem stepInto
        stepInto:Initialize("Step Into")
        // Set a behavior to indicate what the menu item does when activated.
        //stepInto:SetBehavior(undefined)
        runItems:Add(stepInto)

        MenuItem stepOut
        stepOut:Initialize("Step Out")
        // Set a behavior to indicate what the menu item does when activated.
        //stepOut:SetBehavior(undefined)
        runItems:Add(stepOut)

        MenuItem runToCursor
        runToCursor:Initialize("Run to Cursor")
        // Set a behavior to indicate what the menu item does when activated.
        //runToCursor:SetBehavior(undefined)
        runItems:Add(runToCursor)

        runMenu:Initialize("Run", runItems)
    end

    private action SetupWindowsMenu
        Array<MenuItem> windowsItems

        MenuItem projects
        projects:Initialize("Projects")
        // Set a behavior to indicate what the menu item does when activated.
        //projects:SetBehavior(undefined)
        windowsItems:Add(projects)

        MenuItem editor
        editor:Initialize("Editor")
        // Set a behavior to indicate what the menu item does when activated.
        //editor:SetBehavior(undefined)
        windowsItems:Add(editor)

        MenuItem errors
        errors:Initialize("Errors")
        // Set a behavior to indicate what the menu item does when activated.
        //projects:SetBehavior(undefined)
        windowsItems:Add(errors)

        MenuItem console
        console:Initialize("Console")
        // Set a behavior to indicate what the menu item does when activated.
        //console:SetBehavior(undefined)
        windowsItems:Add(console)

        MenuItem variables
        variables:Initialize("Variables")
        // Set a behavior to indicate what the menu item does when activated.
        //variables:SetBehavior(undefined)
        windowsItems:Add(variables)

        MenuItem breakpoints
        breakpoints:Initialize("Breakpoints")
        // Set a behavior to indicate what the menu item does when activated.
        //breakpoints:SetBehavior(undefined)
        windowsItems:Add(breakpoints)

        MenuItem options
        options:Initialize("Options")
        // Set a behavior to indicate what the menu item does when activated.
        //options:SetBehavior(undefined)
        windowsItems:Add(options)

        windowsMenu:Initialize("Windows", windowsItems)
    end

    private action SetupHelpMenu
        Array<MenuItem> helpItems

        MenuItem about
        about:Initialize("About")
        // Set a behavior to indicate what the menu item does when activated.
        //about:SetBehavior(undefined)
        helpItems:Add(about)

        MenuItem findHelp
        findHelp:Initialize("Find Help Online")
        // Set a behavior to indicate what the menu item does when activated.
        //findHelp:SetBehavior(undefined)
        helpItems:Add(findHelp)

        MenuItem checkForUpdates
        checkForUpdates:Initialize("Check for Updates")
        // Set a behavior to indicate what the menu item does when activated.
        //checkForUpdates:SetBehavior(undefined)
        helpItems:Add(checkForUpdates)

        helpMenu:Initialize("Help", helpItems)
    end

    private action CreateMainContentPane
        Layout layout
        layout:SetPercentageX(0)
        layout:SetPercentageY(0)
        layout:SetPercentageHeight(1)
        layout:SetHeightOffset(-menuBar:GetHeight() - toolbar:GetHeight())
        layout:SetPercentageWidth(1)

        mainContentPane:AddLayout(layout)

        CreateProjectsWindow()
        CreateCodeEditor()
        CreateOutputWindow()

        mainContentPane:Add(projectPane)
        mainContentPane:Add(codeTabs)
        mainContentPane:Add(outputWindow)
    end

    action CreateProjectsWindow()

        Layout treeLayout
        treeLayout:SetPercentageOriginY(1)
        treeLayout:SetPercentageY(1)

        projectTree:AddLayout(treeLayout)
        
//        Array<TreeItem> subTree
//
//        TreeItem test1a
//        test1a:Initialize("Item 1A", testTexture)
//        subTree:Add(test1a)
//        TreeItem test2a
//        test2a:Initialize("Item 2A", testTexture)
//        subTree:Add(test2a)
//        TreeItem test3a
//        test3a:Initialize("Item 3A", testTexture)
//        subTree:Add(test3a)
//
//        TreeItem test1
//        test1:Initialize("TEST 1", testTexture, subTree)
//
//        subTree:Empty()
//
//        TreeItem test1b
//        test1b:Initialize("Item 1B", testTexture)
//        subTree:Add(test1b)
//        TreeItem test2b
//        test2b:Initialize("Item 2B", testTexture)
//        subTree:Add(test2b)
//        TreeItem test3b
//        test3b:Initialize("Item 3B", testTexture)
//        subTree:Add(test3b)
//
//        TreeItem test2
//        test2:Initialize("TEST 2", testTexture, subTree)
//
//        projectTree:AddTreeItem(test1)
//        projectTree:AddTreeItem(test2)

        Layout scrollLayout
        scrollLayout:SetPercentageX(0)
        scrollLayout:SetPercentageY(0)
        scrollLayout:SetPercentageOriginY(0)
        scrollLayout:SetPercentageHeight(1)
        scrollLayout:SetWidthOffset(200)

        projectPane:Initialize(1, 1, color:White())
        projectPane:SetRegionSize(200, 1000)
        projectPane:AddLayout(scrollLayout)
        projectPane:Add(projectTree)
    end

    //Crashes on Windows
//    private action AddFileToTree(File fileToAdd, TreeItem targetTree)
//         TreeItem file
//         file:SetText(fileToAdd:GetFileName())
//         targetTree:AddChildItem(file)
//
//        if(fileToAdd:IsDirectory())
//            Array<File> folder = fileToAdd:GetDirectoryListing()
//            RemoveHiddenFiles(folder)
//            integer i = 0
//            repeat while i < folder:GetSize()
//                    //Does not work on Windows, Fails to load native font
//                AddFileToTree(folder:Get(i), file)
//                i = i + 1
//            end
//        end
//    end

    private action RemoveHiddenFiles(Array<File> directory)
        integer i = 0
        repeat while i < directory:GetSize()
            if(directory:Get(i):IsHidden())
                directory:Remove(directory:Get(i))
            end
            i = i + 1
        end
    end

    action CreateCodeEditor()
        
        FillLayout fill
        fill:SetFillSide(fill:RIGHT)
        fill:SetPercentageY(1)
        fill:SetPercentageOriginY(1)
        fill:SetPercentageHeight(0.7)

        codeTabs:SetName("Code Tabs")
        Array<Tab> array
        TextBox testTextBox
        testTextBox:Initialize(100, 100, color:CustomColor(0.95, 0.95, 1, 1))
        Layout testTextBoxLayout
        testTextBoxLayout:SetPercentageX(0)
        testTextBoxLayout:SetPercentageY(0)
        testTextBoxLayout:SetPercentageWidth(1)
        testTextBoxLayout:SetPercentageHeight(1)
        testTextBox:AddLayout(testTextBoxLayout)

//        codeTabs:LoadFilledRectangle(1, 1, color:Teal())

//        Tab testTab
//        testTab:Initialize("TEST", testTextBox, true)
//        array:Add(testTab)
//        codeTabs:Initialize(200, 200, array)
        
        codeTabs:Initialize(200, 200, array)
        codeTabs:AddLayout(fill)
//        codeTabs:Resize()

        File file
        file:SetWorkingDirectory("Templates/New/Game/SourceCode")
        file:SetPath("Main.quorum")
        OpenNewTab(file)

//        TextBox textBox
//        codeEditor = textBox
//        
//        codeEditor:Initialize(GetScreenWidth() - projectTree:GetWidth(), cast(integer, GetScreenHeight() * 0.7), background:White(), "")
//        codeEditor:SetPosition(projectTree:GetWidth(), GetScreenHeight() - menuBar:GetHeight() - codeEditor:GetHeight())
//        Add(codeEditor)
    end

    action OpenNewTab(File file)
        text contents = ""

        check
            contents = file:Read()
        detect error is FileNotFoundError
            // File wasn't found, handle the error gracefully.
            // Output is for testing purposes only.
            output "Couldn't find file: " + file:GetAbsolutePath()
            return now
        detect error is InputOutputError
            // File couldn't be read for some reason.
            // Output is for testing purposes only.
            output "Couldn't read file: " + file:GetAbsolutePath()
            return now
        end

        Layout textBoxLayout
        textBoxLayout:SetPercentageX(0)
        textBoxLayout:SetPercentageY(0)
        textBoxLayout:SetPercentageWidth(1)
        textBoxLayout:SetPercentageHeight(1)

        TextBox textBox
        textBox:Initialize(400, 400, color:CustomColor(0.95, 0.95, 1, 1), contents)
        textBox:AddLayout(textBoxLayout)    

        // For testing purposes, just put in a placeholder icon.
        // Long-term, this should instead check the file extension and load an
        // appropriate image (e.g., Quorum icon for a .quorum file).
        Texture icon
        icon:LoadFilledRectangle(1, 1, color:Cyan())

        Tab newTab
        newTab:Initialize(file:GetPath(), textBox, icon, true)

        codeTabs:Add(newTab)
        
        codeTabs:Resize()
    end

    action CreateOutputWindow()
        FillLayout fill
        fill:SetFillSide(fill:RIGHT)
        fill:SetPercentageY(0)
        fill:SetPercentageHeight(0.3)

        outputWindow:Initialize(20, 20, color:White())
        outputWindow:AddLayout(fill)

//        TextBox textBox
//        outputWindow = textBox
//
//        outputWindow:Initialize(codeEditor:GetWidth(), GetScreenHeight() - menuBar:GetHeight() - codeEditor:GetHeight(), background:LightGray(), "This is the output area.")
//        outputWindow:SetPosition(codeEditor:GetX(), 0)
//        Add(outputWindow)
    end

    action CreateNavigationWindow()
//        Tree tree
//        navigator = tree
//        navigator:SetColor(background:Green())
//        navigator:SetDock("left")
//        navigator:SetDock("bottom")
//        navigator:DockToWindow(true)
//        navigator:SetWidthByPercent(projectTree:GetWidthPercentage() * 100)
//        navigator:SetHeightByPercent(100 - cast(integer, (projectTree:GetHeightPercentage() + menuBar:GetHeight() / GetScreenHeight()) * 100))
//        navigator:SetBorder(1)
//        Add(navigator)
//        AddClassMembers()
    end

    private action AddClassMembers()
//        TreeItem memberFunction
//        memberFunction:SetText("CreateGame()")
//        navigator:AddRootItem(memberFunction)
//        
//        TreeItem memberVariable
//        memberVariable:SetText("projectTree")
//        navigator:AddRootItem(memberVariable)
//        
//        navigator:UpdateTree()
    end

    action LoadUpdates
        File defaultUpdateFile
        defaultUpdateFile:SetPath("Configuration/Updates.json")
        updater:Load(defaultUpdateFile)

        Downloader download
        download:SetPath("https://quorumlanguage.com/studio/live/Configuration/Updates.json")
        boolean value = download:Exists()

        File downloadHere
        downloadHere:SetPath("Updates/Configuration/Updates.json")
        File mom = downloadHere:GetParentDirectory()
        if not mom:Exists()
            mom:CreateDirectories()
        end

        download:SetFile(downloadHere)
        download:Download()
        
        Updater newUpdate
        newUpdate:Load(downloadHere)
        updater:CheckForNewerVersion(newUpdate)
        if updater:HasUpdates()
            updater:DownloadModules()
        end
    end

    action CheckForUpdates
        //first ping the server and see if the files are there.
        
        //get the file --- for now let's get one from testing
        File new
        new:SetPath("Tests/UpdatesTests/UpdateNewVersion.json")

        Updater up
        up:Load(new)

        updater:CheckForNewerVersion(up)
    end
end
