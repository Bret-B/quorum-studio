package Libraries.Development.Environment.Studio

use Libraries.Interface.Controls.MenuBar
use Libraries.Interface.Controls.MenuItem
use Libraries.Game.Graphics.Color
use Libraries.Development.Environment.Studio.Actions.ExitAction
use Libraries.Game.Game
use Libraries.Development.Environment.Projects.ProjectManager
use Libraries.Development.Environment.Studio.Updates.Updater
use Libraries.System.File
use Libraries.Interface.TextBox
use Libraries.Containers.Array
use Libraries.Game.Graphics.Gradient
use Libraries.Interface.Item2D
use Libraries.Interface.LabelBoxContent
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.ImageInterfaceContent
use Libraries.Interface.Button
use Libraries.Game.Layer2D
use Libraries.Interface.Toolbar
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Game.Behaviors.Behavior
use Libraries.Development.Environment.Projects.Project
use Libraries.Development.Environment.Studio.Behaviors.Build
use Libraries.Development.Environment.Studio.Behaviors.OpenProject
use Libraries.Interface.Controls.FileChooser
use Libraries.Development.Environment.Studio.Behaviors.OpenProjectBehavior

class QuorumStudio is Game
    MenuBar menuBar
    MenuItem fileMenu
    MenuItem editMenu
    MenuItem viewMenu
    MenuItem runMenu
    MenuItem windowsMenu
    MenuItem helpMenu
//    Tree projectTree = undefined
//    Tree navigator = undefined
//    TextBox codeEditor = undefined
//    TextBox outputWindow = undefined

    Color color
    Gradient gradient

    Color background
    ProjectManager manager
    Updater updater
    Toolbar toolbar
    text TOOLBAR_RESOURCES = "resources/graphics/toolbar/"
    number tempXOffset = 0
//    Panel projectPanel = undefined
    Project selectedProject = undefined

    //behaviors
    OpenProjectBehavior openProjectBehavior



    action Start
        StartGame()
    end

    action GetProjectManager returns ProjectManager
        return manager
    end

    action CreateGame
        gradient:Set(color:LightGray(), color:LightGray(), color:White(), color:White())
        Layer2D layer = me:GetCurrentLayer2D()
        layer:SetAutomaticResizing(true)

        Behavior behave
        CreateToolbar()
        openProjectBehavior:SetMainApplication(me)
        
        //toolbar:Resize()
//        CreatePanels()
//        CreateProjectsWindow()
//        CreateCodeEditor()
//        CreateNavigationWindow()
//        CreateOutputWindow()

        CreateMenuBar()
    end

    action CreateToolbar
        
        LabelBoxContent content
        content:Initialize(gradient, color:Black(), "")
        content:SetBorderThickness(0)
        
        toolbar:SetVisualContent(content)
//        Add(toolbar)
        menuBar:Add(toolbar)

        FlowLayout toolbarLayout
        toolbarLayout:SetWrapping(true)
        // Width is the full width of the screen.
        toolbarLayout:SetPercentageWidth(1)
        // Height is fixed to 100 pixels.
        toolbarLayout:SetPercentageHeight(0)
        toolbarLayout:SetHeightOffset(24)
        toolbarLayout:SetFrontPadding(true)
        toolbarLayout:SetPadding(6)

        // Toolbar is placed at top of screen, minus 100 pixels.
        toolbarLayout:SetPercentageY(1)
        toolbarLayout:SetPercentageOriginY(1)
        toolbarLayout:SetOffsetY(-30)

        toolbar:AddLayout(toolbarLayout)

        // Force the toolbar to resize to the new layout.
        toolbar:Resize()

        // Load some testing textures into buttons.
        integer counter = 0

        // Boundary of the last button.
        number endValue = 0
        Build build
        build:SetQuorumStudio(me)

        OpenProject open
        open:SetQuorumStudio(me)

        AddButtonToToolbar(TOOLBAR_RESOURCES + "NewProject.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "NewFile.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "OpenProject.png", open)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "SaveAll.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Undo.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Redo.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Build.png", build)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "CleanAndBuild.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Run.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Debug.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Stop.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Pause.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Continue.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "StepOver.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "StepInto.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "StepOut.png", undefined)
        toolbar:Resize()

        Add(menuBar)
    end

    private action AddButtonToToolbar(text image, Behavior behavior)

        ImageInterfaceContent buttonContent
        buttonContent:Load(image)
        
        Button button
        
        button:SetVisualContent(buttonContent)

        button:SetWidth(24)
        button:SetHeight(24)

        if behavior not= undefined
            button:SetBehavior(behavior)
        end
        toolbar:Add(button)
    end
    
    action GetSelectedProject returns Project
        return selectedProject
    end

    action GetMenuBar returns MenuBar
        return menuBar
    end

    action OpenProject
        FileChooser chooser
        File file
        File value = chooser:OpenFileDialog(file)
//        Add(chooser)
    end

    action CreatePanels
        
//        projectPanel:Initialize(200, 500)
//        projectPanel:SetBackgroundColor(background:LightGray())
//        projectPanel:SetPosition(0, 0)
//        Add(projectPanel)
//        Tree tree1
//        panel:Add(tree1)
//        tree1:Initialize(180, 480)
//        tree1:SetPosition(10, 10)
//        tree1:SetBackgroundColor(bgColor:White())
//        TreeItem item1
//        TreeItem item2
//        TreeItem item3
//        TreeItem item4
//        TreeItem item5
//        item1:Initialize(40, 10, "item1")
//        item2:Initialize(40, 10, "item2")
//        item3:Initialize(40, 10, "item3")
//        item4:Initialize(40, 10, "item4")
//        item5:Initialize(40, 10, "item5")
//        item1:SetText("Item 1")
//        item2:SetText("Item 2")
//        item3:SetText("Item 3")
//        item4:SetText("item 4")
//        item5:SetText("item 5")
//        tree1:AddRootItem(item1)
//        item1:AddChildItem(item2)
//        item2:AddChildItem(item3)
//        item4:AddChildItem(item5)
//        tree1:AddRootItem(item4)
////        tree1:AddRootItem(item5)
//        tree1:UpdateTree()
    end

    action CreateMenuBar
//        MenuBar bar
//        menuBar = bar
//        menuBar:SetColor(background:White())
//        menuBar:SetDock("top")
//        menuBar:SetDock("left")
//        menuBar:DockToWindow(true)
//        menuBar:SetWidthByPercent(100)
//        menuBar:SetHeightByPercent(menuBar:GetHeight() / GetScreenHeight() * 100)
//        menuBar:SetMaxHeight(cast(integer, menuBar:GetHeight()))
//        menuBar:LockMaxHeight(true)
//
        SetupFileMenu()
        SetupEditMenu()
        SetupViewMenu()
        SetupRunMenu()
        SetupWindowsMenu()
        SetupHelpMenu()

        Array<MenuItem> menuItems
        menuItems:Add(fileMenu)
        menuItems:Add(editMenu)
        menuItems:Add(viewMenu)
        menuItems:Add(runMenu)
        menuItems:Add(windowsMenu)
        menuItems:Add(helpMenu)
        menuBar:Initialize(menuItems)
    end

    //Adding the mouse listeners will give unintended results for now
    private action SetupFileMenu
        Array<MenuItem> fileItems

        MenuItem newProject
        newProject:Initialize("New Project")
        // Set a behavior to indicate what the menu item does when activated.
        //newProject:SetBehavior(undefined)
        fileItems:Add(newProject)
        
        MenuItem openProject
        openProject:Initialize("Open Project")
        // Set a behavior to indicate what the menu item does when activated.
        
        openProject:SetBehavior(openProjectBehavior)
        fileItems:Add(openProject)

        MenuItem closeProject
        closeProject:Initialize("Close Project")
        // Set a behavior to indicate what the menu item does when activated.
        //closeProject:SetBehavior(undefined)
        fileItems:Add(closeProject)

        MenuItem newFile
        newFile:Initialize("New File")
        // Set a behavior to indicate what the menu item does when activated.
        //newFile:SetBehavior(undefined)
        fileItems:Add(newFile)

        MenuItem openFile
        openFile:Initialize("Open File")
        // Set a behavior to indicate what the menu item does when activated.
        //openFile:SetBehavior(undefined)
        fileItems:Add(openFile)

        MenuItem save
        save:Initialize("Save")
        // Set a behavior to indicate what the menu item does when activated.
        //save:SetBehavior(undefined)
        fileItems:Add(save)

        MenuItem saveAs
        saveAs:Initialize("Save As...")
        // Set a behavior to indicate what the menu item does when activated.
        //saveAs:SetBehavior(undefined)
        fileItems:Add(saveAs)

        MenuItem saveAll
        saveAll:Initialize("Save All")
        // Set a behavior to indicate what the menu item does when activated.
        //saveAll:SetBehavior(undefined)
        fileItems:Add(saveAll)

        MenuItem exit
        exit:Initialize("Exit")
        // Set a behavior to indicate what the menu item does when activated.
        //exit:SetBehavior(undefined)
        fileItems:Add(exit)

        fileMenu:Initialize("File", fileItems)
    end

    private action SetupEditMenu
        Array<MenuItem> editItems

        MenuItem undo
        undo:Initialize("Undo")
        // Set a behavior to indicate what the menu item does when activated.
        //undo:SetBehavior(undefined)
        editItems:Add(undo)

        MenuItem redo
        redo:Initialize("Redo")
        // Set a behavior to indicate what the menu item does when activated.
        //redo:SetBehavior(undefined)
        editItems:Add(redo)

        MenuItem cut
        cut:Initialize("Cut")
        // Set a behavior to indicate what the menu item does when activated.
        //cut:SetBehavior(undefined)
        editItems:Add(cut)

        MenuItem copy
        copy:Initialize("Copy")
        // Set a behavior to indicate what the menu item does when activated.
        //copy:SetBehavior(undefined)
        editItems:Add(copy)

        MenuItem paste
        paste:Initialize("Paste")
        // Set a behavior to indicate what the menu item does when activated.
        //paste:SetBehavior(undefined)
        editItems:Add(paste)

        MenuItem delete
        delete:Initialize("Delete")
        // Set a behavior to indicate what the menu item does when activated.
        //delete:SetBehavior(undefined)
        editItems:Add(delete)

        MenuItem selectAll
        selectAll:Initialize("Select All")
        // Set a behavior to indicate what the menu item does when activated.
        //selectAll:SetBehavior(undefined)
        editItems:Add(selectAll)

        MenuItem goToLine
        goToLine:Initialize("Go to Line")
        // Set a behavior to indicate what the menu item does when activated.
        //goToLine:SetBehavior(undefined)
        editItems:Add(goToLine)

        MenuItem findSelection
        findSelection:Initialize("Find Selection")
        // Set a behavior to indicate what the menu item does when activated.
        //findSelection:SetBehavior(undefined)
        editItems:Add(findSelection)

        MenuItem findNext
        findNext:Initialize("Find Next")
        // Set a behavior to indicate what the menu item does when activated.
        //findNext:SetBehavior(undefined)
        editItems:Add(findNext)

        MenuItem findPrevious
        findPrevious:Initialize("Find Previous")
        // Set a behavior to indicate what the menu item does when activated.
        //findPrevious:SetBehavior(undefined)
        editItems:Add(findPrevious)

        MenuItem find
        find:Initialize("Find")
        // Set a behavior to indicate what the menu item does when activated.
        //find:SetBehavior(undefined)
        editItems:Add(find)

        MenuItem replace
        replace:Initialize("Replace")
        // Set a behavior to indicate what the menu item does when activated.
        //replace:SetBehavior(undefined)
        editItems:Add(replace)

        MenuItem projectProperties
        projectProperties:Initialize("Edit Project Properties")
        // Set a behavior to indicate what the menu item does when activated.
        //projectProperties:SetBehavior(undefined)
        editItems:Add(projectProperties)

        editMenu:Initialize("Edit", editItems)
    end

    private action SetupViewMenu
        Array<MenuItem> viewItems

        MenuItem errorLog
        errorLog:Initialize("Quorum Studio Error Log")
        // Set a behavior to indicate what the menu item does when activated.
        //errorLog:SetBehavior(undefined)
        viewItems:Add(errorLog)

        MenuItem lineNumbers
        lineNumbers:Initialize("Show Line Numbers")
        // Set a behavior to indicate what the menu item does when activated.
        //lineNumbers:SetBehavior(undefined)
        viewItems:Add(lineNumbers)

        MenuItem blocksMode
        blocksMode:Initialize("Enable Blocks Mode")
        // Set a behavior to indicate what the menu item does when activated.
        //blocksMode:SetBehavior(undefined)
        viewItems:Add(blocksMode)

        MenuItem splitMode
        splitMode:Initialize("Enable Split Mode")
        // Set a behavior to indicate what the menu item does when activated.
        //splitMode:SetBehavior(undefined)
        viewItems:Add(splitMode)

        viewMenu:Initialize("View", viewItems)
    end

    private action SetupRunMenu
        Array<MenuItem> runItems

        MenuItem build
        build:Initialize("Build")
        // Set a behavior to indicate what the menu item does when activated.
        //build:SetBehavior(undefined)
        runItems:Add(build)

        MenuItem cleanAndBuild
        cleanAndBuild:Initialize("Clean and Build")
        // Set a behavior to indicate what the menu item does when activated.
        //cleanAndBuild:SetBehavior(undefined)
        runItems:Add(cleanAndBuild)

        MenuItem run
        run:Initialize("Run")
        // Set a behavior to indicate what the menu item does when activated.
        //run:SetBehavior(undefined)
        runItems:Add(run)

        MenuItem debug
        debug:Initialize("Debug")
        // Set a behavior to indicate what the menu item does when activated.
        //debug:SetBehavior(undefined)
        runItems:Add(debug)

        MenuItem stopDebug
        stopDebug:Initialize("Stop Debugging")
        // Set a behavior to indicate what the menu item does when activated.
        //stopDebug:SetBehavior(undefined)
        runItems:Add(stopDebug)

        MenuItem stepOver
        stepOver:Initialize("Step Over")
        // Set a behavior to indicate what the menu item does when activated.
        //stepOver:SetBehavior(undefined)
        runItems:Add(stepOver)

        MenuItem stepInto
        stepInto:Initialize("Step Into")
        // Set a behavior to indicate what the menu item does when activated.
        //stepInto:SetBehavior(undefined)
        runItems:Add(stepInto)

        MenuItem stepOut
        stepOut:Initialize("Step Out")
        // Set a behavior to indicate what the menu item does when activated.
        //stepOut:SetBehavior(undefined)
        runItems:Add(stepOut)

        MenuItem runToCursor
        runToCursor:Initialize("Run to Cursor")
        // Set a behavior to indicate what the menu item does when activated.
        //runToCursor:SetBehavior(undefined)
        runItems:Add(runToCursor)

        runMenu:Initialize("Run", runItems)
    end

    private action SetupWindowsMenu
        Array<MenuItem> windowsItems

        MenuItem projects
        projects:Initialize("Projects")
        // Set a behavior to indicate what the menu item does when activated.
        //projects:SetBehavior(undefined)
        windowsItems:Add(projects)

        MenuItem editor
        editor:Initialize("Editor")
        // Set a behavior to indicate what the menu item does when activated.
        //editor:SetBehavior(undefined)
        windowsItems:Add(editor)

        MenuItem errors
        errors:Initialize("Errors")
        // Set a behavior to indicate what the menu item does when activated.
        //projects:SetBehavior(undefined)
        windowsItems:Add(errors)

        MenuItem console
        console:Initialize("Console")
        // Set a behavior to indicate what the menu item does when activated.
        //console:SetBehavior(undefined)
        windowsItems:Add(console)

        MenuItem variables
        variables:Initialize("Variables")
        // Set a behavior to indicate what the menu item does when activated.
        //variables:SetBehavior(undefined)
        windowsItems:Add(variables)

        MenuItem breakpoints
        breakpoints:Initialize("Breakpoints")
        // Set a behavior to indicate what the menu item does when activated.
        //breakpoints:SetBehavior(undefined)
        windowsItems:Add(breakpoints)

        MenuItem options
        options:Initialize("Options")
        // Set a behavior to indicate what the menu item does when activated.
        //options:SetBehavior(undefined)
        windowsItems:Add(options)

        windowsMenu:Initialize("Windows", windowsItems)
    end

    private action SetupHelpMenu
        Array<MenuItem> helpItems

        MenuItem about
        about:Initialize("About")
        // Set a behavior to indicate what the menu item does when activated.
        //about:SetBehavior(undefined)
        helpItems:Add(about)

        MenuItem findHelp
        findHelp:Initialize("Find Help Online")
        // Set a behavior to indicate what the menu item does when activated.
        //findHelp:SetBehavior(undefined)
        helpItems:Add(findHelp)

        MenuItem checkForUpdates
        checkForUpdates:Initialize("Check for Updates")
        // Set a behavior to indicate what the menu item does when activated.
        //checkForUpdates:SetBehavior(undefined)
        helpItems:Add(checkForUpdates)

        helpMenu:Initialize("Help", helpItems)
    end

    action CreateProjectsWindow()
//        Tree tree
//        projectTree = tree
//        projectTree:SetColor(background:Teal())
//        projectTree:SetDock("left")
//        projectTree:DockToWindow(true)
//        projectTree:SetWidthByPercent(25) 
//        projectTree:SetHeightByPercent(60)
//        projectTree:SetY(GetScreenHeight() - menuBar:GetHeight() - projectTree:GetHeight())
//        projectTree:SetBorder(1)
//        Add(projectTree)
//
//        File directory
//        Array<File> directoryFiles = directory:GetDirectoryListing()
//        RemoveHiddenFiles(directoryFiles)
//        
//        i = 0
//        repeat while i < directoryFiles:GetSize()
//           File currentFile = directoryFiles:Get(i)
//           TreeItem toProjectTree
//           toProjectTree:SetText(currentFile:GetFileName())
//           projectTree:AddRootItem(toProjectTree)
//           if(currentFile:IsDirectory())
//                integer j = 0
//                Array<File> childFiles = currentFile:GetDirectoryListing()
//                RemoveHiddenFiles(childFiles)
//                repeat while j < childFiles:GetSize()
//                    AddFileToTree(childFiles:Get(j), toProjectTree)
//                    j = j + 1
//                end
//           end
//           i = i + 1
//        end
//
//        projectTree:UpdateTree()
    end

    //Crashes on Windows
//    private action AddFileToTree(File fileToAdd, TreeItem targetTree)
//         TreeItem file
//         file:SetText(fileToAdd:GetFileName())
//         targetTree:AddChildItem(file)
//
//        if(fileToAdd:IsDirectory())
//            Array<File> folder = fileToAdd:GetDirectoryListing()
//            RemoveHiddenFiles(folder)
//            integer i = 0
//            repeat while i < folder:GetSize()
//                    //Does not work on Windows, Fails to load native font
//                AddFileToTree(folder:Get(i), file)
//                i = i + 1
//            end
//        end
//    end

    private action RemoveHiddenFiles(Array<File> directory)
        integer i = 0
        repeat while i < directory:GetSize()
            if(directory:Get(i):IsHidden())
                directory:Remove(directory:Get(i))
            end
            i = i + 1
        end
    end

    action CreateCodeEditor()
//        TextBox textBox
//        codeEditor = textBox
//        
//        codeEditor:Initialize(GetScreenWidth() - projectTree:GetWidth(), cast(integer, GetScreenHeight() * 0.7), background:White(), "")
//        codeEditor:SetPosition(projectTree:GetWidth(), GetScreenHeight() - menuBar:GetHeight() - codeEditor:GetHeight())
//        Add(codeEditor)
    end

    action CreateNavigationWindow()
//        Tree tree
//        navigator = tree
//        navigator:SetColor(background:Green())
//        navigator:SetDock("left")
//        navigator:SetDock("bottom")
//        navigator:DockToWindow(true)
//        navigator:SetWidthByPercent(projectTree:GetWidthPercentage() * 100)
//        navigator:SetHeightByPercent(100 - cast(integer, (projectTree:GetHeightPercentage() + menuBar:GetHeight() / GetScreenHeight()) * 100))
//        navigator:SetBorder(1)
//        Add(navigator)
//        AddClassMembers()
    end

    private action AddClassMembers()
//        TreeItem memberFunction
//        memberFunction:SetText("CreateGame()")
//        navigator:AddRootItem(memberFunction)
//        
//        TreeItem memberVariable
//        memberVariable:SetText("projectTree")
//        navigator:AddRootItem(memberVariable)
//        
//        navigator:UpdateTree()
    end

    action CreateOutputWindow()
//        TextBox textBox
//        outputWindow = textBox
//
//        outputWindow:Initialize(codeEditor:GetWidth(), GetScreenHeight() - menuBar:GetHeight() - codeEditor:GetHeight(), background:LightGray(), "This is the output area.")
//        outputWindow:SetPosition(codeEditor:GetX(), 0)
//        Add(outputWindow)
    end

    action LoadUpdates
        File defaultUpdateFile
        defaultUpdateFile:SetPath("Configuration/Updates.json")
        updater:Load(defaultUpdateFile)

        Downloader download
        download:SetPath("https://quorumlanguage.com/studio/live/Configuration/Updates.json")
        boolean value = download:Exists()

        File downloadHere
        downloadHere:SetPath("Updates/Configuration/Updates.json")
        File mom = downloadHere:GetParentDirectory()
        if not mom:Exists()
            mom:CreateDirectories()
        end

        download:SetFile(downloadHere)
        download:Download()
        
        Updater newUpdate
        newUpdate:Load(downloadHere)
        updater:CheckForNewerVersion(newUpdate)
        if updater:HasUpdates()
            updater:DownloadModules()
        end
    end

    action CheckForUpdates
        //first ping the server and see if the files are there.
        
        //get the file --- for now let's get one from testing
        File new
        new:SetPath("Tests/UpdatesTests/UpdateNewVersion.json")

        Updater up
        up:Load(new)

        updater:CheckForNewerVersion(up)
    end
end