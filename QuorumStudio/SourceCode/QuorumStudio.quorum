package Libraries.Development.Environment.Studio
use Libraries.Game.Game
use Libraries.Interface.Controls.ScrollPane
use Libraries.Development.Environment.Projects.ProjectTree
use Libraries.Interface.Controls.TabPane
use Libraries.Interface.Controls.TextBox
use Libraries.Interface.Item2D
use Libraries.Game.Graphics.Color
use Libraries.Development.Environment.Projects.ProjectManager
use Libraries.Development.Environment.Studio.Updates.Updater
use Libraries.Development.Environment.Configuration.Options
use Libraries.Development.Environmen.Resources
use Libraries.Development.Environment.Studio.Behaviors.Behaviors
use Libraries.Game.Layer2D
use Libraries.Containers.Array
use Libraries.System.File
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.Layouts.FillLayout
use Libraries.Interface.Controls.Tab
use Libraries.Game.Graphics.Texture
use Libraries.Language.Errors.FileNotFoundError
use Libraries.Language.Errors.InputOutputError

class QuorumStudio is Game
    ScrollPane projectPane
    ProjectTree projectTree
    TabPane codeTabs
    TextBox outputWindow
    Item2D mainContentPane
    Color color
    
    Color background
    ProjectManager manager
    Updater updater
    Toolbar toolbar
    Menu menu
    number tempXOffset = 0

    Options options
    Resources resources
    Behaviors behaviors

    action Start
        StartGame()
    end

    action GetProjectManager returns ProjectManager
        return manager
    end

    action GetProjectTree returns ProjectTree
        return projectTree
    end

    action CreateGame
        SetupResources()
        Layer2D layer = me:GetCurrentLayer2D()
        layer:SetAutomaticResizing(true)
        Load()
        SetupInterface()
        mainContentPane:Resize()
    end

    action SetupInterface
        menu:Setup()
        toolbar:SetDisplayOffset(-menu:GetHeight())
        toolbar:Setup()

        //CreateToolbar()
        CreateMainContentPane()
        Add(mainContentPane)
        Add(toolbar)
        Add(menu)
    end

    action SetupResources
        manager:Add(projectTree)
        manager:Add(options)

        resources:Load()
        projectTree:SetResources(resources)
        toolbar:SetResources(resources)
        menu:SetResources(resources)

        projectTree:SetProjectManager(manager)
        AddSelectionListener(projectTree)
        
        toolbar:SetBehaviors(behaviors)
        menu:SetBehaviors(behaviors)

        behaviors:SetMainApplication(me)
    end

    action Load
        //load the user's settings
        options:Read()
        options:Write()
        Array<text> projects = options:GetProjects()

        i = 0
        repeat while i < projects:GetSize()
            text value = projects:Get(i)
            File file
            file:SetAbsolutePath(value)
            manager:Open(file)
            i = i + 1
        end
    end

    action Save

    end

    action GetMenu returns Menu
        return menu
    end

    private action CreateMainContentPane
        Layout layout
        layout:SetPercentageX(0)
        layout:SetPercentageY(0)
        layout:SetPercentageHeight(1)
        layout:SetHeightOffset(-menu:GetHeight() - toolbar:GetHeight())
        layout:SetPercentageWidth(1)

        mainContentPane:AddLayout(layout)

        CreateProjectsWindow()
        CreateCodeEditor()
        CreateOutputWindow()

        mainContentPane:Add(projectPane)
        mainContentPane:Add(codeTabs)
        mainContentPane:Add(outputWindow)
    end

    action CreateProjectsWindow()
        Layout treeLayout
        treeLayout:SetPercentageOriginY(1)
        treeLayout:SetPercentageY(1)
        projectTree:AddLayout(treeLayout)

        Layout scrollLayout
        scrollLayout:SetPercentageX(0)
        scrollLayout:SetPercentageY(0)
        scrollLayout:SetPercentageOriginY(0)
        scrollLayout:SetPercentageHeight(1)
        scrollLayout:SetWidthOffset(200)

        projectPane:Initialize(1, 1, color:White())
        projectPane:SetRegionSize(200, 1000)
        projectPane:AddLayout(scrollLayout)
        projectPane:Add(projectTree)
    end

    private action RemoveHiddenFiles(Array<File> directory)
        integer i = 0
        repeat while i < directory:GetSize()
            if(directory:Get(i):IsHidden())
                directory:Remove(directory:Get(i))
            end
            i = i + 1
        end
    end

    action CreateCodeEditor()
        
        FillLayout fill
        fill:SetFillSide(fill:RIGHT)
        fill:SetPercentageY(1)
        fill:SetPercentageOriginY(1)
        fill:SetPercentageHeight(0.7)

        codeTabs:SetName("Code Tabs")
        Array<Tab> array
        TextBox testTextBox
        testTextBox:Initialize(100, 100, color:CustomColor(0.95, 0.95, 1, 1))
        Layout testTextBoxLayout
        testTextBoxLayout:SetPercentageX(0)
        testTextBoxLayout:SetPercentageY(0)
        testTextBoxLayout:SetPercentageWidth(1)
        testTextBoxLayout:SetPercentageHeight(1)
        testTextBox:AddLayout(testTextBoxLayout)

//        codeTabs:LoadFilledRectangle(1, 1, color:Teal())

//        Tab testTab
//        testTab:Initialize("TEST", testTextBox, true)
//        array:Add(testTab)
//        codeTabs:Initialize(200, 200, array)
        
        codeTabs:Initialize(200, 200, array)
        codeTabs:AddLayout(fill)
//        codeTabs:Resize()

        File file
        file:SetWorkingDirectory("Templates/New/Game/SourceCode")
        file:SetPath("Main.quorum")
        OpenNewTab(file)

//        TextBox textBox
//        codeEditor = textBox
//        
//        codeEditor:Initialize(GetScreenWidth() - projectTree:GetWidth(), cast(integer, GetScreenHeight() * 0.7), background:White(), "")
//        codeEditor:SetPosition(projectTree:GetWidth(), GetScreenHeight() - menuBar:GetHeight() - codeEditor:GetHeight())
//        Add(codeEditor)
    end

    action OpenNewTab(File file)
        text contents = ""

        check
            contents = file:Read()
        detect error is FileNotFoundError
            // File wasn't found, handle the error gracefully.
            // Output is for testing purposes only.
            output "Couldn't find file: " + file:GetAbsolutePath()
            return now
        detect error is InputOutputError
            // File couldn't be read for some reason.
            // Output is for testing purposes only.
            output "Couldn't read file: " + file:GetAbsolutePath()
            return now
        end

        Layout textBoxLayout
        textBoxLayout:SetPercentageX(0)
        textBoxLayout:SetPercentageY(0)
        textBoxLayout:SetPercentageWidth(1)
        textBoxLayout:SetPercentageHeight(1)

        TextBox textBox
        textBox:Initialize(400, 400, color:CustomColor(0.95, 0.95, 1, 1), contents)
        textBox:AddLayout(textBoxLayout)    

        // For testing purposes, just put in a placeholder icon.
        // Long-term, this should instead check the file extension and load an
        // appropriate image (e.g., Quorum icon for a .quorum file).
        Texture icon
        icon:LoadFilledRectangle(1, 1, color:Cyan())

        Tab newTab
        newTab:Initialize(file:GetPath(), textBox, icon, true)

        codeTabs:Add(newTab)
        
        codeTabs:Resize()
    end

    action CreateOutputWindow()
        FillLayout fill
        fill:SetFillSide(fill:RIGHT)
        fill:SetPercentageY(0)
        fill:SetPercentageHeight(0.3)

        outputWindow:Initialize(20, 20, color:White())
        outputWindow:AddLayout(fill)

//        TextBox textBox
//        outputWindow = textBox
//
//        outputWindow:Initialize(codeEditor:GetWidth(), GetScreenHeight() - menuBar:GetHeight() - codeEditor:GetHeight(), background:LightGray(), "This is the output area.")
//        outputWindow:SetPosition(codeEditor:GetX(), 0)
//        Add(outputWindow)
    end

    action CreateNavigationWindow()
//        Tree tree
//        navigator = tree
//        navigator:SetColor(background:Green())
//        navigator:SetDock("left")
//        navigator:SetDock("bottom")
//        navigator:DockToWindow(true)
//        navigator:SetWidthByPercent(projectTree:GetWidthPercentage() * 100)
//        navigator:SetHeightByPercent(100 - cast(integer, (projectTree:GetHeightPercentage() + menuBar:GetHeight() / GetScreenHeight()) * 100))
//        navigator:SetBorder(1)
//        Add(navigator)
//        AddClassMembers()
    end

    private action AddClassMembers()
//        TreeItem memberFunction
//        memberFunction:SetText("CreateGame()")
//        navigator:AddRootItem(memberFunction)
//        
//        TreeItem memberVariable
//        memberVariable:SetText("projectTree")
//        navigator:AddRootItem(memberVariable)
//        
//        navigator:UpdateTree()
    end

    action LoadUpdates
        File defaultUpdateFile
        defaultUpdateFile:SetPath("Configuration/Updates.json")
        updater:Load(defaultUpdateFile)

        Downloader download
        download:SetPath("https://quorumlanguage.com/studio/live/Configuration/Updates.json")
        boolean value = download:Exists()

        File downloadHere
        downloadHere:SetPath("Updates/Configuration/Updates.json")
        File mom = downloadHere:GetParentDirectory()
        if not mom:Exists()
            mom:CreateDirectories()
        end

        download:SetFile(downloadHere)
        download:Download()
        
        Updater newUpdate
        newUpdate:Load(downloadHere)
        updater:CheckForNewerVersion(newUpdate)
        if updater:HasUpdates()
            updater:DownloadModules()
        end
    end

    action CheckForUpdates
        //first ping the server and see if the files are there.
        
        //get the file --- for now let's get one from testing
        File new
        new:SetPath("Tests/UpdatesTests/UpdateNewVersion.json")

        Updater up
        up:Load(new)

        updater:CheckForNewerVersion(up)
    end
end
