package Libraries.Development.Environment.Studio
//use Libraries.Interface.Controls.MenuBar
//use Libraries.Interface.Controls.MenuItem
use Libraries.Game.Graphics.Color
use Libraries.Development.Environment.Studio.Actions.ExitAction
use Libraries.Game.Game
use Libraries.Development.Environment.Projects.ProjectManager
use Libraries.Development.Environment.Studio.Updates.Updater
use Libraries.System.File
//use Libraries.Interface.Windows.Panel
use Libraries.Development.Environment.Studio.Actions.OpenProjectAction
//use Libraries.Interface.Windows.FileChooser
//use Libraries.Game.DesktopConfiguration
//use Libraries.Interface.Controls.Tree
use Libraries.Interface.TextBox
//use Libraries.Interface.Controls.TextBox
use Libraries.Containers.Array
use Libraries.Game.Graphics.Gradient
use Libraries.Interface.Item2D
use Libraries.Interface.LabelBoxContent
use Libraries.Interface.Layouts.Layout
use Libraries.Interface.ImageInterfaceContent
use Libraries.Interface.Button
use Libraries.Game.Layer2D
use Libraries.Interface.Toolbar
use Libraries.Interface.Layouts.FlowLayout
use Libraries.Game.Behaviors.Behavior
use Libraries.Development.Environment.Projects.Project
use Libraries.Development.Environment.Studio.Behaviors.Build
use Libraries.Development.Environment.Studio.Behaviors.OpenProject
//use Libraries.Interface.Controls.TreeItem

class QuorumStudio is Game
//    MenuBar menuBar = undefined
//    MenuItem fileMenu = undefined
//    MenuItem editMenu = undefined
//    MenuItem viewMenu = undefined
//    MenuItem runMenu = undefined
//    MenuItem windowsMenu = undefined
//    MenuItem helpMenu = undefined
//    Tree projectTree = undefined
//    Tree navigator = undefined
//    TextBox codeEditor = undefined
//    TextBox outputWindow = undefined

    Color color
    Gradient gradient

    Color background
    ProjectManager manager
    Updater updater
    Toolbar toolbar
    text TOOLBAR_RESOURCES = "resources/graphics/toolbar/"
    number tempXOffset = 0
//    Panel projectPanel = undefined
    Project selectedProject = undefined

    action Start
        StartGame()
    end

    action GetProjectManager returns ProjectManager
        return manager
    end

    action CreateGame
        gradient:Set(color:LightGray(), color:LightGray(), color:White(), color:White())
        Layer2D layer = me:GetCurrentLayer2D()
        layer:SetAutomaticResizing(true)

        Behavior behave
        CreateToolbar()
        //toolbar:Resize()
//        CreatePanels()
//        CreateMenuBar()
//        CreateProjectsWindow()
//        CreateCodeEditor()
//        CreateNavigationWindow()
//        CreateOutputWindow()
//        MenuBar value = GetMenuBar()
//        Add(value)
    end

    action CreateToolbar
        
        LabelBoxContent content
        content:Initialize(gradient, color:Black(), "")
        content:SetBorderThickness(0)
        
        toolbar:SetVisualContent(content)
        Add(toolbar)

        FlowLayout toolbarLayout
        // Width is the full width of the screen.
        toolbarLayout:SetPercentageWidth(1)
        // Height is fixed to 100 pixels.
        toolbarLayout:SetPercentageHeight(0)
        toolbarLayout:SetHeightOffset(30)

        // Toolbar is placed at top of screen, minus 100 pixels.
        toolbarLayout:SetPercentageY(1)
        toolbarLayout:SetOffsetY(-30)

        toolbar:AddLayout(toolbarLayout)

        // Force the toolbar to resize to the new layout.
        toolbar:Resize()

        // Load some testing textures into buttons.
        integer counter = 0

        // Boundary of the last button.
        number endValue = 0
        Build build
        build:SetQuorumStudio(me)

        OpenProject open
        open:SetQuorumStudio(me)

        AddButtonToToolbar(TOOLBAR_RESOURCES + "NewProject.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "NewFile.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "OpenProject.png", open)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "SaveAll.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Undo.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Redo.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Build.png", build)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "CleanAndBuild.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Run.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Debug.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Stop.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Pause.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "Continue.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "StepOver.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "StepInto.png", undefined)
        AddButtonToToolbar(TOOLBAR_RESOURCES + "StepOut.png", undefined)
        toolbar:Resize()
    end

    private action AddButtonToToolbar(text image, Behavior behavior)

        ImageInterfaceContent buttonContent
        buttonContent:Load(image)
        
        Button button
        
        button:SetVisualContent(buttonContent)

        button:SetWidth(30)
        button:SetHeight(30)

        if behavior not= undefined
            button:SetBehavior(behavior)
        end
        toolbar:Add(button)
    end
    
    action GetSelectedProject returns Project
        return selectedProject
    end

//    action GetMenuBar returns MenuBar
//        return menuBar
//    end

    action OpenProject
//        FileChooser chooser
//        chooser:SetModeToFolder()
//        Add(chooser)
    end

    action CreatePanels
        
//        projectPanel:Initialize(200, 500)
//        projectPanel:SetBackgroundColor(background:LightGray())
//        projectPanel:SetPosition(0, 0)
//        Add(projectPanel)
//        Tree tree1
//        panel:Add(tree1)
//        tree1:Initialize(180, 480)
//        tree1:SetPosition(10, 10)
//        tree1:SetBackgroundColor(bgColor:White())
//        TreeItem item1
//        TreeItem item2
//        TreeItem item3
//        TreeItem item4
//        TreeItem item5
//        item1:Initialize(40, 10, "item1")
//        item2:Initialize(40, 10, "item2")
//        item3:Initialize(40, 10, "item3")
//        item4:Initialize(40, 10, "item4")
//        item5:Initialize(40, 10, "item5")
//        item1:SetText("Item 1")
//        item2:SetText("Item 2")
//        item3:SetText("Item 3")
//        item4:SetText("item 4")
//        item5:SetText("item 5")
//        tree1:AddRootItem(item1)
//        item1:AddChildItem(item2)
//        item2:AddChildItem(item3)
//        item4:AddChildItem(item5)
//        tree1:AddRootItem(item4)
////        tree1:AddRootItem(item5)
//        tree1:UpdateTree()
    end

    action CreateMenuBar
//        MenuBar bar
//        menuBar = bar
//        menuBar:SetColor(background:White())
//        menuBar:SetDock("top")
//        menuBar:SetDock("left")
//        menuBar:DockToWindow(true)
//        menuBar:SetWidthByPercent(100)
//        menuBar:SetHeightByPercent(menuBar:GetHeight() / GetScreenHeight() * 100)
//        menuBar:SetMaxHeight(cast(integer, menuBar:GetHeight()))
//        menuBar:LockMaxHeight(true)
//
//        SetupFileMenu()
//        SetupEditMenu()
//        SetupViewMenu()
//        SetupRunMenu()
//        SetupWindowsMenu()
//        SetupHelpMenu()
    end

    //Adding the mouse listeners will give unintended results for now
    private action SetupFileMenu
//        MenuItem menu
//        fileMenu = menu
//        fileMenu:SetText("File")
//        menuBar:AddMenu(fileMenu)
//
//        MenuItem newProject
//        newProject:SetText("New Project")
//
//        MenuItem openProject
//        openProject:SetText("Open Project")
//
//        OpenProjectAction openProjectAction
//        openProjectAction:SetMainApplication(me)
////        openProject:AddMouseListener(openProjectAction)
//
//        MenuItem closeProject
//        closeProject:SetText("Close Project")
//
//        MenuItem newFile
//        newFile:SetText("New File")
//
//        MenuItem openFile
//        openFile:SetText("Open File")
//
//        MenuItem save
//        save:SetText("Save")
//
//        MenuItem saveAs
//        saveAs:SetText("Save As...")
//
//        MenuItem saveAll
//        saveAll:SetText("Save All")
//
//        MenuItem exit
//        exit:SetText("Exit")
//        ExitAction exitAction
//        exitAction:SetMainApplication(me)
////        exit:AddMouseListener(exitAction)
//
//        fileMenu:AddMenu(newProject)
//        fileMenu:AddMenu(openProject)
//        fileMenu:AddMenu(closeProject)
//        fileMenu:AddMenu(newFile)
//        fileMenu:AddMenu(openFile)
//        fileMenu:AddMenu(save)
//        fileMenu:AddMenu(saveAs)
//        fileMenu:AddMenu(saveAll)
//        fileMenu:AddMenu(exit)
    end

    private action SetupEditMenu
//        MenuItem menu
//        editMenu = menu
//        editMenu:SetText("Edit")
//        menuBar:AddMenu(editMenu)
//
//        MenuItem undo
//        undo:SetText("Undo")
//
//        MenuItem redo
//        redo:SetText("Redo")
//
//        MenuItem cut
//        cut:SetText("Cut")
//
//        MenuItem copy
//        copy:SetText("Copy")
//
//        MenuItem paste
//        paste:SetText("Paste")
//
//        MenuItem delete
//        delete:SetText("Delete")
//
//        MenuItem selectAll
//        selectAll:SetText("Select All")
//
//        MenuItem gotoLine
//        gotoLine:SetText("Go to Line")
//
//        MenuItem findSelection
//        findSelection:SetText("Find Selection")
//
//        MenuItem findNext
//        findNext:SetText("Find Next")
//
//        MenuItem findPrevious
//        findPrevious:SetText("Find Previous")
//
//        MenuItem Find
//        Find:SetText("Find")
//
//        MenuItem replace
//        replace:SetText("Replace")
//
//        MenuItem projectProperties
//        projectProperties:SetText("Edit Project Properties")
//
//        editMenu:AddMenu(undo)
//        editMenu:AddMenu(redo)
//        editMenu:AddMenu(cut)
//        editMenu:AddMenu(copy)
//        editMenu:AddMenu(paste)
//        editMenu:AddMenu(delete)
//        editMenu:AddMenu(selectAll)
//        editMenu:AddMenu(gotoLine)
//        editMenu:AddMenu(findSelection)
//        editMenu:AddMenu(findNext)
//        editMenu:AddMenu(findPrevious)
//        editMenu:AddMenu(Find)
//        editMenu:AddMenu(replace)
//        editMenu:AddMenu(projectProperties)
    end

    private action SetupViewMenu
//        MenuItem menu
//        viewMenu = menu
//        viewMenu:SetText("View")
//        menuBar:AddMenu(viewMenu)
//
//        MenuItem quorumStudioErrorLog
//        quorumStudioErrorLog:SetText("Quorum Studio Error Log")
//
//        MenuItem lineNumbers
//        lineNumbers:SetText("Line Numbers")
//
//        MenuItem blocksMode
//        blocksMode:SetText("BlocksMode")
//
//        MenuItem splitMode
//        splitMode:SetText("Split Mode")
//
//        viewMenu:AddMenu(quorumStudioErrorLog)
//        viewMenu:AddMenu(lineNumbers)
//        viewMenu:AddMenu(blocksMode)
//        viewMenu:AddMenu(splitMode)
    end

    private action SetupRunMenu
//        MenuItem menu
//        runMenu = menu
//        runMenu:SetText("Run")
//        menuBar:AddMenu(runMenu)
//        
//        MenuItem build
//        build:SetText("Build")
//
//        MenuItem cleanAndBuild
//        cleanAndBuild:SetText("Clean and Build")
//
//        MenuItem run
//        run:SetText("Run")
//
//        MenuItem debug
//        debug:SetText("Debug")
//
//        MenuItem stopDebugging
//        stopDebugging:SetText("Stop Debugging")
//
//        MenuItem stepOver
//        stepOver:SetText("Step Over")
//
//        MenuItem stepInto
//        stepInto:SetText("Step Into")
//
//        MenuItem stepOut
//        stepOut:SetText("Step Out")
//
//        MenuItem runToCursor
//        runToCursor:SetText("Run to Cursor")
//
//        runMenu:AddMenu(build)
//        runMenu:AddMenu(cleanAndBuild)
//        runMenu:AddMenu(run)
//        runMenu:AddMenu(debug)
//        runMenu:AddMenu(stopDebugging)
//        runMenu:AddMenu(stepOver)
//        runMenu:AddMenu(stepInto)
//        runMenu:AddMenu(stepOut)
//        runMenu:AddMenu(runToCursor)
    end

    private action SetupWindowsMenu
//        MenuItem menu
//        windowsMenu = menu
//        windowsMenu:SetText("Windows")
//        menuBar:AddMenu(windowsMenu)
//
//        MenuItem projectWindow
//        projectWindow:SetText("Project Window")
//
//        MenuItem editorWindow
//        editorWindow:SetText("Editor Window")
//
//        MenuItem errorWindow
//        errorWindow:SetText("Error Window")
//
//        MenuItem consoleWindow
//        consoleWindow:SetText("Console Window")
//
//        MenuItem variablesWindow
//        variablesWindow:SetText("Variables Window")
//
//        MenuItem breakpointsWindow
//        breakpointsWindow:SetText("Breakpoints Window")
//
//        MenuItem optionsWindow
//        optionsWindow:SetText("Options Window")
//
//        windowsMenu:AddMenu(projectWindow)
//        windowsMenu:AddMenu(editorWindow)
//        windowsMenu:AddMenu(errorWindow)
//        windowsMenu:AddMenu(consoleWindow)
//        windowsMenu:AddMenu(variablesWindow)
//        windowsMenu:AddMenu(breakpointsWindow)
//        windowsMenu:AddMenu(optionsWindow)
    end

    private action SetupHelpMenu
//        MenuItem menu
//        helpMenu = menu
//        helpMenu:SetText("Help")
//        menuBar:AddMenu(helpMenu)
//
//        MenuItem about
//        about:SetText("About")
//
//        MenuItem findHelpOnline
//        findHelpOnline:SetText("Find Help Online")
//
//        MenuItem checkForUpdates
//        checkForUpdates:SetText("Check for Updates")
//
//        helpMenu:AddMenu(about)
//        helpMenu:AddMenu(findHelpOnline)
//        helpMenu:AddMenu(checkForUpdates)
    end

    action CreateProjectsWindow()
//        Tree tree
//        projectTree = tree
//        projectTree:SetColor(background:Teal())
//        projectTree:SetDock("left")
//        projectTree:DockToWindow(true)
//        projectTree:SetWidthByPercent(25) 
//        projectTree:SetHeightByPercent(60)
//        projectTree:SetY(GetScreenHeight() - menuBar:GetHeight() - projectTree:GetHeight())
//        projectTree:SetBorder(1)
//        Add(projectTree)
//
//        File directory
//        Array<File> directoryFiles = directory:GetDirectoryListing()
//        RemoveHiddenFiles(directoryFiles)
//        
//        i = 0
//        repeat while i < directoryFiles:GetSize()
//           File currentFile = directoryFiles:Get(i)
//           TreeItem toProjectTree
//           toProjectTree:SetText(currentFile:GetFileName())
//           projectTree:AddRootItem(toProjectTree)
//           if(currentFile:IsDirectory())
//                integer j = 0
//                Array<File> childFiles = currentFile:GetDirectoryListing()
//                RemoveHiddenFiles(childFiles)
//                repeat while j < childFiles:GetSize()
//                    AddFileToTree(childFiles:Get(j), toProjectTree)
//                    j = j + 1
//                end
//           end
//           i = i + 1
//        end
//
//        projectTree:UpdateTree()
    end

    //Crashes on Windows
//    private action AddFileToTree(File fileToAdd, TreeItem targetTree)
//         TreeItem file
//         file:SetText(fileToAdd:GetFileName())
//         targetTree:AddChildItem(file)
//
//        if(fileToAdd:IsDirectory())
//            Array<File> folder = fileToAdd:GetDirectoryListing()
//            RemoveHiddenFiles(folder)
//            integer i = 0
//            repeat while i < folder:GetSize()
//                    //Does not work on Windows, Fails to load native font
//                AddFileToTree(folder:Get(i), file)
//                i = i + 1
//            end
//        end
//    end

    private action RemoveHiddenFiles(Array<File> directory)
        integer i = 0
        repeat while i < directory:GetSize()
            if(directory:Get(i):IsHidden())
                directory:Remove(directory:Get(i))
            end
            i = i + 1
        end
    end

    action CreateCodeEditor()
//        TextBox textBox
//        codeEditor = textBox
//        
//        codeEditor:Initialize(GetScreenWidth() - projectTree:GetWidth(), cast(integer, GetScreenHeight() * 0.7), background:White(), "")
//        codeEditor:SetPosition(projectTree:GetWidth(), GetScreenHeight() - menuBar:GetHeight() - codeEditor:GetHeight())
//        Add(codeEditor)
    end

    action CreateNavigationWindow()
//        Tree tree
//        navigator = tree
//        navigator:SetColor(background:Green())
//        navigator:SetDock("left")
//        navigator:SetDock("bottom")
//        navigator:DockToWindow(true)
//        navigator:SetWidthByPercent(projectTree:GetWidthPercentage() * 100)
//        navigator:SetHeightByPercent(100 - cast(integer, (projectTree:GetHeightPercentage() + menuBar:GetHeight() / GetScreenHeight()) * 100))
//        navigator:SetBorder(1)
//        Add(navigator)
//        AddClassMembers()
    end

    private action AddClassMembers()
//        TreeItem memberFunction
//        memberFunction:SetText("CreateGame()")
//        navigator:AddRootItem(memberFunction)
//        
//        TreeItem memberVariable
//        memberVariable:SetText("projectTree")
//        navigator:AddRootItem(memberVariable)
//        
//        navigator:UpdateTree()
    end

    action CreateOutputWindow()
//        TextBox textBox
//        outputWindow = textBox
//
//        outputWindow:Initialize(codeEditor:GetWidth(), GetScreenHeight() - menuBar:GetHeight() - codeEditor:GetHeight(), background:LightGray(), "This is the output area.")
//        outputWindow:SetPosition(codeEditor:GetX(), 0)
//        Add(outputWindow)
    end

    action LoadUpdates
        File defaultUpdateFile
        defaultUpdateFile:SetPath("Configuration/Updates.json")
        updater:Load(defaultUpdateFile)

        Downloader download
        download:SetPath("https://quorumlanguage.com/studio/live/Configuration/Updates.json")
        boolean value = download:Exists()

        File downloadHere
        downloadHere:SetPath("Updates/Configuration/Updates.json")
        File mom = downloadHere:GetParentDirectory()
        if not mom:Exists()
            mom:CreateDirectories()
        end

        download:SetFile(downloadHere)
        download:Download()
        
        Updater newUpdate
        newUpdate:Load(downloadHere)
        updater:CheckForNewerVersion(newUpdate)
        if updater:HasUpdates()
            updater:DownloadModules()
        end
    end

    action CheckForUpdates
        //first ping the server and see if the files are there.
        
        //get the file --- for now let's get one from testing
        File new
        new:SetPath("Tests/UpdatesTests/UpdateNewVersion.json")

        Updater up
        up:Load(new)

        updater:CheckForNewerVersion(up)
    end
end