package Libraries.Development.Environment.Studio.Updates
use Libraries.System.File
use Libraries.Data.Formats.JavaScriptObjectNotation
use Libraries.Data.Formats.JavaScriptObjectNotationObject
use Libraries.System.Logger
use Libraries.Containers.HashTable
use Libraries.Containers.Iterator
use Libraries.Containers.Array
use Libraries.Development.Environment.Studio.Downloader

class Updater
    constant text MAJOR_VERSION = "Major Version"
    constant text MINOR_VERSION = "Minor Version"
    constant text FILES = "files"
    HashTable<text, Module> modules
    Array<Module> updates
    Array<Module> deletes

    Logger logger

    action Load(File file)
        JavaScriptObjectNotation notation
        text value = file:Read()
        JavaScriptObjectNotationObject json = notation:ReadToObject(value)
        //get all the properties from JSON
        i = 0
        repeat while i < json:GetSize()
            JavaScriptObjectNotationObject obj = json:Get(i)
            //output obj:GetKey()
            ProcessKey(obj)
            i = i + 1
        end
    end

    private action ProcessKey(JavaScriptObjectNotationObject object)
        text key = object:GetKey()
        Module module
        module:SetName(key)
        if object:IsEmpty()
            logger:Log("A module named " + key + " was specified, but it contained no information about it.")
            return now
        end

        JavaScriptObjectNotationObject subobject = object:Get(0)
        i = 0
        repeat while i < subobject:GetSize()
            JavaScriptObjectNotationObject value = subobject:Get(i)
            text subkey = value:GetKey()
            check
                if subkey = MAJOR_VERSION
                    module:SetMajorVersion(value:GetInteger())
                elseif subkey = MINOR_VERSION
                    module:SetMinorVersion(value:GetInteger())
                elseif subkey = FILES
                   j = 0
                    repeat while j < value:GetSize()
                        JavaScriptObjectNotationObject file = value:Get(j)
                        text fileName = file:GetText()
                        module:AddFile(fileName)
                        j = j + 1
                    end
                end
                i = i + 1
            detect e
                logger:Log("An error was thrown when processing the Updates.json file. A major or minor version number was incorrect in the module " + key + ".")
            end
        end

        modules:Add(module:GetName(), module)
    end

    private action GetSortedModuleList returns Array<Module>
        Array<Module> mods
        Iterator<Module> it = modules:GetValueIterator()
        repeat while it:HasNext()
            Module module = it:Next()
            mods:Add(module)
        end

        mods:Sort()
        return mods
    end

    action GetModule(text name) returns Module
        return modules:GetValue(name)
    end

    action HasModule(text name) returns boolean
        return modules:HasKey(name)
    end

    action GetSize returns integer
        return modules:GetSize()
    end

    action IsEmpty returns boolean
        return modules:IsEmpty()
    end

    action GetIterator returns Iterator<Module>
        return modules:GetValueIterator()
    end

    action GetModuleNames returns Iterator<text>
        return modules:GetKeyIterator()
    end

    action CheckForNewerVersion(Updater updater)
        Iterator<Module> iterator = GetIterator()

        i = 0
        repeat while iterator:HasNext()
            Module module = iterator:Next()
            Module newModule = updater:GetModule(module:GetName())
            //if newModule is not null, there's a version listed, so see if it's newer
            //if it is null, however, the module has been deleted, so kill it
            if newModule = undefined
                deletes:Add(module)
            else
                integer majorOld = module:GetMajorVersion()
                integer minorOld = module:GetMinorVersion()

                integer majorNew = newModule:GetMajorVersion()
                integer minorNew = newModule:GetMinorVersion()
                if majorNew > majorOld or (majorNew = majorOld and minorNew > minorOld)
                    updates:Add(newModule)
                end
            end
        end
    end

    action GetUpdateIterator returns Iterator<Module>
        return updates:GetIterator()
    end

    action HasUpdates returns boolean
        return not updates:IsEmpty()
    end

    action DownloadModules 
        Iterator<Module> iterator = GetUpdateIterator()
        repeat while iterator:HasNext()
            Module module = iterator:Next()
            output "Downloading updates for the module " + module:GetName() + " " + module:GetVersion() + "."
            Iterator<text> files = module:GetFiles()
            repeat while files:HasNext()
                text file = files:Next()
                output "Downloading file: " + file

                Downloader download
                download:SetPath("https://quorumlanguage.com/studio/live/" + file)
                File downloadHere
                downloadHere:SetPath("Updates/" + file)

                downloadHere:GetParentDirectory():CreateDirectories()
                download:SetFile(downloadHere)
                download:Download()
                output "File download complete."
            end
        end
    end
end